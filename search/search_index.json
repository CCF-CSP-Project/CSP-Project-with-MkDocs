{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSP Project CCF CSP\u8ba4\u8bc1 \uff08CCF \u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\u8ba4\u8bc1 Certified Software Professional\uff09\u662f\u4e2d\u56fd\u8ba1\u7b97\u673a\u5b66\u4f1a\uff08CCF\uff09\u8054\u5408\u534e\u4e3a\u3001360\u3001\u6ef4\u6ef4\u7b49\u5341\u4f59\u5bb6\u77e5\u540dIT\u4f01\u4e1a\u4ee5\u53ca\u6e05\u534e\u3001\u5317\u822a\u3001\u56fd\u9632\u79d1\u5927\u7b4915\u6240\u8457\u540d\u9ad8\u6821\u4e8e2014\u5e74\u63a8\u51faCCF CSP\uff08\u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\uff09\u8ba4\u8bc1\u6807\u51c6\uff0c\u7528\u4e8e\u8bc4\u4ef7\u4e1a\u754c\u4eba\u58eb\u7684\u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\u3002 CSP Project \u65e8\u5728\u6574\u7406 CSP \u8003\u8bd5\u9898\u76ee\u7684\u5404\u79cd\u96be\u5ea6\u5c42\u6b21\uff0c\u4e14\u6ee1\u8db3\u8003\u8bd5\u73af\u5883\u9700\u6c42\u7684\u601d\u8def\u53ca\u9898\u89e3\uff0c\u529b\u6c42\u6ee1\u8db3\u5404\u4e2a\u6c34\u5e73\u9636\u5c42\u9009\u624b\u7684\u9700\u8981\uff0c\u8ba9\u6240\u6709\u8bfb\u8005\u90fd\u80fd\u6709\u6240\u6536\u83b7\u3002 \u8be5\u9879\u76ee\u5b58\u5728\u4e0d\u540c\u7248\u672c\uff0c\u5404\u4e2a\u7248\u672c\u95f4\u4f1a\u5c3d\u91cf\u4fdd\u6301\u540c\u6b65\u66f4\u65b0\u3002","title":"CSP Project"},{"location":"#csp-project","text":"CCF CSP\u8ba4\u8bc1 \uff08CCF \u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\u8ba4\u8bc1 Certified Software Professional\uff09\u662f\u4e2d\u56fd\u8ba1\u7b97\u673a\u5b66\u4f1a\uff08CCF\uff09\u8054\u5408\u534e\u4e3a\u3001360\u3001\u6ef4\u6ef4\u7b49\u5341\u4f59\u5bb6\u77e5\u540dIT\u4f01\u4e1a\u4ee5\u53ca\u6e05\u534e\u3001\u5317\u822a\u3001\u56fd\u9632\u79d1\u5927\u7b4915\u6240\u8457\u540d\u9ad8\u6821\u4e8e2014\u5e74\u63a8\u51faCCF CSP\uff08\u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\uff09\u8ba4\u8bc1\u6807\u51c6\uff0c\u7528\u4e8e\u8bc4\u4ef7\u4e1a\u754c\u4eba\u58eb\u7684\u8ba1\u7b97\u673a\u8f6f\u4ef6\u80fd\u529b\u3002 CSP Project \u65e8\u5728\u6574\u7406 CSP \u8003\u8bd5\u9898\u76ee\u7684\u5404\u79cd\u96be\u5ea6\u5c42\u6b21\uff0c\u4e14\u6ee1\u8db3\u8003\u8bd5\u73af\u5883\u9700\u6c42\u7684\u601d\u8def\u53ca\u9898\u89e3\uff0c\u529b\u6c42\u6ee1\u8db3\u5404\u4e2a\u6c34\u5e73\u9636\u5c42\u9009\u624b\u7684\u9700\u8981\uff0c\u8ba9\u6240\u6709\u8bfb\u8005\u90fd\u80fd\u6709\u6240\u6536\u83b7\u3002 \u8be5\u9879\u76ee\u5b58\u5728\u4e0d\u540c\u7248\u672c\uff0c\u5404\u4e2a\u7248\u672c\u95f4\u4f1a\u5c3d\u91cf\u4fdd\u6301\u540c\u6b65\u66f4\u65b0\u3002","title":"CSP Project"},{"location":"introduction/about/","text":"\u5173\u4e8e\u672c\u9879\u76ee \u5185\u5bb9\u8bf4\u660e CSP Project \u65e8\u5728\u6574\u7406 CSP \u8003\u8bd5\u9898\u76ee\u7684\u5404\u79cd\u96be\u5ea6\u5c42\u6b21\uff0c\u4e14\u6ee1\u8db3\u8003\u8bd5\u73af\u5883\u9700\u6c42\u7684\u601d\u8def\u53ca\u9898\u89e3\u3002 \u7ed3\u6784\u8bf4\u660e \u4e3a\u4e86\u66f4\u597d\u590d\u73b0\u8003\u8bd5\u60c5\u51b5\uff08\u4e0d\u4f1a\u4e8b\u5148\u77e5\u9053\u9898\u76ee\u4f7f\u7528\u7684\u7b97\u6cd5\uff09\uff0c\u4ee5\u53ca\u601d\u8def\u7684\u8fde\u8d2f\u6027\u4e0e\u9012\u8fdb\u6027\uff0c\u9879\u76ee\u6309\u7167 \u6bd4\u8d5b\u573a\u6b21 \u8fdb\u884c\u5206\u7c7b\u5b89\u6392\u3002\u76ee\u524d\u6682\u4e0d\u652f\u6301\u4ee5\u7b97\u6cd5\u6807\u7b7e\u641c\u7d22\u9898\u76ee\u3002 \u9898\u76ee\u5217\u8868\u5185\u6709\u6bcf\u573a\u6bd4\u8d5b\u7684\u9898\u76ee\uff0c\u800c\u9898\u76ee\u9875\u9762\u5bf9\u5e94\u6709 \u601d\u8def\u5217\u8868 \u8868\u683c\u3002\u5b83\u6307\u660e\u4e86\u89e3\u51b3\u8be5\u9898\u76ee\u7684\u4e0d\u540c\u601d\u8def\uff0c\u5305\u542b\u90e8\u5206\u5206\u601d\u8def\u3002 \u6bcf\u4e2a\u601d\u8def\u6709\u5bf9\u5e94\u7684\u4e09\u90e8\u5206\u94fe\u63a5\uff1a \u8d21\u732e\u8005\uff1a\u6307\u5411\u4e86\u8be5\u601d\u8def\u6761\u76ee\u7684\u521b\u5efa\u8005\uff1b \u4f7f\u7528\u8bed\u8a00\uff1a\u6307\u5411\u4e86\u8be5\u601d\u8def\u5bf9\u5e94\u7684\u4ee3\u7801\u9898\u89e3\uff1b \u94fe\u63a5\uff1a\u9898\u89e3\u94fe\u63a5\u6307\u5411\u4e86\u8be5\u90e8\u5206\u601d\u8def\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u8bfb\u8005\u8fdb\u884c\u9009\u62e9\u6027\u9605\u8bfb\uff1b\u6587\u7ae0\u94fe\u63a5\u6307\u5411\u4e86\u8be5\u601d\u8def\u6240\u5bf9\u5e94\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u5c06\u8fde\u8d2f\u7684\u601d\u8def\u653e\u5728\u4e86\u540c\u4e00\u6587\u6863\u5185\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002 \u8be5\u9879\u76ee\u7684\u5176\u4ed6\u7248\u672c LaTeX \u7248\u672c","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"introduction/about/#_1","text":"","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"introduction/about/#_2","text":"CSP Project \u65e8\u5728\u6574\u7406 CSP \u8003\u8bd5\u9898\u76ee\u7684\u5404\u79cd\u96be\u5ea6\u5c42\u6b21\uff0c\u4e14\u6ee1\u8db3\u8003\u8bd5\u73af\u5883\u9700\u6c42\u7684\u601d\u8def\u53ca\u9898\u89e3\u3002","title":"\u5185\u5bb9\u8bf4\u660e"},{"location":"introduction/about/#_3","text":"\u4e3a\u4e86\u66f4\u597d\u590d\u73b0\u8003\u8bd5\u60c5\u51b5\uff08\u4e0d\u4f1a\u4e8b\u5148\u77e5\u9053\u9898\u76ee\u4f7f\u7528\u7684\u7b97\u6cd5\uff09\uff0c\u4ee5\u53ca\u601d\u8def\u7684\u8fde\u8d2f\u6027\u4e0e\u9012\u8fdb\u6027\uff0c\u9879\u76ee\u6309\u7167 \u6bd4\u8d5b\u573a\u6b21 \u8fdb\u884c\u5206\u7c7b\u5b89\u6392\u3002\u76ee\u524d\u6682\u4e0d\u652f\u6301\u4ee5\u7b97\u6cd5\u6807\u7b7e\u641c\u7d22\u9898\u76ee\u3002 \u9898\u76ee\u5217\u8868\u5185\u6709\u6bcf\u573a\u6bd4\u8d5b\u7684\u9898\u76ee\uff0c\u800c\u9898\u76ee\u9875\u9762\u5bf9\u5e94\u6709 \u601d\u8def\u5217\u8868 \u8868\u683c\u3002\u5b83\u6307\u660e\u4e86\u89e3\u51b3\u8be5\u9898\u76ee\u7684\u4e0d\u540c\u601d\u8def\uff0c\u5305\u542b\u90e8\u5206\u5206\u601d\u8def\u3002 \u6bcf\u4e2a\u601d\u8def\u6709\u5bf9\u5e94\u7684\u4e09\u90e8\u5206\u94fe\u63a5\uff1a \u8d21\u732e\u8005\uff1a\u6307\u5411\u4e86\u8be5\u601d\u8def\u6761\u76ee\u7684\u521b\u5efa\u8005\uff1b \u4f7f\u7528\u8bed\u8a00\uff1a\u6307\u5411\u4e86\u8be5\u601d\u8def\u5bf9\u5e94\u7684\u4ee3\u7801\u9898\u89e3\uff1b \u94fe\u63a5\uff1a\u9898\u89e3\u94fe\u63a5\u6307\u5411\u4e86\u8be5\u90e8\u5206\u601d\u8def\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u65b9\u4fbf\u8bfb\u8005\u8fdb\u884c\u9009\u62e9\u6027\u9605\u8bfb\uff1b\u6587\u7ae0\u94fe\u63a5\u6307\u5411\u4e86\u8be5\u601d\u8def\u6240\u5bf9\u5e94\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u5c06\u8fde\u8d2f\u7684\u601d\u8def\u653e\u5728\u4e86\u540c\u4e00\u6587\u6863\u5185\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002","title":"\u7ed3\u6784\u8bf4\u660e"},{"location":"introduction/about/#_4","text":"LaTeX \u7248\u672c","title":"\u8be5\u9879\u76ee\u7684\u5176\u4ed6\u7248\u672c"},{"location":"introduction/contributing/","text":"\u5982\u4f55\u53c2\u4e0e \u76f4\u63a5\u5728 Github \u4e0a\u7f16\u8f91 \u589e\u52a0\u9875\u9762 \u8bf7\u53c2\u8003 \u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u601d\u8def\u9875\u9762 \u3002 \u4fee\u6539\u5355\u4e2a\u9875\u9762 \u5982\u679c\u60a8\u6ca1\u6709 Github \u8d26\u53f7\uff0c\u8bf7 \u6ce8\u518c \u4e00\u4e2a\u3002 \u627e\u5230\u60a8\u60f3\u4fee\u6539\u7684\u9875\u9762\uff1b \u70b9\u51fb\u6b63\u6587\u53f3\u4e0a\u65b9\uff08\u76ee\u5f55\u5de6\u4fa7\uff09\u7684 \u7f16\u8f91\u6b64\u9875 \u6309\u94ae\uff1b \u5728\u7f16\u8f91\u6846\u5185\u7f16\u5199\u4f60\u60f3\u4fee\u6539\u7684\u5185\u5bb9\uff1b \u7f16\u5199\u5b8c\u6210\u540e\u6eda\u52a8\u5230\u9875\u9762\u4e0b\u65b9\uff0c\u70b9\u51fb Propose changes \u6309\u94ae\u63d0\u4ea4\u4fee\u6539\u3002\u70b9\u51fb\u6309\u94ae\u540e\uff0cGitHub \u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e00\u4efd\u5206\u652f\uff0c\u5e76\u5c06\u4f60\u7684\u63d0\u4ea4\u6dfb\u52a0\u5230\u8fd9\u4e2a\u5206\u652f\u4ed3\u5e93\u3002 GitHub \u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u4f60\u7684\u5206\u652f\u4ed3\u5e93\u7684\u9875\u9762\uff0c\u6b64\u65f6\u9875\u9762\u4e0a\u65b9\u4f1a\u663e\u793a Create pull request \u6309\u94ae\uff0c\u70b9\u51fb\u540e GitHub \u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u521b\u5efa Pull Request \u9875\u9762\u3002\u5411\u4e0b\u6eda\u52a8\u68c0\u67e5\u81ea\u5df1\u6240\u4f5c\u51fa\u7684\u4fee\u6539\u6ca1\u6709\u9519\u8bef\u540e\uff0c\u586b\u5199 Pull Request \u4fe1\u606f\uff0c\u7136\u540e\u70b9\u51fb\u9875\u9762\u4e0a\u7684\u7eff\u8272\u7684 Create pull request \u6309\u94ae\u521b\u5efa Pull Request\u3002 \u4e0d\u51fa\u610f\u5916\u7684\u8bdd\uff0c\u4f60\u7684 Pull Request \u5c31\u987a\u5229\u63d0\u4ea4\u5230\u4ed3\u5e93\uff0c\u7b49\u5f85\u7ba1\u7406\u5458\u5ba1\u6838\u5e76\u5408\u5e76\u5230\u4e3b\u4ed3\u5e93\u4e2d\u5373\u53ef\u3002 \u4fee\u6539\u591a\u4e2a\u9875\u9762 \u8003\u8651\u5230 Github \u7684\u94fe\u63a5\u7a33\u5b9a\u6027\uff0c\u6211\u4eec\u63a8\u8350\u60a8 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u3002 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u5c06\u4e3b\u4ed3\u5e93 Fork \u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\uff1b \u5c06 Fork \u540e\u7684\u4ed3\u5e93\u514b\u9686\uff08clone\uff09\u5230\u672c\u5730\uff1b \u5728\u672c\u5730\u8fdb\u884c\u4fee\u6539\u540e\u63d0\u4ea4\uff08commit\uff09\u8fd9\u4e9b\u66f4\u6539\uff1b \u5c06\u8fd9\u4e9b\u66f4\u6539\u63a8\u9001\uff08push\uff09\u5230\u4f60\u514b\u9686\u7684\u4ed3\u5e93\uff1b \u63d0\u4ea4 Pull Request \u81f3\u4e3b\u4ed3\u5e93\u3002 \u5982\u679c\u60a8\u65e0\u6cd5\u7406\u89e3\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5c06\u4ed3\u5e93\u62f7\u8d1d\u5230\u81ea\u8eab\u8d26\u6237 \u5982\u679c\u60a8\u6ca1\u6709 Github \u7684\u8d26\u6237\uff0c\u8bf7 \u6ce8\u518c \u4e00\u4e2a\u3002 \u6839\u636e\u81ea\u5df1\u7684\u5e73\u53f0\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\uff0c\u53c2\u8003 \u94fe\u63a5 \u3002 \u88c5\u597d\u4e4b\u540e\uff0c\u914d\u7f6e\u672c\u5730\u7528\u6237\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a git config -global user.name \"\u4f60\u81ea\u5df1\u7684\u7528\u6237\u540d\" git config -global user.email \"\u81ea\u5df1\u7684\u90ae\u7bb1@example.com\" \u5728 \u672c\u4ed3\u5e93 \u7684\u53f3\u4e0a\u89d2\u6709 Fork \u9009\u9879\uff0c\u70b9\u51fb\u5b83\u3002\u4e4b\u540e\u60a8\u4f1a\u53d1\u73b0\u8be5\u9879\u76ee\u5df2\u7ecf\u62f7\u8d1d\u5230\u4e86\u60a8\u7684\u5e93\u4e2d\u3002 \u5728\u672c\u5730\u5efa\u597d\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u4e8e\u5b58\u653e\u62f7\u8d1d\u4e0b\u6765\u7684\u6587\u4ef6\u3002\u8fdb\u5165\u8be5\u6587\u4ef6\u5939\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a git clone https://github.com/\u60a8\u7684github\u8d26\u53f7\u540d\u79f0/CSP-Project-with-MkDocs.git \u60a8\u73b0\u5728\u5e94\u8be5\u80fd\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u770b\u5230\u6574\u4f53\u9879\u76ee\u4e86\u3002 \u5728\u81ea\u8eab\u4ed3\u5e93\u4e2d\u8fdb\u884c\u4fee\u6539 \u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u8fdb\u884c\u5bf9\u5e94\u7684\u4fee\u6539\u3002 \u5728\u60a8\u7684\u4ed3\u5e93\u91cc\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5230\u672c\u9879\u76ee\u9875\u9762\u7684\u5c55\u793a\uff0c\u8bf7\u4e0d\u7528\u62c5\u5fc3\u635f\u574f\u95ee\u9898\u3002 \u8fdb\u884c\u5bf9\u5e94\u4fee\u6539\u4e4b\u540e\uff0c\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u5f00\u542f\u547d\u4ee4\u884c\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a git add . git commit -m \"\u6211\u505a\u51fa\u4e86\u54ea\u4e9b\u8d21\u732e\" git push origin master \u767b\u5165 Github \u7f51\u9875\u7aef\uff0c\u5e94\u8be5\u53ef\u4ee5\u770b\u89c1\u60a8\u7684\u4ed3\u5e93\u5185\u5df2\u7ecf\u51fa\u73b0\u4e86\u5bf9\u5e94\u7684\u53d8\u5316\u3002 \u5c06\u81ea\u8eab\u4ed3\u5e93\u63d0\u4ea4\u5230\u672c\u4ed3\u5e93 \u5728\u60a8\u7684\u4ed3\u5e93\u9875\u9762\uff0c\u70b9\u51fb\u5bfc\u822a\u680f\u4e2d\u7684 Pull request \uff0c\u4e4b\u540e\u518d\u70b9\u51fb\u53f3\u4e0a\u89d2\u7eff\u8272\u7684 New pull request \u3002 \u786e\u8ba4 Pull request \u7684\u65b9\u5411\uff0c\u5e94\u8be5\u7531\u60a8\u7684\u4ed3\u5e93\u6307\u5411\u672c\u4ed3\u5e93\u3002\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u70b9\u51fb\u7eff\u8272\u7684 Create pull request \u3002 \u586b\u5199\u597d\u5bf9\u5e94\u8bc4\u8bba\uff0c\u70b9\u51fb\u53f3\u4e0b\u89d2\u7eff\u8272 Create pull request \u5373\u53ef\u3002","title":"\u5982\u4f55\u53c2\u4e0e"},{"location":"introduction/contributing/#_1","text":"","title":"\u5982\u4f55\u53c2\u4e0e"},{"location":"introduction/contributing/#github","text":"","title":"\u76f4\u63a5\u5728 Github \u4e0a\u7f16\u8f91"},{"location":"introduction/contributing/#_2","text":"\u8bf7\u53c2\u8003 \u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u601d\u8def\u9875\u9762 \u3002","title":"\u589e\u52a0\u9875\u9762"},{"location":"introduction/contributing/#_3","text":"\u5982\u679c\u60a8\u6ca1\u6709 Github \u8d26\u53f7\uff0c\u8bf7 \u6ce8\u518c \u4e00\u4e2a\u3002 \u627e\u5230\u60a8\u60f3\u4fee\u6539\u7684\u9875\u9762\uff1b \u70b9\u51fb\u6b63\u6587\u53f3\u4e0a\u65b9\uff08\u76ee\u5f55\u5de6\u4fa7\uff09\u7684 \u7f16\u8f91\u6b64\u9875 \u6309\u94ae\uff1b \u5728\u7f16\u8f91\u6846\u5185\u7f16\u5199\u4f60\u60f3\u4fee\u6539\u7684\u5185\u5bb9\uff1b \u7f16\u5199\u5b8c\u6210\u540e\u6eda\u52a8\u5230\u9875\u9762\u4e0b\u65b9\uff0c\u70b9\u51fb Propose changes \u6309\u94ae\u63d0\u4ea4\u4fee\u6539\u3002\u70b9\u51fb\u6309\u94ae\u540e\uff0cGitHub \u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e00\u4efd\u5206\u652f\uff0c\u5e76\u5c06\u4f60\u7684\u63d0\u4ea4\u6dfb\u52a0\u5230\u8fd9\u4e2a\u5206\u652f\u4ed3\u5e93\u3002 GitHub \u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u4f60\u7684\u5206\u652f\u4ed3\u5e93\u7684\u9875\u9762\uff0c\u6b64\u65f6\u9875\u9762\u4e0a\u65b9\u4f1a\u663e\u793a Create pull request \u6309\u94ae\uff0c\u70b9\u51fb\u540e GitHub \u4f1a\u8df3\u8f6c\u5230\u4e00\u4e2a\u521b\u5efa Pull Request \u9875\u9762\u3002\u5411\u4e0b\u6eda\u52a8\u68c0\u67e5\u81ea\u5df1\u6240\u4f5c\u51fa\u7684\u4fee\u6539\u6ca1\u6709\u9519\u8bef\u540e\uff0c\u586b\u5199 Pull Request \u4fe1\u606f\uff0c\u7136\u540e\u70b9\u51fb\u9875\u9762\u4e0a\u7684\u7eff\u8272\u7684 Create pull request \u6309\u94ae\u521b\u5efa Pull Request\u3002 \u4e0d\u51fa\u610f\u5916\u7684\u8bdd\uff0c\u4f60\u7684 Pull Request \u5c31\u987a\u5229\u63d0\u4ea4\u5230\u4ed3\u5e93\uff0c\u7b49\u5f85\u7ba1\u7406\u5458\u5ba1\u6838\u5e76\u5408\u5e76\u5230\u4e3b\u4ed3\u5e93\u4e2d\u5373\u53ef\u3002","title":"\u4fee\u6539\u5355\u4e2a\u9875\u9762"},{"location":"introduction/contributing/#_4","text":"\u8003\u8651\u5230 Github \u7684\u94fe\u63a5\u7a33\u5b9a\u6027\uff0c\u6211\u4eec\u63a8\u8350\u60a8 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u3002","title":"\u4fee\u6539\u591a\u4e2a\u9875\u9762"},{"location":"introduction/contributing/#git","text":"\u5c06\u4e3b\u4ed3\u5e93 Fork \u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\uff1b \u5c06 Fork \u540e\u7684\u4ed3\u5e93\u514b\u9686\uff08clone\uff09\u5230\u672c\u5730\uff1b \u5728\u672c\u5730\u8fdb\u884c\u4fee\u6539\u540e\u63d0\u4ea4\uff08commit\uff09\u8fd9\u4e9b\u66f4\u6539\uff1b \u5c06\u8fd9\u4e9b\u66f4\u6539\u63a8\u9001\uff08push\uff09\u5230\u4f60\u514b\u9686\u7684\u4ed3\u5e93\uff1b \u63d0\u4ea4 Pull Request \u81f3\u4e3b\u4ed3\u5e93\u3002 \u5982\u679c\u60a8\u65e0\u6cd5\u7406\u89e3\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u5c06\u4ed3\u5e93\u62f7\u8d1d\u5230\u81ea\u8eab\u8d26\u6237 \u5982\u679c\u60a8\u6ca1\u6709 Github \u7684\u8d26\u6237\uff0c\u8bf7 \u6ce8\u518c \u4e00\u4e2a\u3002 \u6839\u636e\u81ea\u5df1\u7684\u5e73\u53f0\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\uff0c\u53c2\u8003 \u94fe\u63a5 \u3002 \u88c5\u597d\u4e4b\u540e\uff0c\u914d\u7f6e\u672c\u5730\u7528\u6237\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a git config -global user.name \"\u4f60\u81ea\u5df1\u7684\u7528\u6237\u540d\" git config -global user.email \"\u81ea\u5df1\u7684\u90ae\u7bb1@example.com\" \u5728 \u672c\u4ed3\u5e93 \u7684\u53f3\u4e0a\u89d2\u6709 Fork \u9009\u9879\uff0c\u70b9\u51fb\u5b83\u3002\u4e4b\u540e\u60a8\u4f1a\u53d1\u73b0\u8be5\u9879\u76ee\u5df2\u7ecf\u62f7\u8d1d\u5230\u4e86\u60a8\u7684\u5e93\u4e2d\u3002 \u5728\u672c\u5730\u5efa\u597d\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7528\u4e8e\u5b58\u653e\u62f7\u8d1d\u4e0b\u6765\u7684\u6587\u4ef6\u3002\u8fdb\u5165\u8be5\u6587\u4ef6\u5939\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a git clone https://github.com/\u60a8\u7684github\u8d26\u53f7\u540d\u79f0/CSP-Project-with-MkDocs.git \u60a8\u73b0\u5728\u5e94\u8be5\u80fd\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u770b\u5230\u6574\u4f53\u9879\u76ee\u4e86\u3002 \u5728\u81ea\u8eab\u4ed3\u5e93\u4e2d\u8fdb\u884c\u4fee\u6539 \u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u8fdb\u884c\u5bf9\u5e94\u7684\u4fee\u6539\u3002 \u5728\u60a8\u7684\u4ed3\u5e93\u91cc\u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u5230\u672c\u9879\u76ee\u9875\u9762\u7684\u5c55\u793a\uff0c\u8bf7\u4e0d\u7528\u62c5\u5fc3\u635f\u574f\u95ee\u9898\u3002 \u8fdb\u884c\u5bf9\u5e94\u4fee\u6539\u4e4b\u540e\uff0c\u5728\u8be5\u6587\u4ef6\u5939\u4e2d\u5f00\u542f\u547d\u4ee4\u884c\uff0c\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a git add . git commit -m \"\u6211\u505a\u51fa\u4e86\u54ea\u4e9b\u8d21\u732e\" git push origin master \u767b\u5165 Github \u7f51\u9875\u7aef\uff0c\u5e94\u8be5\u53ef\u4ee5\u770b\u89c1\u60a8\u7684\u4ed3\u5e93\u5185\u5df2\u7ecf\u51fa\u73b0\u4e86\u5bf9\u5e94\u7684\u53d8\u5316\u3002 \u5c06\u81ea\u8eab\u4ed3\u5e93\u63d0\u4ea4\u5230\u672c\u4ed3\u5e93 \u5728\u60a8\u7684\u4ed3\u5e93\u9875\u9762\uff0c\u70b9\u51fb\u5bfc\u822a\u680f\u4e2d\u7684 Pull request \uff0c\u4e4b\u540e\u518d\u70b9\u51fb\u53f3\u4e0a\u89d2\u7eff\u8272\u7684 New pull request \u3002 \u786e\u8ba4 Pull request \u7684\u65b9\u5411\uff0c\u5e94\u8be5\u7531\u60a8\u7684\u4ed3\u5e93\u6307\u5411\u672c\u4ed3\u5e93\u3002\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u70b9\u51fb\u7eff\u8272\u7684 Create pull request \u3002 \u586b\u5199\u597d\u5bf9\u5e94\u8bc4\u8bba\uff0c\u70b9\u51fb\u53f3\u4e0b\u89d2\u7eff\u8272 Create pull request \u5373\u53ef\u3002","title":"\u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91"},{"location":"introduction/faq/","text":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54 \u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e2a\u9879\u76ee\uff1f \u7f51\u4e0a\u9898\u89e3\u9c7c\u9f99\u6df7\u6742\uff0c\u5f88\u96be\u627e\u5230\u9002\u5408\u81ea\u5df1\u7684\uff1b \u5f88\u591a\u9009\u624b\u65e0\u6cd5\u505a\u5230\u4e00\u773c\u770b\u51fa\u67d0\u4e9b\u9898\u7684\u505a\u6cd5\uff08\u6bd4\u5982\u7b14\u8005\uff09\uff0c\u9700\u8981\u5bf9\u5404\u79cd\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\u3001\u5c1d\u8bd5\u4e0e\u7b5b\u9009\uff0c\u800c\u5f88\u591a\u9898\u89e3\u5f80\u5f80\u201c\u4e00\u6b65\u5230\u4f4d\u201d\uff0c\u7f3a\u5c11\u4e2d\u95f4\u5206\u6790\uff1b\u540c\u65f6\u90e8\u5206\u5206\u7684\u601d\u8def\u63d0\u53ca\u8f83\u5c11\uff1b \u7b14\u8005\u53d7\u5b66\u6821\u8001\u5e08\u6240\u6258\uff0c\u5199\u51fa\u4e00\u672c\u4e66\u6765\u63d0\u5347\u7b14\u8005\u6240\u5728\u5b66\u6821\u7684\u6574\u4f53 CSP \u8ba4\u8bc1\u6c34\u5e73\u3002\u540e\u6765\u5728 icy-blue \u5927\u4f6c\u7684\u63d0\u9192\u4e0b\uff0c\u7b14\u8005\u4e86\u89e3\u4e86 MkDocs\uff0c\u611f\u89c9\u76f8\u6bd4\u7528 LaTeX \u7f16\u5199\u4e66\u7c4d\u800c\u8a00\uff0c\u5b83\u66f4\u9002\u5408\u4e8e\u5927\u5bb6\u4ea4\u6d41\u601d\u8def\u3002 \u8fd9\u4e2a\u9879\u76ee\u662f\u4e0d\u662f\u7b49\u540c\u4e8e CSP \u7684 OI-Wiki \u2003\u2003\u5236\u4f5c\u8be5\u9879\u76ee\u6700\u521d\u7684\u52a8\u673a\u5e76\u6ca1\u6709 OI-Wiki \u90a3\u4e48\u4f1f\u5927\uff0c\u4e0d\u8fc7\u6700\u7ec8\u7684\u76ee\u7684\u4e5f\u662f\u5927\u81f4\u76f8\u540c\u7684\uff1a\u8ba9\u66f4\u591a\u7ade\u8d5b\u8d44\u6e90\u4e0d\u5145\u88d5\u7684\u540c\u5b66\u80fd\u65b9\u4fbf\u5730\u63a5\u89e6\u5230\u8bad\u7ec3\u8d44\u6e90\u3002 \u2003\u2003 OI-Wiki \u662f\u975e\u5e38\u597d\u7684\u5b66\u4e60\u7f51\u7ad9\uff0c\u4f46\u6b63\u5f0f\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u9898\u76ee\u4f7f\u7528\u7684\u7b97\u6cd5\u662f\u4e0d\u80fd\u9884\u6599\u7684\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u5b9a\u5206\u6790\u3002\u672c\u9879\u76ee\u65e8\u5728\u5e2e\u52a9\u8bfb\u8005\u5f3a\u5316\u201c\u5206\u6790\u201d\u7684\u80fd\u529b\uff0c\u4e0e OI-Wiki \u7b49\u5171\u540c\u4fc3\u8fdb\u8bfb\u8005\u6c34\u5e73\u7684\u8fdb\u6b65\u3002 \u6211\u5bf9\u8fd9\u4e2a\u9879\u76ee\u5f88\u611f\u5174\u8da3\uff0c\u8be5\u600e\u4e48\u53c2\u4e0e\uff1f \u2003\u2003\u6211\u4eec\u5f88\u611f\u8c22\u60a8\u5bf9\u672c\u9879\u76ee\u7684\u652f\u6301\uff01 \u2003\u2003\u53c2\u4e0e\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u8bf7\u53c2\u8003 \u5982\u4f55\u53c2\u4e0e \u9875\u9762\u3002 \u6211\u53ef\u80fd\u6bd4\u8f83\u5f31\uff0c\u4e0d\u77e5\u9053\u8be5\u505a\u4e9b\u4ec0\u4e48 QAQ \u2003\u2003\u6211\u4eec\u5f88\u611f\u8c22\u60a8\u5bf9\u672c\u9879\u76ee\u7684\u652f\u6301\uff01 \u2003\u2003\u56e0\u4e3a\u8981\u6536\u96c6\u4e0d\u540c\u7684\u601d\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u542c\u5230\u66f4\u591a\u4eba\u7684\u58f0\u97f3\u3002\u65e0\u8bba\u60a8\u5904\u4e8e\u7b97\u6cd5\u5b66\u4e60\u9014\u4e2d\u7684\u54ea\u4e00\u9636\u6bb5\uff0c\u60f3\u5fc5\u90fd\u6709\u81ea\u5df1\u5728\u8fd9\u4e00\u9636\u6bb5\u7684\u7406\u89e3\u4e0e\u6536\u83b7\u3002\u5982\u679c\u60a8\u80fd\u591f\u5c06\u60a8\u7684\u601d\u8def\u5206\u4eab\u7ed9\u5927\u5bb6\uff0c\u6211\u4eec\u5c06\u4f1a\u4e07\u5206\u611f\u8c22\u3002 \u2003\u2003\u80fd\u53c2\u4e0e\u7684\u65b9\u5f0f\u4e0d\u53ea\u6709\u63d0\u4f9b\u601d\u8def\u4e0e\u9898\u89e3\uff0c\u5176\u4ed6\u4e5f\u6709\u5f88\u591a\u3002\u6bd4\u5982\u5ba1\u6838\u3001\u4fee\u6539\u7a3f\u4ef6\uff0c\u5ba3\u4f20 CSP Project\uff0c\u63d0\u51fa\u4f18\u5316\u754c\u9762\u7684\u5efa\u8bae\u7b49\u7b49\u3002 \u2003\u2003\u53c2\u4e0e\u5e2e\u52a9\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u8bf7\u53c2\u8003 \u5982\u4f55\u53c2\u4e0e \u9875\u9762\u3002","title":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54"},{"location":"introduction/faq/#_1","text":"\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e2a\u9879\u76ee\uff1f \u7f51\u4e0a\u9898\u89e3\u9c7c\u9f99\u6df7\u6742\uff0c\u5f88\u96be\u627e\u5230\u9002\u5408\u81ea\u5df1\u7684\uff1b \u5f88\u591a\u9009\u624b\u65e0\u6cd5\u505a\u5230\u4e00\u773c\u770b\u51fa\u67d0\u4e9b\u9898\u7684\u505a\u6cd5\uff08\u6bd4\u5982\u7b14\u8005\uff09\uff0c\u9700\u8981\u5bf9\u5404\u79cd\u65b9\u6cd5\u8fdb\u884c\u5206\u6790\u3001\u5c1d\u8bd5\u4e0e\u7b5b\u9009\uff0c\u800c\u5f88\u591a\u9898\u89e3\u5f80\u5f80\u201c\u4e00\u6b65\u5230\u4f4d\u201d\uff0c\u7f3a\u5c11\u4e2d\u95f4\u5206\u6790\uff1b\u540c\u65f6\u90e8\u5206\u5206\u7684\u601d\u8def\u63d0\u53ca\u8f83\u5c11\uff1b \u7b14\u8005\u53d7\u5b66\u6821\u8001\u5e08\u6240\u6258\uff0c\u5199\u51fa\u4e00\u672c\u4e66\u6765\u63d0\u5347\u7b14\u8005\u6240\u5728\u5b66\u6821\u7684\u6574\u4f53 CSP \u8ba4\u8bc1\u6c34\u5e73\u3002\u540e\u6765\u5728 icy-blue \u5927\u4f6c\u7684\u63d0\u9192\u4e0b\uff0c\u7b14\u8005\u4e86\u89e3\u4e86 MkDocs\uff0c\u611f\u89c9\u76f8\u6bd4\u7528 LaTeX \u7f16\u5199\u4e66\u7c4d\u800c\u8a00\uff0c\u5b83\u66f4\u9002\u5408\u4e8e\u5927\u5bb6\u4ea4\u6d41\u601d\u8def\u3002 \u8fd9\u4e2a\u9879\u76ee\u662f\u4e0d\u662f\u7b49\u540c\u4e8e CSP \u7684 OI-Wiki \u2003\u2003\u5236\u4f5c\u8be5\u9879\u76ee\u6700\u521d\u7684\u52a8\u673a\u5e76\u6ca1\u6709 OI-Wiki \u90a3\u4e48\u4f1f\u5927\uff0c\u4e0d\u8fc7\u6700\u7ec8\u7684\u76ee\u7684\u4e5f\u662f\u5927\u81f4\u76f8\u540c\u7684\uff1a\u8ba9\u66f4\u591a\u7ade\u8d5b\u8d44\u6e90\u4e0d\u5145\u88d5\u7684\u540c\u5b66\u80fd\u65b9\u4fbf\u5730\u63a5\u89e6\u5230\u8bad\u7ec3\u8d44\u6e90\u3002 \u2003\u2003 OI-Wiki \u662f\u975e\u5e38\u597d\u7684\u5b66\u4e60\u7f51\u7ad9\uff0c\u4f46\u6b63\u5f0f\u6bd4\u8d5b\u7684\u65f6\u5019\uff0c\u9898\u76ee\u4f7f\u7528\u7684\u7b97\u6cd5\u662f\u4e0d\u80fd\u9884\u6599\u7684\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u5b9a\u5206\u6790\u3002\u672c\u9879\u76ee\u65e8\u5728\u5e2e\u52a9\u8bfb\u8005\u5f3a\u5316\u201c\u5206\u6790\u201d\u7684\u80fd\u529b\uff0c\u4e0e OI-Wiki \u7b49\u5171\u540c\u4fc3\u8fdb\u8bfb\u8005\u6c34\u5e73\u7684\u8fdb\u6b65\u3002 \u6211\u5bf9\u8fd9\u4e2a\u9879\u76ee\u5f88\u611f\u5174\u8da3\uff0c\u8be5\u600e\u4e48\u53c2\u4e0e\uff1f \u2003\u2003\u6211\u4eec\u5f88\u611f\u8c22\u60a8\u5bf9\u672c\u9879\u76ee\u7684\u652f\u6301\uff01 \u2003\u2003\u53c2\u4e0e\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u8bf7\u53c2\u8003 \u5982\u4f55\u53c2\u4e0e \u9875\u9762\u3002 \u6211\u53ef\u80fd\u6bd4\u8f83\u5f31\uff0c\u4e0d\u77e5\u9053\u8be5\u505a\u4e9b\u4ec0\u4e48 QAQ \u2003\u2003\u6211\u4eec\u5f88\u611f\u8c22\u60a8\u5bf9\u672c\u9879\u76ee\u7684\u652f\u6301\uff01 \u2003\u2003\u56e0\u4e3a\u8981\u6536\u96c6\u4e0d\u540c\u7684\u601d\u8def\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u542c\u5230\u66f4\u591a\u4eba\u7684\u58f0\u97f3\u3002\u65e0\u8bba\u60a8\u5904\u4e8e\u7b97\u6cd5\u5b66\u4e60\u9014\u4e2d\u7684\u54ea\u4e00\u9636\u6bb5\uff0c\u60f3\u5fc5\u90fd\u6709\u81ea\u5df1\u5728\u8fd9\u4e00\u9636\u6bb5\u7684\u7406\u89e3\u4e0e\u6536\u83b7\u3002\u5982\u679c\u60a8\u80fd\u591f\u5c06\u60a8\u7684\u601d\u8def\u5206\u4eab\u7ed9\u5927\u5bb6\uff0c\u6211\u4eec\u5c06\u4f1a\u4e07\u5206\u611f\u8c22\u3002 \u2003\u2003\u80fd\u53c2\u4e0e\u7684\u65b9\u5f0f\u4e0d\u53ea\u6709\u63d0\u4f9b\u601d\u8def\u4e0e\u9898\u89e3\uff0c\u5176\u4ed6\u4e5f\u6709\u5f88\u591a\u3002\u6bd4\u5982\u5ba1\u6838\u3001\u4fee\u6539\u7a3f\u4ef6\uff0c\u5ba3\u4f20 CSP Project\uff0c\u63d0\u51fa\u4f18\u5316\u754c\u9762\u7684\u5efa\u8bae\u7b49\u7b49\u3002 \u2003\u2003\u53c2\u4e0e\u5e2e\u52a9\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u8bf7\u53c2\u8003 \u5982\u4f55\u53c2\u4e0e \u9875\u9762\u3002","title":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54"},{"location":"introduction/write_passage/","text":"\u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u9898\u89e3\u9875\u9762 \u6211\u4eec\u6b22\u8fce\u4efb\u4f55\u4eba\u63d0\u51fa\u60a8\u7684\u601d\u8def\uff01\u4f46\u662f\u5bf9\u4e8e\u548c\u5df2\u6709\u601d\u8def\u91cd\u5408\u7684\u601d\u8def\uff0c\u6211\u4eec\u4f1a\u8003\u8651\u5408\u5e76\u3002\u6240\u4ee5\u8bf7\u518d\u9605\u8bfb\u5b8c\u6240\u6709\u601d\u8def\u7684\u5927\u6982\u540e\uff0c\u786e\u5b9a\u6ca1\u4eba\u505a\u8fc7\u540e\u518d\u6dfb\u52a0\u60a8\u7684\u601d\u8def\u3002\u5982\u679c\u53ea\u662f\u5efa\u8bae\u6216\u63d0\u793a\uff0c\u8bf7\u901a\u8fc7\u4fee\u6539\u5b9e\u73b0\u3002 \u5c06\u8be5\u4ed3\u5e93\u5b58\u653e\u5230\u672c\u5730\uff0c\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u4e2d\u7684\u7b2c\u4e00\u6b65\u3002 \u5728 \u6070\u5f53\u7684\u4f4d\u7f6e \u6dfb\u52a0\u60a8\u60f3\u589e\u52a0\u7684\u9875\u9762\uff0c\u8bf7\u53c2\u8003\u4e0b\u6587\u7684 \u6587\u6863\u7ed3\u6784\u8bf4\u660e \u3002 \u5728\u8fdb\u884c\u4fee\u6539\u5b8c\u5584\u540e\uff0c\u63d0\u4ea4\u5230\u672c\u4ed3\u5e93\u3002\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u3002 \u6587\u6863\u7ed3\u6784\u8bf4\u660e \u6240\u6709\u7684\u9875\u9762\u90fd\u5b58\u653e\u5728 docs \u6587\u4ef6\u5939\u4e0b\uff0c\u601d\u8def\u53ca\u9898\u89e3\u5728 docs/problem \u4e2d\u3002 \u5982\u679c\u60a8\u60f3\u589e\u52a0\u7b2c x \u6b21\u8ba4\u8bc1\u7b2c y \u9898\u7684\u9898\u89e3\uff0c\u8bf7\u5728 docs/problem/x/y \u4e0b\u521b\u5efa\u60a8\u7684\u6587\u6863\u3002\u5982\u7b2c 24 \u6b21\u8ba4\u8bc1\u7b2c 5 \u9898\u7684\u9898\u89e3\u6587\u4ef6\u5939\u5728 docs/problem/24/5 \u3002 \u8bf7\u5c06\u60a8\u7684\u6587\u6863\u547d\u540d\u4e3a n.md \uff0c\u5176\u4e2d n \u4ee3\u8868\u76ee\u524d\u8be5\u9898\u76ee\u9898\u89e3\u76ee\u5f55\u5185\u9898\u89e3\u6587\u7ae0\u7684\u4e2a\u6570\u3002\u6bd4\u5982\u5f53\u6587\u4ef6\u5939\u4e2d\u6709 1.md \u548c 2.md \u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u6587\u6863\u547d\u540d\u4e3a 3.md \u3002 \u5982\u679c\u60a8\u9700\u8981\u589e\u52a0\u56fe\u7247\uff0c\u5219\u53ef\u4ee5\u5728\u9898\u76ee\u6587\u4ef6\u5939\u4e0b\u7684 image \u6587\u4ef6\u5939\uff08\u5982\u679c\u6ca1\u6709\u5219\u521b\u5efa\uff09\u4e2d\u5b58\u653e\u56fe\u7247\uff0c\u547d\u540d\u4e3a n-name.xxx \uff0c\u5176\u4e2d n \u4e3a\u5bf9\u5e94\u7684\u6587\u6863\u540d\u79f0\uff0c name \u4e3a\u56fe\u7247\u540d\u5b57\uff0c xxx \u4e3a\u540e\u7f00\u3002\u5982\u60a8\u8981\u7ed9 3.md \u589e\u52a0\u56fe\u7247 test.png \uff0c\u5219\u8bf7\u5728 image \u6587\u4ef6\u5939\u4e2d\u547d\u540d\u4e3a 3-test.png \u3002 \u5728\u7f16\u5199\u5b8c\u4e4b\u540e\uff0c\u8bf7\u5728\u9898\u76ee\u6587\u4ef6\u5939\u5bf9\u5e94\u7684 index.md \u4e2d\uff0c\u5728\u601d\u8def\u5217\u8868\u6dfb\u52a0\u5bf9\u5e94\u60a8\u7684\u8bb0\u5f55\u3002 \u6211\u662f\u4e00\u4e2a\u6817\u5b50 \u6bd4\u5982\u8bf4\uff0c\u60a8\u8981\u7f16\u5199\u7b2c 233 \u5c4a\u6bd4\u8d5b\u7b2c 1 \u9898\u7684\u9898\u89e3\u601d\u8def\uff0c\u8be5\u6bd4\u8d5b\u5728 2042 \u5e74 12 \u6708\u4e3e\u529e\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e24\u4e2a\u9898\u89e3\u6587\u4ef6 1.md 2.md \u4e86\u3002 \u521b\u5efa docs/problem/233/1/3.md docs/problem/233/index.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 (1) ## 50% \u6570\u636e\u2014\u2014\u67d0\u4e2a\u601d\u8def (2) \u8fd9\u662f\u4e00\u6bb5\u6f14\u793a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 $\\mathbf{O}(n)$\u3002 ## 100% \u6570\u636e\u2014\u2014\u6839\u636e\u67d0\u4e2a\u601d\u8def\u7684\u6539\u8fdb \u8fd9\u662f\u4e00\u6bb5\u6f14\u793a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 $\\mathbf{O}(1)$\u3002 ### \u5b9e\u73b0 (3) ???+ success \"\u4ee3\u7801\u5b9e\u73b0\" (4) === \"C++\" ```cpp linenums=\"1\" #include <cstdio> #include <iostream> using namespace std; int main() { // \u4ee3\u7801\u4e0d\u597d\u61c2\u65f6\uff0c\u63a8\u8350\u589e\u52a0\u6ce8\u91ca printf(\"Hello World!\\n\"); return 0; } ``` === \"Java\" ```Java linenums=\"1\" import java.util.Scanner; public class Main { public static void main(String[] args) { System.out.println(\"Hello World!\\n\"); } } ``` === \"Python 3\" ```python linenums=\"1\" print(\"Hello World\\n\") ``` \u8bf7\u5728\u6587\u7ae0\u5f00\u5934\u8bf4\u660e\u5bf9\u5e94\u9898\u76ee\uff0c\u8868\u793a\u4e3a # yyyymm-p name \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d yyyy \u5bf9\u5e94\u6bd4\u8d5b\u5e74\u4efd\uff0c mm \u662f\u6708\uff0c p \u662f\u9898\u76ee\u7f16\u53f7\uff0c name \u662f\u9898\u76ee\u540d\u79f0\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u601d\u8def\uff0c\u8bf7\u8bf4\u660e\u5f97\u5206 + \u5927\u81f4\u601d\u8def\u3002 \u5b9e\u73b0\u8bf7\u5355\u72ec\u6807\u51fa\uff0c\u65b9\u4fbf\u540e\u7eed\u5f15\u7528\u3002 \u4ee3\u7801\u8bf7\u6309\u7167\u6b64\u683c\u5f0f\u7ed9\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 ## \u9898\u76ee\u94fe\u63a5 [ 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 ]( \u8fd9\u91cc\u662f\u6307\u5411 CCF CSP \u5b98\u7f51\u6d4b\u8bd5\u7f51\u7ad9\u7684\u7f51\u5740 ) ## \u601d\u8def\u5217\u8868 | \u8d21\u732e\u8005 | \u671f\u671b\u5f97\u5206 | \u5927\u6982\u601d\u8def | \u4f7f\u7528\u8bed\u8a00 | \u94fe\u63a5 | | :-: | :-: | :-: | :-: | :-: | | [ \u5176\u4ed6\u4eba\u7684github\u540d\u79f0 ]( \u5176\u4ed6\u4eba\u7684github\u8d26\u53f7 ) | 100 | \u5176\u4ed6\u4eba\u7684\u67d0\u4e2a\u601d\u8def1 | [ C++ ]( 1.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( 1.md#\u5bf9\u5e94\u89e3\u6790\u4f4d\u7f6e )/[\u6587\u7ae0 1] | | [ \u5176\u4ed6\u4eba\u7684github\u540d\u79f0 ]( \u5176\u4ed6\u4eba\u7684github\u8d26\u53f7 ) | 100 | \u5176\u4ed6\u4eba\u7684\u67d0\u4e2a\u601d\u8def2 | [ Java ]( 2.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( 2.md#\u5bf9\u5e94\u89e3\u6790\u4f4d\u7f6e )/[\u6587\u7ae0 2] | | [ \u60a8\u7684github\u540d\u79f0 ]( \u60a8\u7684github\u8d26\u53f7 ) | 50 | \u67d0\u4e2a\u601d\u8def | | [ \u9898\u89e3\u94fe\u63a5 ]( n.md#\u5bf9\u5e94\u9898\u89e3\u4f4d\u7f6e )/[\u6587\u7ae0 3] | | [ \u60a8\u7684github\u540d\u79f0 ]( \u60a8\u7684github\u8d26\u53f7 ) | 100 | \u6839\u636e\u67d0\u4e2a\u601d\u8def\u7684\u6539\u8fdb | [ C++\u3001Java\u3001Python 3 ]( 3.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( n.md#\u5bf9\u5e94\u9898\u89e3\u4f4d\u7f6e )/[\u6587\u7ae0 3] | [ \u6587\u7ae0 1 ]: 1.md [ \u6587\u7ae0 2 ]: 2.md [ \u6587\u7ae0 3 ]: 3.md \u60a8\u53ea\u9700\u8981\u589e\u52a0\u9ec4\u8272\u80cc\u666f\u7684\u884c\u5373\u53ef\uff0c\u5176\u4ed6\u5185\u5bb9\u5e94\u8be5\u5148\u524d\u5b58\u5728\u3002 \u5bf9\u5e94\u4f4d\u7f6e\u5373\u4e3a\u7f51\u9875\u6807\u7b7e\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u5728\u751f\u6210\u7f51\u9875\u540e\u70b9\u51fb\u5bf9\u5e94\u5bfc\u822a\u680f\u5373\u53ef\u6d4f\u89c8\u3002\u5982\u679c\u65e0\u6cd5\u77e5\u6653\uff0c\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u3002","title":"\u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u9898\u89e3\u9875\u9762"},{"location":"introduction/write_passage/#_1","text":"\u6211\u4eec\u6b22\u8fce\u4efb\u4f55\u4eba\u63d0\u51fa\u60a8\u7684\u601d\u8def\uff01\u4f46\u662f\u5bf9\u4e8e\u548c\u5df2\u6709\u601d\u8def\u91cd\u5408\u7684\u601d\u8def\uff0c\u6211\u4eec\u4f1a\u8003\u8651\u5408\u5e76\u3002\u6240\u4ee5\u8bf7\u518d\u9605\u8bfb\u5b8c\u6240\u6709\u601d\u8def\u7684\u5927\u6982\u540e\uff0c\u786e\u5b9a\u6ca1\u4eba\u505a\u8fc7\u540e\u518d\u6dfb\u52a0\u60a8\u7684\u601d\u8def\u3002\u5982\u679c\u53ea\u662f\u5efa\u8bae\u6216\u63d0\u793a\uff0c\u8bf7\u901a\u8fc7\u4fee\u6539\u5b9e\u73b0\u3002 \u5c06\u8be5\u4ed3\u5e93\u5b58\u653e\u5230\u672c\u5730\uff0c\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u4e2d\u7684\u7b2c\u4e00\u6b65\u3002 \u5728 \u6070\u5f53\u7684\u4f4d\u7f6e \u6dfb\u52a0\u60a8\u60f3\u589e\u52a0\u7684\u9875\u9762\uff0c\u8bf7\u53c2\u8003\u4e0b\u6587\u7684 \u6587\u6863\u7ed3\u6784\u8bf4\u660e \u3002 \u5728\u8fdb\u884c\u4fee\u6539\u5b8c\u5584\u540e\uff0c\u63d0\u4ea4\u5230\u672c\u4ed3\u5e93\u3002\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Git \u8fdb\u884c\u672c\u5730\u7f16\u8f91 \u3002","title":"\u5982\u4f55\u7f16\u5199\u81ea\u5df1\u7684\u9898\u89e3\u9875\u9762"},{"location":"introduction/write_passage/#_2","text":"\u6240\u6709\u7684\u9875\u9762\u90fd\u5b58\u653e\u5728 docs \u6587\u4ef6\u5939\u4e0b\uff0c\u601d\u8def\u53ca\u9898\u89e3\u5728 docs/problem \u4e2d\u3002 \u5982\u679c\u60a8\u60f3\u589e\u52a0\u7b2c x \u6b21\u8ba4\u8bc1\u7b2c y \u9898\u7684\u9898\u89e3\uff0c\u8bf7\u5728 docs/problem/x/y \u4e0b\u521b\u5efa\u60a8\u7684\u6587\u6863\u3002\u5982\u7b2c 24 \u6b21\u8ba4\u8bc1\u7b2c 5 \u9898\u7684\u9898\u89e3\u6587\u4ef6\u5939\u5728 docs/problem/24/5 \u3002 \u8bf7\u5c06\u60a8\u7684\u6587\u6863\u547d\u540d\u4e3a n.md \uff0c\u5176\u4e2d n \u4ee3\u8868\u76ee\u524d\u8be5\u9898\u76ee\u9898\u89e3\u76ee\u5f55\u5185\u9898\u89e3\u6587\u7ae0\u7684\u4e2a\u6570\u3002\u6bd4\u5982\u5f53\u6587\u4ef6\u5939\u4e2d\u6709 1.md \u548c 2.md \u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u6587\u6863\u547d\u540d\u4e3a 3.md \u3002 \u5982\u679c\u60a8\u9700\u8981\u589e\u52a0\u56fe\u7247\uff0c\u5219\u53ef\u4ee5\u5728\u9898\u76ee\u6587\u4ef6\u5939\u4e0b\u7684 image \u6587\u4ef6\u5939\uff08\u5982\u679c\u6ca1\u6709\u5219\u521b\u5efa\uff09\u4e2d\u5b58\u653e\u56fe\u7247\uff0c\u547d\u540d\u4e3a n-name.xxx \uff0c\u5176\u4e2d n \u4e3a\u5bf9\u5e94\u7684\u6587\u6863\u540d\u79f0\uff0c name \u4e3a\u56fe\u7247\u540d\u5b57\uff0c xxx \u4e3a\u540e\u7f00\u3002\u5982\u60a8\u8981\u7ed9 3.md \u589e\u52a0\u56fe\u7247 test.png \uff0c\u5219\u8bf7\u5728 image \u6587\u4ef6\u5939\u4e2d\u547d\u540d\u4e3a 3-test.png \u3002 \u5728\u7f16\u5199\u5b8c\u4e4b\u540e\uff0c\u8bf7\u5728\u9898\u76ee\u6587\u4ef6\u5939\u5bf9\u5e94\u7684 index.md \u4e2d\uff0c\u5728\u601d\u8def\u5217\u8868\u6dfb\u52a0\u5bf9\u5e94\u60a8\u7684\u8bb0\u5f55\u3002 \u6211\u662f\u4e00\u4e2a\u6817\u5b50 \u6bd4\u5982\u8bf4\uff0c\u60a8\u8981\u7f16\u5199\u7b2c 233 \u5c4a\u6bd4\u8d5b\u7b2c 1 \u9898\u7684\u9898\u89e3\u601d\u8def\uff0c\u8be5\u6bd4\u8d5b\u5728 2042 \u5e74 12 \u6708\u4e3e\u529e\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e24\u4e2a\u9898\u89e3\u6587\u4ef6 1.md 2.md \u4e86\u3002 \u521b\u5efa docs/problem/233/1/3.md docs/problem/233/index.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 # 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 (1) ## 50% \u6570\u636e\u2014\u2014\u67d0\u4e2a\u601d\u8def (2) \u8fd9\u662f\u4e00\u6bb5\u6f14\u793a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 $\\mathbf{O}(n)$\u3002 ## 100% \u6570\u636e\u2014\u2014\u6839\u636e\u67d0\u4e2a\u601d\u8def\u7684\u6539\u8fdb \u8fd9\u662f\u4e00\u6bb5\u6f14\u793a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 $\\mathbf{O}(1)$\u3002 ### \u5b9e\u73b0 (3) ???+ success \"\u4ee3\u7801\u5b9e\u73b0\" (4) === \"C++\" ```cpp linenums=\"1\" #include <cstdio> #include <iostream> using namespace std; int main() { // \u4ee3\u7801\u4e0d\u597d\u61c2\u65f6\uff0c\u63a8\u8350\u589e\u52a0\u6ce8\u91ca printf(\"Hello World!\\n\"); return 0; } ``` === \"Java\" ```Java linenums=\"1\" import java.util.Scanner; public class Main { public static void main(String[] args) { System.out.println(\"Hello World!\\n\"); } } ``` === \"Python 3\" ```python linenums=\"1\" print(\"Hello World\\n\") ``` \u8bf7\u5728\u6587\u7ae0\u5f00\u5934\u8bf4\u660e\u5bf9\u5e94\u9898\u76ee\uff0c\u8868\u793a\u4e3a # yyyymm-p name \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d yyyy \u5bf9\u5e94\u6bd4\u8d5b\u5e74\u4efd\uff0c mm \u662f\u6708\uff0c p \u662f\u9898\u76ee\u7f16\u53f7\uff0c name \u662f\u9898\u76ee\u540d\u79f0\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u601d\u8def\uff0c\u8bf7\u8bf4\u660e\u5f97\u5206 + \u5927\u81f4\u601d\u8def\u3002 \u5b9e\u73b0\u8bf7\u5355\u72ec\u6807\u51fa\uff0c\u65b9\u4fbf\u540e\u7eed\u5f15\u7528\u3002 \u4ee3\u7801\u8bf7\u6309\u7167\u6b64\u683c\u5f0f\u7ed9\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 ## \u9898\u76ee\u94fe\u63a5 [ 204212-1 \u6211\u662f\u9898\u76ee\u540d\u5b57 ]( \u8fd9\u91cc\u662f\u6307\u5411 CCF CSP \u5b98\u7f51\u6d4b\u8bd5\u7f51\u7ad9\u7684\u7f51\u5740 ) ## \u601d\u8def\u5217\u8868 | \u8d21\u732e\u8005 | \u671f\u671b\u5f97\u5206 | \u5927\u6982\u601d\u8def | \u4f7f\u7528\u8bed\u8a00 | \u94fe\u63a5 | | :-: | :-: | :-: | :-: | :-: | | [ \u5176\u4ed6\u4eba\u7684github\u540d\u79f0 ]( \u5176\u4ed6\u4eba\u7684github\u8d26\u53f7 ) | 100 | \u5176\u4ed6\u4eba\u7684\u67d0\u4e2a\u601d\u8def1 | [ C++ ]( 1.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( 1.md#\u5bf9\u5e94\u89e3\u6790\u4f4d\u7f6e )/[\u6587\u7ae0 1] | | [ \u5176\u4ed6\u4eba\u7684github\u540d\u79f0 ]( \u5176\u4ed6\u4eba\u7684github\u8d26\u53f7 ) | 100 | \u5176\u4ed6\u4eba\u7684\u67d0\u4e2a\u601d\u8def2 | [ Java ]( 2.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( 2.md#\u5bf9\u5e94\u89e3\u6790\u4f4d\u7f6e )/[\u6587\u7ae0 2] | | [ \u60a8\u7684github\u540d\u79f0 ]( \u60a8\u7684github\u8d26\u53f7 ) | 50 | \u67d0\u4e2a\u601d\u8def | | [ \u9898\u89e3\u94fe\u63a5 ]( n.md#\u5bf9\u5e94\u9898\u89e3\u4f4d\u7f6e )/[\u6587\u7ae0 3] | | [ \u60a8\u7684github\u540d\u79f0 ]( \u60a8\u7684github\u8d26\u53f7 ) | 100 | \u6839\u636e\u67d0\u4e2a\u601d\u8def\u7684\u6539\u8fdb | [ C++\u3001Java\u3001Python 3 ]( 3.md#\u5bf9\u5e94\u4ee3\u7801\u4f4d\u7f6e ) | [ \u9898\u89e3\u94fe\u63a5 ]( n.md#\u5bf9\u5e94\u9898\u89e3\u4f4d\u7f6e )/[\u6587\u7ae0 3] | [ \u6587\u7ae0 1 ]: 1.md [ \u6587\u7ae0 2 ]: 2.md [ \u6587\u7ae0 3 ]: 3.md \u60a8\u53ea\u9700\u8981\u589e\u52a0\u9ec4\u8272\u80cc\u666f\u7684\u884c\u5373\u53ef\uff0c\u5176\u4ed6\u5185\u5bb9\u5e94\u8be5\u5148\u524d\u5b58\u5728\u3002 \u5bf9\u5e94\u4f4d\u7f6e\u5373\u4e3a\u7f51\u9875\u6807\u7b7e\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u5728\u751f\u6210\u7f51\u9875\u540e\u70b9\u51fb\u5bf9\u5e94\u5bfc\u822a\u680f\u5373\u53ef\u6d4f\u89c8\u3002\u5982\u679c\u65e0\u6cd5\u77e5\u6653\uff0c\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u3002","title":"\u6587\u6863\u7ed3\u6784\u8bf4\u660e"},{"location":"knowledge/","text":"\u77e5\u8bc6\u5e93 \u6709\u4e00\u4e9b\u9898\u76ee\u6d89\u53ca\u4e86\u6bd4\u8f83\u590d\u6742\u7684\u77e5\u8bc6\u70b9\uff0c\u4e0d\u9002\u5408\u5728\u9875\u9762\u5185\u5c55\u5f00\u3002\u77e5\u8bc6\u5e93\u4e3b\u8981\u7528\u6765\u5b58\u653e\u8fd9\u4e00\u4e9b\u77e5\u8bc6\u70b9\u3002 \u56e0\u4e3a\u8be5\u8ba1\u5212\u5e76\u4e0d\u662f\u6309\u7167\u77e5\u8bc6\u70b9\u6765\u8fdb\u884c\u4e13\u9879\u7ec3\u4e60\uff0c\u77e5\u8bc6\u5e93\u4e2d\u5185\u5bb9\u5f88\u96be\u505a\u5230\u975e\u5e38\u5168\u9762\u3002\u5982\u679c\u60f3\u8981\u8fdb\u884c\u6df1\u5165\u5168\u9762\u5730\u5b66\u4e60\uff0c\u63a8\u8350\u4f7f\u7528 OI Wiki \uff0c\u6216\u8005\u662f\u5176\u4ed6\u5927\u4f6c\u7684\u535a\u5ba2\u3002","title":"\u77e5\u8bc6\u5e93"},{"location":"knowledge/#_1","text":"\u6709\u4e00\u4e9b\u9898\u76ee\u6d89\u53ca\u4e86\u6bd4\u8f83\u590d\u6742\u7684\u77e5\u8bc6\u70b9\uff0c\u4e0d\u9002\u5408\u5728\u9875\u9762\u5185\u5c55\u5f00\u3002\u77e5\u8bc6\u5e93\u4e3b\u8981\u7528\u6765\u5b58\u653e\u8fd9\u4e00\u4e9b\u77e5\u8bc6\u70b9\u3002 \u56e0\u4e3a\u8be5\u8ba1\u5212\u5e76\u4e0d\u662f\u6309\u7167\u77e5\u8bc6\u70b9\u6765\u8fdb\u884c\u4e13\u9879\u7ec3\u4e60\uff0c\u77e5\u8bc6\u5e93\u4e2d\u5185\u5bb9\u5f88\u96be\u505a\u5230\u975e\u5e38\u5168\u9762\u3002\u5982\u679c\u60f3\u8981\u8fdb\u884c\u6df1\u5165\u5168\u9762\u5730\u5b66\u4e60\uff0c\u63a8\u8350\u4f7f\u7528 OI Wiki \uff0c\u6216\u8005\u662f\u5176\u4ed6\u5927\u4f6c\u7684\u535a\u5ba2\u3002","title":"\u77e5\u8bc6\u5e93"},{"location":"knowledge/ds/lct/","text":"Link Cut Tree \u672c\u7bc7\u5728 OI Wiki \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u90e8\u5206\u4fee\u6539\u3002 \u7b80\u4ecb Link/Cut Tree \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u7528\u5b83\u6765\u89e3\u51b3 \u52a8\u6001\u6811\u95ee\u9898 \u3002 Link/Cut Tree \u53c8\u79f0 Link-Cut Tree\uff0c\u7b80\u79f0 LCT\uff0c\u4f46\u5b83\u4e0d\u53eb\u52a8\u6001\u6811\uff0c\u52a8\u6001\u6811\u662f\u6307\u4e00\u7c7b\u95ee\u9898\u3002 Splay Tree \u662f LCT \u7684\u57fa\u7840\uff0c\u4f46\u662f LCT \u7528\u7684 Splay Tree \u548c\u666e\u901a\u7684 Splay \u5728\u7ec6\u8282\u5904\u4e0d\u592a\u4e00\u6837\uff08\u8fdb\u884c\u4e86\u4e00\u4e9b\u6269\u5c55\uff09\u3002 \u52a8\u6001\u6811\u95ee\u9898 \u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a \u4fee\u6539\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u3002 \u67e5\u8be2\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u548c\u3002 \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u6743\u503c\u3002 \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u6743\u503c\u548c\u3002 \u65ad\u5f00\u5e76\u8fde\u63a5\u4e00\u4e9b\u8fb9\uff0c\u4fdd\u8bc1\u4ecd\u662f\u4e00\u68f5\u6811 \u3002 \u8981\u6c42 \u5728\u7ebf \u6c42\u51fa\u4e0a\u9762\u7684\u7b54\u6848\u3002 \u53ef\u4ee5\u770b\u51fa\u8fd9\u68f5\u6811\u662f \u52a8\u6001 \u7684\uff0c\u65e0\u6cd5\u7528\u6811\u94fe\u5256\u5206\u89e3\u51b3\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff1f \u6811\u94fe\u5256\u5206\u7684\u505a\u6cd5\u662f\uff0c\u5bf9\u6574\u68f5\u5b50\u6811\u6309\u7167 \u5927\u5c0f \u8fdb\u884c\u5256\u5206\uff0c\u5e76\u91cd\u65b0\u6807\u53f7\uff1b\u5728\u6807\u53f7\u540e\uff0c\u5728\u6811\u4e0a\u5f62\u6210\u4e86\u4e00\u4e9b\u4ee5\u94fe\u4e3a\u5355\u4f4d\u7684 \u6807\u53f7\u8fde\u7eed \u7684\u533a\u95f4\uff0c\u4ece\u800c\u53ef\u4ee5\u5229\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u52a8\u6001\u6811\uff0c\u5728\u8fc7\u7a0b\u4e2d\u4ed6\u4f1a\u65ad\u8fb9\u8fde\u8fb9\uff0c\u9996\u5148\u65e0\u6cd5\u4fdd\u8bc1\u59cb\u7ec8\u6309\u7167\u5b50\u6811\u5927\u5c0f\u8fdb\u884c\u5256\u5206\uff0c\u5176\u6b21\u65e0\u6cd5\u4fdd\u8bc1\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u533a\u95f4\u6807\u53f7\u8fde\u7eed\uff0c\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u64cd\u4f5c\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u662f\u79bb\u7ebf\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e00\u5b9a\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002 \u5b9e\u94fe\u5256\u5206 \u5bf9\u4e8e\u4e00\u4e2a\u70b9\u8fde\u5411\u5b83\u6240\u6709\u513f\u5b50\u7684\u8fb9\uff0c\u6211\u4eec \u81ea\u5df1\u9009\u62e9\u4e00\u6761\u8fb9\u8fdb\u884c\u5256\u5206 \uff0c\u6211\u4eec\u79f0\u88ab\u9009\u62e9\u7684\u8fb9\u4e3a\u5b9e\u8fb9\uff0c\u5176\u4ed6\u8fb9\u5219\u4e3a\u865a\u8fb9\u3002\u5bf9\u4e8e\u5b9e\u8fb9\uff0c\u6211\u4eec\u79f0\u5b83\u6240\u8fde\u63a5\u7684\u513f\u5b50\u4e3a\u5b9e\u513f\u5b50\u3002\u5bf9\u4e8e\u4e00\u6761\u7531\u5b9e\u8fb9\u7ec4\u6210\u7684\u94fe\uff0c\u6211\u4eec\u540c\u6837\u79f0\u4e4b\u4e3a\u5b9e\u94fe\u3002 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5173\u4e8e\u5b9e\u94fe\u5256\u5206\u540e\u7684\u51e0\u4e2a\u7ed3\u8bba\uff1a 1. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u7684\u6df1\u5ea6\u4e92\u4e0d\u76f8\u540c\u3002 \u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u5982\u679c\u5728\u4e00\u6761\u5b9e\u94fe\u4e2d\u5b58\u5728\u6df1\u5ea6\u76f8\u540c\u7684\u4e24\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u8be5\u4e24\u4e2a\u7ed3\u70b9\u7684 LCA \u5fc5\u7136\u5b58\u5728\u81f3\u5c11 2 \u6761\u5b9e\u8fb9\uff0c\u4e0e\u5b9a\u4e49\u4e0d\u7b26\u3002 2. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u7684\u6df1\u5ea6\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u5b58\u5728\u6df1\u5ea6\u201c\u65ad\u5c42\u201d\u3002 3. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u6700\u591a\u6709\u4e00\u4e2a\u5b9e\u513f\u5b50\uff0c\u5373\u5b9e\u94fe\u53ea\u80fd\u662f\u201c\u94fe\u201d\u7ed3\u6784\u3002 4. \u5982\u679c\u77e5\u9053\u4e86\u4e00\u68f5\u6811\u4e2d\u7684\u6240\u6709\u5b9e\u94fe\uff08\u5bf9\u5e94\u6240\u6709\u5b9e\u8fb9\uff09\u4e0e\u6bcf\u6761\u94fe\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5bf9\u5e94\u7684\u7236\u8282\u70b9\uff08\u5bf9\u5e94\u6240\u6709\u865a\u8fb9\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u6811\u3002 \u8be5\u6027\u8d28\u53ef\u4ee5\u63a8\u5bfc\uff0c\u5982\u679c\u77e5\u9053\u4e86\u6240\u6709\u7684\u5b9e\u8fb9\u4e0e\u865a\u8fb9\uff0c\u68ee\u6797\u4e5f\u662f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u7684\u3002 LCT \u4e0e\u8f85\u52a9\u6811 \u5728\u5b9e\u94fe\u5256\u5206\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u68f5\u6811\uff0c\u79f0\u5176\u4e3a \u539f\u6811 \u3002\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u64cd\u4f5c\u5f88\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u5728\u80fd\u552f\u4e00\u786e\u5b9a\u539f\u6811\u7684 \u8f85\u52a9\u6811 \u4e0a\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002 \u8f85\u52a9\u6811\uff08\u5176\u5b9e\u662f\u68ee\u6797\uff09\u7531\u5f88\u591a Splay \u6811\u7ec4\u6210\u3002\u6bcf\u4e00\u4e2a\u8f85\u52a9\u6811\u4e2d\u7684 Splay \u6811\u5bf9\u5e94\u539f\u6811\u4e2d\u7684\u4e00\u6761\u5b9e\u94fe\uff1b\u8f85\u52a9\u6811\u4e2d\u7684\u6240\u6709\u7684 Splay \u6811\u548c\u4e0d\u540c Splay \u6811\u95f4\u7684\u5173\u7cfb\uff08\u5bf9\u5e94\u865a\u8fb9\uff09\u5bf9\u5e94\u539f\u6811\uff0c\u6211\u4eec\u79f0\u524d\u8005\u4e3a\u4e00\u68f5 LCT\u3002 \u5982\u679c\u9700\u8981\u7ef4\u62a4\u591a\u68f5\u539f\u6811\uff08\u68ee\u6797\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u68f5 LCT \u89e3\u51b3\uff0c\u53c2\u8003\u5b9e\u94fe\u5256\u5206\u7684\u6027\u8d28 4\u3002 \u6211\u4eec\u8fd9\u6837\u5efa\u7acb\u8f85\u52a9\u6811\uff1a \u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u4e0e\u539f\u6811\u4e2d\u7684\u4e00\u6761\u5b9e\u94fe\u4e00\u4e00\u5bf9\u5e94\u3002 \u4e2d\u5e8f\u904d\u5386\u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u5f97\u5230\u7684\u5e8f\u5217\uff0c\u5bf9\u5e94\u539f\u6811\u4e2d\u5b9e\u94fe\u7684\u8282\u70b9\u662f\u6df1\u5ea6\u9012\u589e\u7684\u3002 \u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9 \u662f \u5bf9\u5e94\u539f\u6811\u5b9e\u94fe\u4e2d\u6df1\u5ea6\u6700\u5c0f\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u3002 \u5efa\u7acb\u51fa\u8f85\u52a9\u6811\u540e\uff0c\u901a\u8fc7\u8be5\u8f85\u52a9\u6811\u53ef\u4ee5\u63a8\u51fa\u552f\u4e00\u7684\u539f\u6811\uff08\u68ee\u6797\uff09\u3002\u6240\u4ee5\u4e4b\u540e\u7684\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u8f85\u52a9\u6811\u4e0a\u64cd\u4f5c\uff0c\u800c\u4e0d\u7528\u7ba1\u539f\u6811\u3002 \u8003\u8651\u539f\u6811\u548c\u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5173\u7cfb \u539f\u6811\u4e2d\u7684\u5b9e\u94fe: \u5728\u8f85\u52a9\u6811\u4e2d\u8282\u70b9\u90fd\u5728\u4e00\u68f5 Splay \u4e2d\u3002 \u539f\u6811\u4e2d\u7684\u865a\u94fe: \u5728\u8f85\u52a9\u6811\u4e2d\uff0c\u5b50\u8282\u70b9\u6240\u5728 Splay \u7684 Father \u6307\u5411\u7236\u8282\u70b9\uff0c\u4f46\u662f\u7236\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u6307\u5411\u5b50\u8282\u70b9\u3002 \u539f\u6811\u7684\u6839\u4e0d\u7b49\u4e8e\u8f85\u52a9\u6811\u7684\u6839\u3002 \u539f\u6811\u7684\u7236\u4eb2\u8282\u70b9\u4e0d\u4e00\u5b9a\u7b49\u4e8e\u8f85\u52a9\u6811\u7684\u7236\u4eb2\u8282\u70b9\u3002 \u8f85\u52a9\u6811\u662f\u53ef\u4ee5\u5728\u6ee1\u8db3\u8f85\u52a9\u6811\u3001Splay \u7684\u6027\u8d28\u4e0b\u4efb\u610f\u6362\u6839\u7684\u3002\u8f85\u52a9\u6811\u548c\u539f\u6811\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\u3002 \u865a\u5b9e\u94fe\u53d8\u6362\u53ef\u4ee5\u8f7b\u677e\u5728\u8f85\u52a9\u6811\u4e0a\u5b8c\u6210\uff0c\u8fd9\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86\u52a8\u6001\u7ef4\u62a4\u6811\u94fe\u5256\u5206\u3002 \u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684\u53d8\u91cf\u58f0\u660e ch[N][2] \u5de6\u53f3\u513f\u5b50 f[N] \u7236\u4eb2\u6307\u5411 sum[N] \u8def\u5f84\u6743\u503c\u548c val[N] \u70b9\u6743 tag[N] \u7ffb\u8f6c\u6807\u8bb0 laz[N] \u6743\u503c\u6807\u8bb0 siz[N] \u8f85\u52a9\u6811\u4e0a\u5b50\u6811\u5927\u5c0f Other_Vars \u51fd\u6570\u58f0\u660e \u4e00\u822c\u6570\u636e\u7ed3\u6784\u51fd\u6570\uff08\u5b57\u9762\u610f\u601d\uff09 PushUp(x) PushDown(x) Splay \u7cfb\u51fd\u6570\uff08\u4e0d\u4f1a\u591a\u505a\u89e3\u91ca\uff09 Get(x) \u83b7\u53d6 \\(x\\) \u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u513f\u5b50\u3002 Splay(x) \u901a\u8fc7\u548c Rotate \u64cd\u4f5c\u8054\u52a8\u5b9e\u73b0\u628a \\(x\\) \u65cb\u8f6c\u5230 \u5f53\u524d Splay \u7684\u6839 \u3002 Rotate(x) \u5c06 \\(x\\) \u5411\u4e0a\u65cb\u8f6c\u4e00\u5c42\u7684\u64cd\u4f5c\u3002 \u65b0\u64cd\u4f5c Access(x) \u628a\u4ece\u6839\u5230 \\(x\\) \u7684\u6240\u6709\u70b9\u653e\u5728\u4e00\u6761\u5b9e\u94fe\u91cc\uff0c\u4f7f\u6839\u5230 \\(x\\) \u6210\u4e3a\u4e00\u6761\u5b9e\u8def\u5f84\uff0c\u5e76\u4e14\u5728\u540c\u4e00\u68f5 Splay \u91cc\u3002 \u53ea\u6709\u6b64\u64cd\u4f5c\u662f\u5fc5\u987b\u5b9e\u73b0\u7684\uff0c\u5176\u4ed6\u64cd\u4f5c\u89c6\u9898\u76ee\u800c\u5b9e\u73b0\u3002 IsRoot(x) \u5224\u65ad \\(x\\) \u662f\u5426\u662f\u6240\u5728\u6811\u7684\u6839\u3002 Update(x) \u5728 Access \u64cd\u4f5c\u4e4b\u540e\uff0c\u9012\u5f52\u5730\u4ece\u4e0a\u5230\u4e0b PushDown \u66f4\u65b0\u4fe1\u606f\u3002 MakeRoot(x) \u4f7f \\(x\\) \u70b9\u6210\u4e3a\u5176\u6240\u5728\u6811\u7684\u6839\u3002 Link(x, y) \u5728 \\(x, y\\) \u4e24\u70b9\u95f4\u8fde\u4e00\u6761\u8fb9\u3002 Cut(x, y) \u628a \\(x, y\\) \u4e24\u70b9\u95f4\u8fb9\u5220\u6389\u3002 Find(x) \u627e\u5230 \\(x\\) \u6240\u5728\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 Fix(x, v) \u4fee\u6539 \\(x\\) \u7684\u70b9\u6743\u4e3a \\(v\\) \u3002 Split(x, y) \u63d0\u53d6\u51fa \\(x, y\\) \u95f4\u7684\u8def\u5f84\uff0c\u65b9\u4fbf\u505a\u533a\u95f4\u64cd\u4f5c\u3002 \u5b8f\u5b9a\u4e49 #define ls ch[p][0] #define rs ch[p][1] \u51fd\u6570\u8bb2\u89e3 PushUp() \u4ece\u5de6\u53f3\u5b50\u8282\u70b9\u66f4\u65b0\u6570\u636e\u3002 inline void PushUp ( int p ) { // maintain other variables siz [ p ] = siz [ ls ] + siz [ rs ] + 1 ; } PushDown() \u4e0b\u4f20\u6807\u8bb0\u3002 inline void PushDown ( int p ) { if ( tag [ p ] != std_tag ) { // pushdown the tag tag [ p ] = std_tag ; } } Splay() && Rotate() Splay \u6811\u57fa\u672c\u64cd\u4f5c\u3002 #define Get(x) (ch[f[x]][1] == x) inline void Rotate ( int x ) { int y = f [ x ], z = f [ y ], k = Get ( x ); if ( ! isRoot ( y )) ch [ z ][ ch [ z ][ 1 ] == y ] = x ; // \u4e0a\u9762\u8fd9\u53e5\u4e00\u5b9a\u8981\u5199\u5728\u524d\u9762\uff0c\u666e\u901a\u7684 Splay \u662f\u4e0d\u7528\u7684\uff0c\u56e0\u4e3a isRoot (\u540e\u9762\u4f1a\u8bb2) ch [ y ][ k ] = ch [ x ][ ! k ], f [ ch [ x ][ ! k ]] = y ; ch [ x ][ ! k ] = y , f [ y ] = x , f [ x ] = z ; PushUp ( y ), PushUp ( x ); } inline void Splay ( int x ) { Update ( x ); // \u9a6c\u4e0a\u5c31\u80fd\u770b\u5230\u5566\u3002\u5728 Splay \u4e4b\u524d\u8981\u628a\u65cb\u8f6c\u4f1a\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u90fd PushDown for ( int fa ; fa = f [ x ], ! isRoot ( x ); Rotate ( x )) { if ( ! isRoot ( fa )) Rotate ( Get ( fa ) == Get ( x ) ? fa : x ); } } isRoot() \u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u6240\u5728 Splay \u7684\u6839\u3002 // \u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0cLCT \u5177\u6709 \u5982\u679c\u4e00\u4e2a\u513f\u5b50\u4e0d\u662f\u5b9e\u513f\u5b50\uff0c\u4ed6\u7684\u7236\u4eb2\u627e\u4e0d\u5230\u5b83\u7684\u6027\u8d28 // \u6240\u4ee5\u5f53\u4e00\u4e2a\u70b9\u65e2\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u5de6\u513f\u5b50\uff0c\u53c8\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u5b83\u5c31\u662f\u5f53\u524d Splay \u7684\u6839 #define isRoot(x) (ch[f[x]][0] != x && ch[f[x]][1] != x) Access() \u5f00\u8f9f\u4e00\u6761\u4ece\u539f\u6811\u7684\u6839\u5230\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u94fe\u3002 \u53ef\u4ee5\u5206\u89e3\u4e3a\u5bf9\u539f\u6811\u7684\u4e24\u6b65\u64cd\u4f5c\uff1a \u5c06\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u513f\u5b50\u5168\u90e8\u8f6c\u5316\u4e3a\u865a\u513f\u5b50\uff0c\u4fdd\u8bc1\u76ee\u524d\u8282\u70b9\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u8282\u70b9\uff1b \u4ece\u6df1\u5f80\u6d45\uff0c\u901a\u8fc7\u6539\u53d8\u5b9e\u513f\u5b50\u7684\u9009\u62e9\uff0c\u6253\u901a\u4ece\u539f\u6811\u7684\u6839\u5230\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u94fe\u3002 \u539f\u6811\u7684\u6539\u53d8\u8fc7\u7a0b \u539f\u6811 \u7ed3\u679c \u539f\u6811 \u7ecf\u8fc7 Access(N) \u540e\u7684\u539f\u6811 \u8f85\u52a9\u6811\u9700\u8981\u4f5c\u51fa\u5bf9\u5e94\u7684\u6539\u53d8\uff1a \u8f85\u52a9\u6811\u7684\u6539\u53d8\u8fc7\u7a0b \u539f\u8f85\u52a9\u6811 \u7b2c\u4e00\u6b21\u64cd\u4f5c \u7b2c\u4e8c\u6b21\u64cd\u4f5c \u7b2c\u4e09\u6b21\u64cd\u4f5c \u7b2c\u56db\u6b21\u64cd\u4f5c \u5047\u8bbe\u4e00\u5f00\u59cb\u8f85\u52a9\u6811\u662f\u8fd9\u4e2a\u6837\u5b50\u3002 \u8ba9 N \u65cb\u8f6c\u5230\u5f53\u524d Splay \u7684\u6839\uff1a N \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u76f4\u63a5\u65ad\u6389\u5373\u53ef\u3002 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a I \u3002 \u8ba9 I \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 I \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 N \u4f5c\u4e3a I \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 I K \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a H \u3002 \u8ba9 H \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 H \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 I \u4f5c\u4e3a H \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 H J \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I H G C \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a A \u3002 \u8ba9 A \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 A \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 H \u4f5c\u4e3a A \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 A B \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I H G C A \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u5df2\u7ecf\u64cd\u4f5c\u5230\u4e86\u539f\u6811\u7684\u6839\u3002 // \u56de\u987e\u4e00\u4e0b\u4ee3\u7801 inline int Access ( int x ) { int p ; for ( p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } return p ; } \u6211\u4eec\u53d1\u73b0 Access() \u5176\u5b9e\u5f88\u5bb9\u6613\uff0c\u53ea\u6709\u5982\u4e0b\u56db\u6b65\u64cd\u4f5c\uff1a \u628a\u5f53\u524d\u8282\u70b9\u8f6c\u5230\u6839\u3002 \u628a\u513f\u5b50\u6362\u6210\u4e4b\u524d\u7684\u8282\u70b9\u3002 \u66f4\u65b0\u5f53\u524d\u70b9\u7684\u4fe1\u606f\u3002 \u628a\u5f53\u524d\u70b9\u6362\u6210\u5f53\u524d\u70b9\u7684\u7236\u4eb2\uff0c\u7ee7\u7eed\u64cd\u4f5c\u3002 \u8fd9\u91cc\u63d0\u4f9b\u7684 Access \u8fd8\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u3002\u8fd9\u4e2a\u8fd4\u56de\u503c\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u6b21\u865a\u5b9e\u94fe\u53d8\u6362\u65f6\u865a\u8fb9\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7\u3002\u8be5\u503c\u6709\u4e24\u4e2a\u542b\u4e49\uff1a \u8fde\u7eed\u4e24\u6b21 Access \u64cd\u4f5c\u65f6\uff0c\u7b2c\u4e8c\u6b21 Access \u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684 LCA. \u8868\u793a \\(x\\) \u5230\u6839\u7684\u94fe\u6240\u5728\u7684 Splay \u6811\u7684\u6839\u3002\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u5df2\u7ecf\u88ab\u65cb\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u4e14\u7236\u4eb2\u4e00\u5b9a\u4e3a\u7a7a\u3002 Update() \u66f4\u65b0\u4fe1\u606f\uff0c\u76f8\u5f53\u4e8e\u9010\u7ea7\u4e0b\u4f20\u6807\u8bb0\u3002 // \u4ece\u4e0a\u5230\u4e0b\u4e00\u5c42\u4e00\u5c42 pushDown \u5373\u53ef void Update ( int p ) { if ( ! isRoot ( p )) Update ( f [ p ]); pushDown ( p ); } makeRoot() \u5c06\u6307\u5b9a\u8282\u70b9\u8bbe\u4e3a\u539f\u6811\u7684\u6839\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u6709 makeRoot() \u7ef4\u62a4\u8def\u5f84\u4fe1\u606f\u65f6\uff0c\u5f88\u53ef\u80fd\u51fa\u73b0\u76f8\u540c\u6df1\u5ea6\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u6837\u7684\u8282\u70b9\u65e0\u6cd5\u51fa\u73b0\u5728\u540c\u4e00\u68f5 Splay \u5185\uff0c\u4ece\u800c\u4e0d\u80fd\u65b9\u4fbf\u5730\u8fdb\u884c\u64cd\u4f5c\u3002 \u4f7f\u7528 makeRoot() \u8ba9\u5176\u4e2d\u4e00\u4e2a\u70b9\u6210\u4e3a\u6839\uff0c\u5219\u53ef\u4ee5\u6d88\u9664\u8fd9\u79cd\u5f71\u54cd\u3002 \u4ee5 makeRoot(x) \u4e3a\u4f8b\uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u901a\u8fc7 Access(x) \u64cd\u4f5c\u83b7\u5f97\u4ece\u6839\u5230 x \u7684\u8def\u5f84\u7684 Splay\uff0c\u4e14\u8fd4\u56de\u503c y \u4e3a\u8be5 Splay \u7684\u6839\u3002 \u5c06\u4ee5 y \u4e3a\u6839\u7684 Splay \u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u5373\u53ef\u3002 inline void makeRoot ( int p ) { p = Access ( p ); swap ( ch [ p ][ 0 ], ch [ p ][ 1 ]); tag [ p ] ^= 1 ; } Link() Link \u4e24\u4e2a\u70b9\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5148 Make_Root(x) \uff0c\u7136\u540e\u628a \\(x\\) \u7684\u7236\u4eb2\u6307\u5411 \\(y\\) \u5373\u53ef\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u4e0d\u80fd\u53d1\u751f\u5728\u540c\u4e00\u68f5\u6811\u5185\uff0c\u6240\u4ee5\u8bb0\u5f97\u5148\u5224\u4e00\u4e0b\u3002 inline void Link ( int x , int p ) { makeRoot ( x ); splay ( x ); f [ x ] = p ; } Split() \u5c31\u662f\u62ff\u51fa\u4e00\u68f5 Splay\uff0c\u7ef4\u62a4\u7684\u662f \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f84\u3002 \u6267\u884c\u540e\u5f97\u5230 y \u7684\u5b50\u6811\u3002 - \u5148 MakeRoot(x) \uff0c\u7136\u540e Access(y) \u3002\u5982\u679c\u8981 \\(y\\) \u505a\u6839\uff0c\u518d Splay(y) \u3002 - \u53e6\u5916 Split \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u76f4\u63a5\u53ef\u4ee5\u628a\u9700\u8981\u7684\u8def\u5f84\u62ff\u51fa\u5230 \\(y\\) \u7684\u5b50\u6811\u4e0a\uff0c\u90a3\u4e0d\u662f\u968f\u4fbf\u5e72\u561b\u54af\u3002 void split () { makeRoot ( x ); Access ( y ); Splay ( y ); } Cut() Cut \u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4fdd\u8bc1\u5408\u6cd5\u548c\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u5408\u6cd5\u3002 \u5982\u679c\u4fdd\u8bc1\u5408\u6cd5\uff0c\u76f4\u63a5 Split(x, y) \uff0c\u8fd9\u65f6\u5019 \\(y\\) \u662f\u6839\uff0c \\(x\\) \u4e00\u5b9a\u662f\u5b83\u7684\u513f\u5b50\uff0c\u53cc\u5411\u65ad\u5f00\u5373\u53ef\u3002\u5c31\u50cf\u8fd9\u6837\uff1a inline void Cut ( int x , int p ) { makeRoot ( x ), Access ( p ), Splay ( p ), ls = f [ x ] = 0 ; } \u5982\u679c\u662f\u4e0d\u4fdd\u8bc1\u5408\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\uff0c\u6211\u9009\u62e9\u4f7f\u7528 map \u5b58\u4e00\u4e0b\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5229\u7528\u6027\u8d28\u7684\u65b9\u6cd5\uff1a \u60f3\u8981\u5220\u8fb9\uff0c\u5fc5\u987b\u8981\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a \\(x,y\\) \u8fde\u901a\u3002 \\(x,y\\) \u7684\u8def\u5f84\u4e0a\u6ca1\u6709\u5176\u4ed6\u7684\u94fe\u3002 \\(x\\) \u6ca1\u6709\u53f3\u513f\u5b50\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e0a\u9762\u4e09\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u4e00\u4e2a\uff1a \\(x,y\\) \u4e4b\u95f4\u6709\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u7559\u4f5c\u4e00\u4e2a\u601d\u8003\u9898\u7ed9\u5927\u5bb6\u3002\u5224\u65ad\u8fde\u901a\u9700\u8981\u7528\u5230\u540e\u9762\u7684 Find \uff0c\u5176\u4ed6\u4e24\u70b9\u7a0d\u4f5c\u601d\u8003\u5206\u6790\u4e00\u4e0b\u7ed3\u6784\u5c31\u77e5\u9053\u8be5\u600e\u4e48\u5224\u65ad\u4e86\u3002 Find() Find() \u5176\u5b9e\u5c31\u662f\u627e\u5230\u5f53\u524d\u8f85\u52a9\u6811\u7684\u6839\u3002\u5728 Access(p) \u540e\uff0c\u518d Splay(p) \u3002\u8fd9\u6837\u6839\u5c31\u662f\u6811\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u4e00\u76f4\u5f80 ls \u8d70\uff0c\u6cbf\u9014 PushDown \u5373\u53ef\u3002 \u4e00\u76f4\u8d70\u5230\u6ca1\u6709 ls\uff0c\u975e\u5e38\u7b80\u5355\u3002 \u6ce8\u610f\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e4b\u540e\u9700\u8981\u628a\u67e5\u8be2\u5230\u7684\u7b54\u6848\u5bf9\u5e94\u7684\u7ed3\u70b9 Splay \u4e0a\u53bb\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002 inline int Find ( int p ) { Access ( p ); Splay ( p ); pushDown ( p ); while ( ls ) p = ls , pushDown ( p ); Splay ( p ); return p ; } \u4e00\u4e9b\u63d0\u9192 \u5e72\u70b9\u5565\u524d\u4e00\u5b9a\u8981\u60f3\u4e00\u60f3\u9700\u4e0d\u9700\u8981 PushUp \u6216\u8005 PushDown \uff0cLCT \u7531\u4e8e\u7279\u522b\u7075\u6d3b\u7684\u539f\u56e0\uff0c\u5c11 Pushdown \u6216\u8005 Pushup \u4e00\u6b21\u5c31\u53ef\u80fd\u628a\u4fee\u6539\u6539\u5230\u4e0d\u8be5\u6539\u7684\u70b9\u4e0a\uff01 LCT \u7684 Rotate \u548c Splay \u7684\u4e0d\u592a\u4e00\u6837\uff0c if (z) \u4e00\u5b9a\u8981\u653e\u5728\u524d\u9762\u3002 LCT \u7684 Splay \u64cd\u4f5c\u5c31\u662f\u65cb\u8f6c\u5230\u6839\uff0c\u6ca1\u6709\u65cb\u8f6c\u5230\u8c01\u513f\u5b50\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u3002 \u7ef4\u62a4\u6811\u94fe\u4fe1\u606f LCT \u901a\u8fc7 Split(x,y) \u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u6811\u4e0a\u4ece\u70b9 \\(x\\) \u5230\u70b9 \\(y\\) \u7684\u8def\u5f84\u63d0\u53d6\u5230\u4ee5 \\(y\\) \u4e3a\u6839\u7684 Splay \u5185\uff0c\u6811\u94fe\u4fe1\u606f\u7684\u4fee\u6539\u548c\u7edf\u8ba1\u8f6c\u5316\u4e3a\u5e73\u8861\u6811\u4e0a\u7684\u64cd\u4f5c\uff0c\u8fd9\u4f7f\u5f97 LCT \u5728\u7ef4\u62a4\u6811\u94fe\u4fe1\u606f\u4e0a\u5177\u6709\u4f18\u52bf\u3002\u6b64\u5916\uff0c\u501f\u52a9 LCT \u5b9e\u73b0\u7684\u5728\u6811\u94fe\u4e0a\u4e8c\u5206\u6bd4\u6811\u94fe\u5256\u5206\u5c11\u4e00\u4e2a \\(O(\\log n)\\) \u7684\u590d\u6742\u5ea6\u3002 \u4f8b\u9898 \u300c\u56fd\u5bb6\u96c6\u8bad\u961f\u300dTree II \u7ed9\u51fa\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u6743\u503c\u4e3a \\(1\\) \u3002 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5747\u4e3a\u4ee5\u4e0b\u56db\u79cd\u4e4b\u4e00\uff1a - u1 v1 u2 v2 \uff1a\u5c06\u6811\u4e0a \\(u_1,v_1\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u5220\u9664\uff0c\u8fde\u63a5 \\(u_2,v_2\\) \u4e24\u70b9\uff0c\u4fdd\u8bc1\u64cd\u4f5c\u5408\u6cd5\u4e14\u8fde\u8fb9\u540e\u4ecd\u662f\u4e00\u68f5\u6811\u3002 + u v c \uff1a\u5c06\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u90fd\u589e\u52a0 \\(c\\) \u3002 * u v c \uff1a\u5c06\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u90fd\u4e58\u4ee5 \\(c\\) \u3002 / u v \uff1a\u8f93\u51fa\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u4e4b\u548c\u5bf9 \\(51061\\) \u53d6\u6a21\u540e\u7684\u503c\u3002 \\(1\\le n,q\\le 10^5,0\\le c\\le 10^4\\) - \u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5 Cut(u1,v1),Link(u2,v2) \u3002 \u5bf9\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5148 Split(u,v) \u3002 \u6b64\u9898\u8981\u6c42\u8fdb\u884c\u5728\u8f85\u52a9\u6811\u4e0a\u7684\u5b50\u6811\u52a0\uff0c\u5b50\u6811\u4e58\uff0c\u5b50\u6811\u6c42\u548c\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9664\u4e86\u4e00\u822c LCT \u9700\u8981\u7ef4\u62a4\u7684\u5b50\u6811\u7ffb\u8f6c\u6807\u8bb0\uff0c\u8fd8\u8981\u7ef4\u62a4\u5b50\u6811\u52a0\u6cd5\u6807\u8bb0\u548c\u5b50\u6811\u4e58\u6cd5\u6807\u8bb0\u3002\u5904\u7406\u6807\u8bb0\u7684\u65b9\u6cd5\u548c\u5728 Splay \u4e0a\u662f\u4e00\u6837\u7684\u3002 \u5728\u6253\u4e0a\u548c\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\u65f6\uff0c\u5b50\u6811\u6743\u503c\u548c\u7684\u53d8\u5316\u91cf\u548c\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u6709\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u5b50\u6811\u7684\u5927\u5c0f siz \u3002 \u5728\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u987a\u5e8f\uff0c\u5148\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\u518d\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\u3002\u5b50\u6811\u7ffb\u8f6c\u548c\u5b50\u6811\u52a0\u4e58\u4e24\u79cd\u6807\u8bb0\u6ca1\u6709\u51b2\u7a81\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; #define int long long const int maxn = 100010 ; const int mod = 51061 ; int n , q , u , v , c ; char op ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], siz [ maxn ], val [ maxn ], sum [ maxn ], rev [ maxn ], add [ maxn ], mul [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = siz [ x ] = val [ x ] = sum [ x ] = rev [ x ] = add [ x ] = 0 ; mul [ x ] = 1 ; } int getch ( int x ) { return ( ch [ fa [ x ]][ 1 ] == x ); } int isroot ( int x ) { clear ( 0 ); return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); siz [ x ] = ( siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]]) % mod ; sum [ x ] = ( sum [ ch [ x ][ 0 ]] + val [ x ] + sum [ ch [ x ][ 1 ]]) % mod ; } void pushdown ( int x ) { clear ( 0 ); if ( mul [ x ] != 1 ) { if ( ch [ x ][ 0 ]) mul [ ch [ x ][ 0 ]] = ( mul [ x ] * mul [ ch [ x ][ 0 ]]) % mod , val [ ch [ x ][ 0 ]] = ( val [ ch [ x ][ 0 ]] * mul [ x ]) % mod , sum [ ch [ x ][ 0 ]] = ( sum [ ch [ x ][ 0 ]] * mul [ x ]) % mod , add [ ch [ x ][ 0 ]] = ( add [ ch [ x ][ 0 ]] * mul [ x ]) % mod ; if ( ch [ x ][ 1 ]) mul [ ch [ x ][ 1 ]] = ( mul [ x ] * mul [ ch [ x ][ 1 ]]) % mod , val [ ch [ x ][ 1 ]] = ( val [ ch [ x ][ 1 ]] * mul [ x ]) % mod , sum [ ch [ x ][ 1 ]] = ( sum [ ch [ x ][ 1 ]] * mul [ x ]) % mod , add [ ch [ x ][ 1 ]] = ( add [ ch [ x ][ 1 ]] * mul [ x ]) % mod ; mul [ x ] = 1 ; } if ( add [ x ]) { if ( ch [ x ][ 0 ]) add [ ch [ x ][ 0 ]] = ( add [ ch [ x ][ 0 ]] + add [ x ]) % mod , val [ ch [ x ][ 0 ]] = ( val [ ch [ x ][ 0 ]] + add [ x ]) % mod , sum [ ch [ x ][ 0 ]] = ( sum [ ch [ x ][ 0 ]] + add [ x ] * siz [ ch [ x ][ 0 ]] % mod ) % mod ; if ( ch [ x ][ 1 ]) add [ ch [ x ][ 1 ]] = ( add [ ch [ x ][ 1 ]] + add [ x ]) % mod , val [ ch [ x ][ 1 ]] = ( val [ ch [ x ][ 1 ]] + add [ x ]) % mod , sum [ ch [ x ][ 1 ]] = ( sum [ ch [ x ][ 1 ]] + add [ x ] * siz [ ch [ x ][ 1 ]] % mod ) % mod ; add [ x ] = 0 ; } if ( rev [ x ]) { if ( ch [ x ][ 0 ]) rev [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) rev [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); rev [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%lld \" , x ); print ( ch [ x ][ 1 ]); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); rev [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; main () { scanf ( \"%lld%lld\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) st . val [ i ] = 1 , st . maintain ( i ); for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%lld%lld\" , & u , & v ); if ( st . find ( u ) != st . find ( v )) st . makeroot ( u ), st . fa [ u ] = v ; } while ( q -- ) { scanf ( \" %c%lld%lld\" , & op , & u , & v ); if ( op == '+' ) { scanf ( \"%lld\" , & c ); st . makeroot ( u ), st . access ( v ), st . splay ( v ); st . val [ v ] = ( st . val [ v ] + c ) % mod ; st . sum [ v ] = ( st . sum [ v ] + st . siz [ v ] * c % mod ) % mod ; st . add [ v ] = ( st . add [ v ] + c ) % mod ; } if ( op == '-' ) { st . makeroot ( u ); st . access ( v ); st . splay ( v ); if ( st . ch [ v ][ 0 ] == u && ! st . ch [ u ][ 1 ]) st . ch [ v ][ 0 ] = st . fa [ u ] = 0 ; scanf ( \"%lld%lld\" , & u , & v ); if ( st . find ( u ) != st . find ( v )) st . makeroot ( u ), st . fa [ u ] = v ; } if ( op == '*' ) { scanf ( \"%lld\" , & c ); st . makeroot ( u ), st . access ( v ), st . splay ( v ); st . val [ v ] = st . val [ v ] * c % mod ; st . sum [ v ] = st . sum [ v ] * c % mod ; st . mul [ v ] = st . mul [ v ] * c % mod ; } if ( op == '/' ) st . makeroot ( u ), st . access ( v ), st . splay ( v ), printf ( \"%lld \\n \" , st . sum [ v ]); } return 0 ; } \u7ef4\u62a4\u8fde\u901a\u6027\u8d28 \u5224\u65ad\u662f\u5426\u8fde\u901a \u501f\u52a9 LCT \u7684 Find() \u51fd\u6570\uff0c\u53ef\u4ee5\u5224\u65ad\u52a8\u6001\u68ee\u6797\u4e0a\u7684\u4e24\u70b9\u662f\u5426\u8fde\u901a\u3002\u5982\u679c\u6709 Find(x)==Find(y) \uff0c\u5219\u8bf4\u660e \\(x,y\\) \u4e24\u70b9\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u76f8\u4e92\u8fde\u901a\u3002 \u4f8b\u9898 \u300cSDOI2008\u300d\u6d1e\u7a74\u52d8\u6d4b \u4e00\u5f00\u59cb\u6709 \\(n\\) \u4e2a\u72ec\u7acb\u7684\u70b9\uff0c \\(m\\) \u6b21\u64cd\u4f5c\u3002\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e4b\u4e00\uff1a Connect u v \uff1a\u5728 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 Destroy u v \uff1a\u5220\u9664\u5728 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u4fdd\u8bc1\u4e4b\u524d\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8fb9\u3002 Query u v \uff1a\u8be2\u95ee \\(u,v\\) \u4e24\u70b9\u662f\u5426\u8fde\u901a\u3002 \u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\u56fe\u7684\u5f62\u6001\u90fd\u662f\u4e00\u4e2a\u68ee\u6797\u3002 \\(n\\le 10^4, m\\le 2\\times 10^5\\) \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 10010 ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]), tag [ ch [ x ][ 0 ]] ^= 1 ; if ( ch [ x ][ 1 ]) swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]), tag [ ch [ x ][ 1 ]] ^= 1 ; tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f ; } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); tag [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; int n , q , x , y ; char op [ maxn ]; int main () { scanf ( \"%d%d\" , & n , & q ); while ( q -- ) { scanf ( \"%s%d%d\" , op , & x , & y ); if ( op [ 0 ] == 'Q' ) { if ( st . find ( x ) == st . find ( y )) printf ( \"Yes \\n \" ); else printf ( \"No \\n \" ); } if ( op [ 0 ] == 'C' ) if ( st . find ( x ) != st . find ( y )) st . makeroot ( x ), st . fa [ x ] = y ; if ( op [ 0 ] == 'D' ) { st . makeroot ( x ); st . access ( y ); st . splay ( y ); if ( st . ch [ y ][ 0 ] == x && ! st . ch [ x ][ 1 ]) st . ch [ y ][ 0 ] = st . fa [ x ] = 0 ; } } return 0 ; } \u7ef4\u62a4\u8fb9\u53cc\u8fde\u901a\u5206\u91cf \u5982\u679c\u8981\u6c42\u5c06\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\uff0c\u6bcf\u6b21\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u6240\u8fde\u63a5\u7684\u6811\u4e0a\u7684\u4e24\u70b9\u5982\u679c\u76f8\u4e92\u8fde\u901a\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u7f29\u6210\u4e00\u4e2a\u70b9\u3002 \u4f8b\u9898 \u300cAHOI2005\u300d\u822a\u7ebf\u89c4\u5212 \u7ed9\u51fa \\(n\\) \u4e2a\u70b9\uff0c\u521d\u59cb\u65f6\u6709 \\(m\\) \u6761\u65e0\u5411\u8fb9\uff0c \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e4b\u4e00\uff1a 0 u v \uff1a\u5220\u9664 \\(u,v\\) \u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u4fdd\u8bc1\u6b64\u65f6\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8fb9\u3002 1 u v \uff1a\u67e5\u8be2\u6b64\u65f6 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u53ef\u80fd\u7684\u6240\u6709\u8def\u5f84\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u3002 \u4fdd\u8bc1\u56fe\u5728\u4efb\u610f\u65f6\u523b\u90fd\u8fde\u901a\u3002 \\(1<n<3\\times 10^4,1<m<10^5,0\\le q\\le 4\\times 10^4\\) \u53ef\u4ee5\u53d1\u73b0\uff0c \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u4e3a\u5c06\u6240\u6709\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\u4e4b\u540e \\(u\\) \u6240\u5728\u70b9\u548c \\(v\\) \u6240\u5728\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9\u6570 \\(-1\\) \u3002 \u7531\u4e8e\u9898\u76ee\u4e2d\u7684\u5220\u8fb9\u64cd\u4f5c\u4e0d\u597d\u8fdb\u884c\uff0c\u6211\u4eec\u8003\u8651\u79bb\u7ebf\u9006\u5411\u8fdb\u884c\u64cd\u4f5c\uff0c\u6539\u5220\u8fb9\u4e3a\u52a0\u8fb9\u3002 \u52a0\u5165\u4e00\u6761\u8fb9\u65f6\uff0c\u5982\u679c\u4e24\u70b9\u539f\u6765\u4e0d\u8fde\u901a\uff0c\u5219\u5728 LCT \u4e0a\u8fde\u63a5\u4e24\u70b9\uff1b\u5426\u5219\u63d0\u53d6\u51fa\u52a0\u8fd9\u6761\u8fb9\u4e4b\u524d LCT \u4e0a\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u904d\u5386\u8f85\u52a9\u6811\u4e0a\u7684\u8fd9\u4e2a\u5b50\u6811\uff0c\u76f8\u5f53\u4e8e\u904d\u5386\u4e86\u8fd9\u6761\u8def\u5f84\uff0c\u5c06\u8fd9\u4e9b\u70b9\u5408\u5e76\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5408\u5e76\u7684\u4fe1\u606f\u3002 \u7528\u5408\u5e76\u540e\u5e76\u67e5\u96c6\u7684\u4ee3\u8868\u5143\u7d20\u4ee3\u66ff\u539f\u6765\u6811\u4e0a\u7684\u8def\u5f84\u3002\u6ce8\u610f\u4e4b\u540e\u7684\u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u627e\u5230\u64cd\u4f5c\u70b9\u5728\u5e76\u67e5\u96c6\u4e0a\u7684\u4ee3\u8868\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> #include <map> using namespace std ; const int maxn = 200010 ; int f [ maxn ]; int findp ( int x ) { return f [ x ] ? f [ x ] = findp ( f [ x ]) : x ; } void merge ( int x , int y ) { x = findp ( x ); y = findp ( y ); if ( x != y ) f [ x ] = y ; } struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ], siz [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = siz [ x ] = 0 ; } int getch ( int x ) { return ch [ findp ( fa [ x ])][ 1 ] == x ; } int isroot ( int x ) { return ch [ findp ( fa [ x ])][ 0 ] != x && ch [ findp ( fa [ x ])][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]]; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) tag [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) tag [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); tag [ x ] = 0 ; } } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%d \" , x ); print ( ch [ x ][ 1 ]); } void update ( int x ) { if ( ! isroot ( x )) update ( findp ( fa [ x ])); pushdown ( x ); } void rotate ( int x ) { x = findp ( x ); int y = findp ( fa [ x ]), z = findp ( fa [ y ]), chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); if ( z ) maintain ( z ); } void splay ( int x ) { x = findp ( x ); update ( x ); for ( int f = findp ( fa [ x ]); f = findp ( fa [ x ]), ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = findp ( fa [ x ])) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { x = findp ( x ); access ( x ); splay ( x ); tag [ x ] ^= 1 ; swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); } int find ( int x ) { x = findp ( x ); access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } void dfs ( int x ) { pushdown ( x ); if ( ch [ x ][ 0 ]) dfs ( ch [ x ][ 0 ]), merge ( ch [ x ][ 0 ], x ); if ( ch [ x ][ 1 ]) dfs ( ch [ x ][ 1 ]), merge ( ch [ x ][ 1 ], x ); } } st ; int n , m , q , x , y , cur , ans [ maxn ]; struct oper { int op , a , b ; } s [ maxn ]; map < pair < int , int > , int > mp ; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) st . maintain ( i ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d\" , & x , & y ), mp [{ x , y }] = mp [{ y , x }] = 1 ; while ( scanf ( \"%d\" , & s [ ++ q ]. op )) { if ( s [ q ]. op == -1 ) { q -- ; break ; } scanf ( \"%d%d\" , & s [ q ]. a , & s [ q ]. b ); if ( ! s [ q ]. op ) mp [{ s [ q ]. a , s [ q ]. b }] = mp [{ s [ q ]. b , s [ q ]. a }] = 0 ; } reverse ( s + 1 , s + q + 1 ); for ( map < pair < int , int > , int >:: iterator it = mp . begin (); it != mp . end (); it ++ ) if ( it -> second ) { mp [{ it -> first . second , it -> first . first }] = 0 ; x = findp ( it -> first . first ); y = findp ( it -> first . second ); if ( st . find ( x ) != st . find ( y )) st . makeroot ( x ), st . fa [ x ] = y ; else { if ( x == y ) continue ; st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . dfs ( y ); int t = findp ( y ); st . fa [ t ] = findp ( st . fa [ y ]); st . ch [ t ][ 0 ] = st . ch [ t ][ 1 ] = 0 ; st . maintain ( t ); } } for ( int i = 1 ; i <= q ; i ++ ) { if ( s [ i ]. op == 0 ) { x = findp ( s [ i ]. a ); y = findp ( s [ i ]. b ); st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . dfs ( y ); int t = findp ( y ); st . fa [ t ] = st . fa [ y ]; st . ch [ t ][ 0 ] = st . ch [ t ][ 1 ] = 0 ; st . maintain ( t ); } if ( s [ i ]. op == 1 ) { x = findp ( s [ i ]. a ); y = findp ( s [ i ]. b ); st . makeroot ( x ); st . access ( y ); st . splay ( y ); ans [ ++ cur ] = st . siz [ y ] - 1 ; } } for ( int i = cur ; i >= 1 ; i -- ) printf ( \"%d \\n \" , ans [ i ]); return 0 ; } \u7ef4\u62a4\u8fb9\u6743 LCT \u5e76\u4e0d\u80fd\u76f4\u63a5\u5904\u7406\u8fb9\u6743\uff0c\u6b64\u65f6\u9700\u8981\u5bf9\u6bcf\u6761\u8fb9\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u70b9\uff0c\u65b9\u4fbf\u67e5\u8be2\u94fe\u4e0a\u7684\u8fb9\u4fe1\u606f\u3002\u5229\u7528\u8fd9\u4e00\u6280\u5de7\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u751f\u6210\u6811\u3002 \u4f8b\u9898 luogu P4234 \u6700\u5c0f\u5dee\u503c\u751f\u6210\u6811 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5176\u8fb9\u6743\u6700\u5927\u503c\u548c\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u5dee\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5dee\u503c\u3002 \u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u68f5\u751f\u6210\u6811\u3002 \\(1\\le n\\le 5\\times 10^4,1\\le m\\le 2\\times 10^5,1\\le w_i\\le 10^4\\) \u5c06\u8fb9\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u679a\u4e3e\u9009\u62e9\u7684\u6700\u53f3\u8fb9\u7684\u4e00\u6761\u8fb9\uff0c\u8981\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u9700\u8981\u4f7f\u8fb9\u6743\u6700\u5c0f\u8fb9\u7684\u8fb9\u6743\u6700\u5927\u3002 \u6bcf\u6b21\u6309\u7167\u987a\u5e8f\u6dfb\u52a0\u8fb9\uff0c\u5982\u679c\u5c06\u8981\u8fde\u63a5\u7684\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u5220\u9664\u8fd9\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u3002\u5982\u679c\u6574\u4e2a\u56fe\u5df2\u7ecf\u8fde\u901a\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u5219\u7528\u5f53\u524d\u8fb9\u6743\u51cf\u53bb\u6700\u5c0f\u8fb9\u6743\u66f4\u65b0\u7b54\u6848\u3002\u6700\u5c0f\u8fb9\u6743\u53ef\u7528\u53cc\u6307\u9488\u6cd5\u66f4\u65b0\u3002 LCT \u4e0a\u6ca1\u6709\u56fa\u5b9a\u7684\u7236\u5b50\u5173\u7cfb\uff0c\u6240\u4ee5\u4e0d\u80fd\u5c06\u8fb9\u6743\u8bb0\u5f55\u5728\u70b9\u6743\u4e2d\u3002 \u8bb0\u5f55\u6811\u94fe\u4e0a\u7684\u8fb9\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u62c6\u8fb9 \u3002\u5bf9\u6bcf\u6761\u8fb9\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\uff0c\u4ece\u8fd9\u6761\u8fb9\u5411\u5176\u4e24\u4e2a\u7aef\u70b9\u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u539f\u5148\u7684\u8fde\u8fb9\u4e0e\u5220\u8fb9\u64cd\u4f5c\u90fd\u53d8\u6210\u4e24\u6b21\u64cd\u4f5c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> #include <set> using namespace std ; const int maxn = 5000010 ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ], val [ maxn ], minn [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = val [ x ] = minn [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { if ( ! x ) return ; minn [ x ] = x ; if ( ch [ x ][ 0 ]) { if ( val [ minn [ ch [ x ][ 0 ]]] < val [ minn [ x ]]) minn [ x ] = minn [ ch [ x ][ 0 ]]; } if ( ch [ x ][ 1 ]) { if ( val [ minn [ ch [ x ][ 1 ]]] < val [ minn [ x ]]) minn [ x ] = minn [ ch [ x ][ 1 ]]; } } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) tag [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) tag [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%d \" , x ); print ( ch [ x ][ 1 ]); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); if ( z ) maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); tag [ x ] ^= 1 ; swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } void link ( int x , int y ) { makeroot ( x ); fa [ x ] = y ; } void cut ( int x , int y ) { makeroot ( x ); access ( y ); splay ( y ); ch [ y ][ 0 ] = fa [ x ] = 0 ; maintain ( y ); } } st ; const int inf = 2e9 + 1 ; int n , m , ans , nww , x , y ; struct Edge { int u , v , w ; bool operator < ( Edge x ) const { return w < x . w ; }; } s [ maxn ]; multiset < int > mp ; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) st . val [ i ] = inf , st . maintain ( i ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d%d\" , & s [ i ]. u , & s [ i ]. v , & s [ i ]. w ); sort ( s + 1 , s + m + 1 ); for ( int i = 1 ; i <= m ; i ++ ) st . val [ n + i ] = s [ i ]. w , st . maintain ( n + i ); for ( int i = 1 ; i <= m ; i ++ ) { x = s [ i ]. u ; y = s [ i ]. v ; if ( x == y ) continue ; if ( st . find ( x ) != st . find ( y )) { nww ++ ; st . link ( x , n + i ); st . link ( n + i , y ); mp . insert ( s [ i ]. w ); if ( nww == n - 1 ) ans = s [ i ]. w - ( * ( mp . begin () ++ )); } else { st . makeroot ( x ); st . access ( y ); st . splay ( y ); int t = st . minn [ y ] - n ; st . cut ( s [ t ]. u , t + n ); st . cut ( t + n , s [ t ]. v ); mp . erase ( mp . find ( s [ t ]. w )); st . link ( x , n + i ); st . link ( n + i , y ); mp . insert ( s [ i ]. w ); if ( nww == n - 1 ) ans = min ( ans , s [ i ]. w - ( * ( mp . begin () ++ ))); } } printf ( \"%d \\n \" , ans ); return 0 ; } \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f LCT \u4e0d\u64c5\u957f\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\u7edf\u8ba1\u4e00\u4e2a\u7ed3\u70b9\u6240\u6709\u865a\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u6c42\u5f97\u6574\u68f5\u6811\u7684\u4fe1\u606f\u3002 \u4f8b\u9898 \u300cBJOI2014\u300d\u5927\u878d\u5408 \u7ed9\u5b9a \\(n\\) \u4e2a\u7ed3\u70b9\u548c \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a A x y \u5728\u7ed3\u70b9 \\(x\\) \u548c \\(y\\) \u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 Q x y \u7ed9\u5b9a\u4e00\u6761\u5df2\u7ecf\u5b58\u5728\u7684\u8fb9 \\((x,y)\\) \uff0c\u6c42\u6709\u591a\u5c11\u6761\u7b80\u5355\u8def\u5f84\uff0c\u5176\u4e2d\u5305\u542b\u8fb9 \\((x,y)\\) \u3002 \u4fdd\u8bc1\u5728\u4efb\u610f\u65f6\u523b\uff0c\u56fe\u7684\u5f62\u6001\u90fd\u662f\u4e00\u68f5\u68ee\u6797\u3002 \\(1\\le n,q,x,y\\le 10^5\\) \u4e3a\u8be2\u95ee Q \u8003\u8651\u53e6\u4e00\u79cd\u8868\u8ff0\uff0c\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u7b49\u4e8e\u8fb9 \\((x,y)\\) \u5728 \\(x\\) \u4fa7\u7684\u7ed3\u70b9\u6570\u4e0e \\(y\\) \u4fa7\u7684\u7ed3\u70b9\u6570\u7684\u4e58\u79ef\uff0c\u5373\u5c06\u8fb9 \\((x,y)\\) \u65ad\u5f00\u540e\u5206\u522b\u5305\u542b \\(x\\) \u548c \\(y\\) \u7684\u6811\u7684\u7ed3\u70b9\u6570\u3002\u4e3a\u4e86\u6d88\u9664\u65ad\u8fb9\u7684\u5f71\u54cd\uff0c\u5728\u8be2\u95ee\u540e\u6211\u4eec\u518d\u6b21\u8fde\u63a5\u8fb9 \\((x,y)\\) \u3002 \u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u65e2\u6709\u8fde\u8fb9\uff0c\u53c8\u6709\u5220\u8fb9\uff0c\u8fd8\u4fdd\u8bc1\u5728\u4efb\u610f\u65f6\u523b\u90fd\u662f\u4e00\u68f5\u68ee\u6797\uff0c\u6211\u4eec\u4e0d\u7531\u5f97\u60f3\u5230\u7528 LCT \u6765\u7ef4\u62a4\u3002\u4f46\u662f\u8fd9\u9898\u4e2d LCT \u7ef4\u62a4\u7684\u662f\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u4e0d\u50cf\u6211\u4eec\u5370\u8c61\u4e2d\u7684\u7ef4\u62a4\u4e00\u6761\u94fe\u7684\u4fe1\u606f\uff0c\u800c LCT \u7684\u6784\u9020 \u8ba4\u7236\u4e0d\u8ba4\u5b50 \uff0c\u4e0d\u65b9\u4fbf\u6211\u4eec\u76f4\u63a5\u8fdb\u884c\u5b50\u6811\u7684\u7edf\u8ba1\u3002\u600e\u4e48\u529e\u5462\uff1f \u65b9\u6cd5\u662f\u7edf\u8ba1\u4e00\u4e2a\u7ed3\u70b9 \\(x\\) \u6240\u6709\u865a\u513f\u5b50\uff08\u5373\u7236\u4eb2\u4e3a \\(x\\) \uff0c\u4f46 \\(x\\) \u5728 Splay \u4e2d\u7684\u5de6\u53f3\u513f\u5b50\u5e76\u4e0d\u5305\u542b\u5b83\uff09\u6240\u4ee3\u8868\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002 \u5b9a\u4e49 \\(siz2[x]\\) \u4e3a\u7ed3\u70b9 \\(x\\) \u7684\u6240\u6709\u865a\u513f\u5b50\u4ee3\u8868\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u6570\uff0c \\(siz[x]\\) \u4e3a \u7ed3\u70b9 \\(x\\) \u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u3002 \u4e0d\u540c\u4e8e\u4ee5\u5f80\u6211\u4eec\u7ef4\u62a4 Splay \u4e2d\u5b50\u6811\u7ed3\u70b9\u4e2a\u6570\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5728\u8ba1\u7b97\u7ed3\u70b9 \\(x\\) \u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u65f6\uff0c\u8fd8\u8981\u52a0\u4e0a \\(siz2[x]\\) \uff0c\u5373 void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]] + siz2 [ x ]; } \u800c\u4e14\u5728\u6211\u4eec \u6539\u53d8 Splay \u7684\u5f62\u6001 \uff08\u5373\u6539\u53d8\u4e00\u4e2a\u7ed3\u70b9\u5728 Splay \u4e0a\u7684\u5de6\u53f3\u513f\u5b50\u6307\u5411\u65f6\uff09\uff0c\u9700\u8981\u53ca\u65f6\u4fee\u6539 \\(siz2[x]\\) \u7684\u503c\u3002 \u5728 Rotate(),Splay() \u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u90fd\u53ea\u662f\u6539\u53d8\u4e86 Splay \u4e2d\u7ed3\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6ca1\u6709\u6539\u53d8\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u865a\u5b9e\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u5bf9 \\(siz2[x]\\) \u8fdb\u884c\u4efb\u4f55\u4fee\u6539\u3002 \u5728 access \u64cd\u4f5c\u4e2d\uff0c\u5728\u6bcf\u6b21 splay \u5b8c\u540e\uff0c\u90fd\u4f1a\u6539\u53d8\u521a\u521a splay \u5b8c\u7684\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u5373\u8be5\u7ed3\u70b9\u4e0e\u5176\u539f\u53f3\u513f\u5b50\u7684\u8fde\u8fb9\u548c\u8be5\u8282\u70b9\u548c\u65b0\u53f3\u513f\u5b50\u7684\u8fde\u8fb9\u7684\u865a\u5b9e\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6211\u4eec\u9700\u8981\u52a0\u4e0a\u65b0\u53d8\u6210\u865a\u8fb9\u6240\u8fde\u7684\u5b50\u6811\u7684\u8d21\u732e\uff0c\u51cf\u53bb\u521a\u521a\u53d8\u6210\u5b9e\u8fb9\u6240\u8fde\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002\u4ee3\u7801\u5982\u4e0b\uff1a void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), siz2 [ x ] += siz [ ch [ x ][ 1 ]] - siz [ f ], ch [ x ][ 1 ] = f , maintain ( x ); } \u5728 MakeRoot(),Find() \u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u90fd\u53ea\u662f\u8c03\u7528\u4e86\u4e4b\u524d\u7684\u51fd\u6570\u6216\u8005\u5728 Splay \u4e0a\u6761\u8fb9\uff0c\u5e76\u4e0d\u7528\u505a\u4efb\u4f55\u4fee\u6539\u3002 \u5728\u8fde\u63a5\u4e24\u70b9\u65f6\uff0c\u6211\u4eec\u4fee\u6539\u4e86\u4e00\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\u3002\u6211\u4eec\u9700\u8981\u5728\u7236\u4eb2\u7ed3\u70b9\u7684 \\(siz2\\) \u503c\u4e2d\u52a0\u4e0a\u65b0\u5b50\u7ed3\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u8d21\u732e\u3002 st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; \u5728\u65ad\u5f00\u4e00\u6761\u8fb9\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u5220\u9664\u4e86 Splay \u4e0a\u7684\u4e00\u6761\u5b9e\u8fb9\uff0c Maintain \u64cd\u4f5c\u4f1a\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\u3002 \u4ee3\u7801\u4fee\u6539\u7684\u7ec6\u8282\u8bb2\u5b8c\u4e86\uff0c\u603b\u7ed3\u4e00\u4e0b LCT \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u8981\u6c42\u4e0e\u65b9\u6cd5\uff1a \u7ef4\u62a4\u7684\u4fe1\u606f\u8981\u6709 \u53ef\u51cf\u6027 \uff0c\u5982\u5b50\u6811\u7ed3\u70b9\u6570\uff0c\u5b50\u6811\u6743\u503c\u548c\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\u5b50\u6811\u6700\u5927\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u5728\u5c06\u4e00\u6761\u865a\u8fb9\u53d8\u6210\u5b9e\u8fb9\u65f6\u8981\u6392\u9664\u539f\u5148\u865a\u8fb9\u7684\u8d21\u732e\u3002 \u65b0\u5efa\u4e00\u4e2a\u9644\u52a0\u503c\u5b58\u50a8\u865a\u5b50\u6811\u7684\u8d21\u732e\uff0c\u5728\u7edf\u8ba1\u65f6\u5c06\u5176\u52a0\u5165\u672c\u7ed3\u70b9\u7b54\u6848\uff0c\u5728\u6539\u53d8\u8fb9\u7684\u865a\u5b9e\u65f6\u53ca\u65f6\u7ef4\u62a4\u3002 \u5176\u4f59\u90e8\u5206\u540c\u666e\u901a LCT\uff0c\u5728\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u65f6\u4e00\u5b9a\u5c06\u5176\u4f5c\u4e3a\u6839\u8282\u70b9\u3002 \u5982\u679c\u7ef4\u62a4\u7684\u4fe1\u606f\u6ca1\u6709\u53ef\u51cf\u6027\uff0c\u5982\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u7ed3\u70b9\u7684\u865a\u5b50\u6811\u4e2d\u7684\u6700\u503c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 100010 ; typedef long long ll ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], siz [ maxn ], siz2 [ maxn ], tag [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = siz [ x ] = siz2 [ x ] = tag [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]] + siz2 [ x ]; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]), tag [ ch [ x ][ 0 ]] ^= 1 ; if ( ch [ x ][ 1 ]) swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]), tag [ ch [ x ][ 1 ]] ^= 1 ; tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), siz2 [ x ] += siz [ ch [ x ][ 1 ]] - siz [ f ], ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); tag [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; int n , q , x , y ; char op ; int main () { scanf ( \"%d%d\" , & n , & q ); while ( q -- ) { scanf ( \" %c%d%d\" , & op , & x , & y ); if ( op == 'A' ) { st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; } if ( op == 'Q' ) { st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . ch [ y ][ 0 ] = st . fa [ x ] = 0 ; st . maintain ( x ); st . makeroot ( x ); st . makeroot ( y ); printf ( \"%lld \\n \" , ( ll )( st . siz [ x ] * st . siz [ y ])); st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; } } return 0 ; }","title":"Link Cut Tree"},{"location":"knowledge/ds/lct/#link-cut-tree","text":"\u672c\u7bc7\u5728 OI Wiki \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u90e8\u5206\u4fee\u6539\u3002","title":"Link Cut Tree"},{"location":"knowledge/ds/lct/#_1","text":"Link/Cut Tree \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u7528\u5b83\u6765\u89e3\u51b3 \u52a8\u6001\u6811\u95ee\u9898 \u3002 Link/Cut Tree \u53c8\u79f0 Link-Cut Tree\uff0c\u7b80\u79f0 LCT\uff0c\u4f46\u5b83\u4e0d\u53eb\u52a8\u6001\u6811\uff0c\u52a8\u6001\u6811\u662f\u6307\u4e00\u7c7b\u95ee\u9898\u3002 Splay Tree \u662f LCT \u7684\u57fa\u7840\uff0c\u4f46\u662f LCT \u7528\u7684 Splay Tree \u548c\u666e\u901a\u7684 Splay \u5728\u7ec6\u8282\u5904\u4e0d\u592a\u4e00\u6837\uff08\u8fdb\u884c\u4e86\u4e00\u4e9b\u6269\u5c55\uff09\u3002","title":"\u7b80\u4ecb"},{"location":"knowledge/ds/lct/#_2","text":"\u7ef4\u62a4\u4e00\u68f5\u6811\uff0c\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a \u4fee\u6539\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u3002 \u67e5\u8be2\u4e24\u70b9\u95f4\u8def\u5f84\u6743\u503c\u548c\u3002 \u4fee\u6539\u67d0\u70b9\u5b50\u6811\u6743\u503c\u3002 \u67e5\u8be2\u67d0\u70b9\u5b50\u6811\u6743\u503c\u548c\u3002 \u65ad\u5f00\u5e76\u8fde\u63a5\u4e00\u4e9b\u8fb9\uff0c\u4fdd\u8bc1\u4ecd\u662f\u4e00\u68f5\u6811 \u3002 \u8981\u6c42 \u5728\u7ebf \u6c42\u51fa\u4e0a\u9762\u7684\u7b54\u6848\u3002 \u53ef\u4ee5\u770b\u51fa\u8fd9\u68f5\u6811\u662f \u52a8\u6001 \u7684\uff0c\u65e0\u6cd5\u7528\u6811\u94fe\u5256\u5206\u89e3\u51b3\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u4f7f\u7528\u6811\u94fe\u5256\u5206\uff1f \u6811\u94fe\u5256\u5206\u7684\u505a\u6cd5\u662f\uff0c\u5bf9\u6574\u68f5\u5b50\u6811\u6309\u7167 \u5927\u5c0f \u8fdb\u884c\u5256\u5206\uff0c\u5e76\u91cd\u65b0\u6807\u53f7\uff1b\u5728\u6807\u53f7\u540e\uff0c\u5728\u6811\u4e0a\u5f62\u6210\u4e86\u4e00\u4e9b\u4ee5\u94fe\u4e3a\u5355\u4f4d\u7684 \u6807\u53f7\u8fde\u7eed \u7684\u533a\u95f4\uff0c\u4ece\u800c\u53ef\u4ee5\u5229\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u52a8\u6001\u6811\uff0c\u5728\u8fc7\u7a0b\u4e2d\u4ed6\u4f1a\u65ad\u8fb9\u8fde\u8fb9\uff0c\u9996\u5148\u65e0\u6cd5\u4fdd\u8bc1\u59cb\u7ec8\u6309\u7167\u5b50\u6811\u5927\u5c0f\u8fdb\u884c\u5256\u5206\uff0c\u5176\u6b21\u65e0\u6cd5\u4fdd\u8bc1\u5728\u4e00\u6761\u94fe\u4e0a\u7684\u533a\u95f4\u6807\u53f7\u8fde\u7eed\uff0c\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u64cd\u4f5c\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u662f\u79bb\u7ebf\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e00\u5b9a\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002","title":"\u52a8\u6001\u6811\u95ee\u9898"},{"location":"knowledge/ds/lct/#_3","text":"\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u8fde\u5411\u5b83\u6240\u6709\u513f\u5b50\u7684\u8fb9\uff0c\u6211\u4eec \u81ea\u5df1\u9009\u62e9\u4e00\u6761\u8fb9\u8fdb\u884c\u5256\u5206 \uff0c\u6211\u4eec\u79f0\u88ab\u9009\u62e9\u7684\u8fb9\u4e3a\u5b9e\u8fb9\uff0c\u5176\u4ed6\u8fb9\u5219\u4e3a\u865a\u8fb9\u3002\u5bf9\u4e8e\u5b9e\u8fb9\uff0c\u6211\u4eec\u79f0\u5b83\u6240\u8fde\u63a5\u7684\u513f\u5b50\u4e3a\u5b9e\u513f\u5b50\u3002\u5bf9\u4e8e\u4e00\u6761\u7531\u5b9e\u8fb9\u7ec4\u6210\u7684\u94fe\uff0c\u6211\u4eec\u540c\u6837\u79f0\u4e4b\u4e3a\u5b9e\u94fe\u3002 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5173\u4e8e\u5b9e\u94fe\u5256\u5206\u540e\u7684\u51e0\u4e2a\u7ed3\u8bba\uff1a 1. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u7684\u6df1\u5ea6\u4e92\u4e0d\u76f8\u540c\u3002 \u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u5982\u679c\u5728\u4e00\u6761\u5b9e\u94fe\u4e2d\u5b58\u5728\u6df1\u5ea6\u76f8\u540c\u7684\u4e24\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u8be5\u4e24\u4e2a\u7ed3\u70b9\u7684 LCA \u5fc5\u7136\u5b58\u5728\u81f3\u5c11 2 \u6761\u5b9e\u8fb9\uff0c\u4e0e\u5b9a\u4e49\u4e0d\u7b26\u3002 2. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u7684\u6df1\u5ea6\u662f\u8fde\u7eed\u7684\uff0c\u4e0d\u5b58\u5728\u6df1\u5ea6\u201c\u65ad\u5c42\u201d\u3002 3. \u4e00\u6761\u5b9e\u94fe\u4e2d\u7ed3\u70b9\u6700\u591a\u6709\u4e00\u4e2a\u5b9e\u513f\u5b50\uff0c\u5373\u5b9e\u94fe\u53ea\u80fd\u662f\u201c\u94fe\u201d\u7ed3\u6784\u3002 4. \u5982\u679c\u77e5\u9053\u4e86\u4e00\u68f5\u6811\u4e2d\u7684\u6240\u6709\u5b9e\u94fe\uff08\u5bf9\u5e94\u6240\u6709\u5b9e\u8fb9\uff09\u4e0e\u6bcf\u6761\u94fe\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u5bf9\u5e94\u7684\u7236\u8282\u70b9\uff08\u5bf9\u5e94\u6240\u6709\u865a\u8fb9\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u6811\u3002 \u8be5\u6027\u8d28\u53ef\u4ee5\u63a8\u5bfc\uff0c\u5982\u679c\u77e5\u9053\u4e86\u6240\u6709\u7684\u5b9e\u8fb9\u4e0e\u865a\u8fb9\uff0c\u68ee\u6797\u4e5f\u662f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u7684\u3002","title":"\u5b9e\u94fe\u5256\u5206"},{"location":"knowledge/ds/lct/#lct","text":"\u5728\u5b9e\u94fe\u5256\u5206\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u68f5\u6811\uff0c\u79f0\u5176\u4e3a \u539f\u6811 \u3002\u76f4\u63a5\u5728\u539f\u6811\u4e0a\u64cd\u4f5c\u5f88\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u5728\u80fd\u552f\u4e00\u786e\u5b9a\u539f\u6811\u7684 \u8f85\u52a9\u6811 \u4e0a\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\u3002 \u8f85\u52a9\u6811\uff08\u5176\u5b9e\u662f\u68ee\u6797\uff09\u7531\u5f88\u591a Splay \u6811\u7ec4\u6210\u3002\u6bcf\u4e00\u4e2a\u8f85\u52a9\u6811\u4e2d\u7684 Splay \u6811\u5bf9\u5e94\u539f\u6811\u4e2d\u7684\u4e00\u6761\u5b9e\u94fe\uff1b\u8f85\u52a9\u6811\u4e2d\u7684\u6240\u6709\u7684 Splay \u6811\u548c\u4e0d\u540c Splay \u6811\u95f4\u7684\u5173\u7cfb\uff08\u5bf9\u5e94\u865a\u8fb9\uff09\u5bf9\u5e94\u539f\u6811\uff0c\u6211\u4eec\u79f0\u524d\u8005\u4e3a\u4e00\u68f5 LCT\u3002 \u5982\u679c\u9700\u8981\u7ef4\u62a4\u591a\u68f5\u539f\u6811\uff08\u68ee\u6797\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u68f5 LCT \u89e3\u51b3\uff0c\u53c2\u8003\u5b9e\u94fe\u5256\u5206\u7684\u6027\u8d28 4\u3002 \u6211\u4eec\u8fd9\u6837\u5efa\u7acb\u8f85\u52a9\u6811\uff1a \u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u4e0e\u539f\u6811\u4e2d\u7684\u4e00\u6761\u5b9e\u94fe\u4e00\u4e00\u5bf9\u5e94\u3002 \u4e2d\u5e8f\u904d\u5386\u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u5f97\u5230\u7684\u5e8f\u5217\uff0c\u5bf9\u5e94\u539f\u6811\u4e2d\u5b9e\u94fe\u7684\u8282\u70b9\u662f\u6df1\u5ea6\u9012\u589e\u7684\u3002 \u8f85\u52a9\u6811\u4e2d\u4e00\u68f5 Splay \u7684\u6839\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9 \u662f \u5bf9\u5e94\u539f\u6811\u5b9e\u94fe\u4e2d\u6df1\u5ea6\u6700\u5c0f\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u3002 \u5efa\u7acb\u51fa\u8f85\u52a9\u6811\u540e\uff0c\u901a\u8fc7\u8be5\u8f85\u52a9\u6811\u53ef\u4ee5\u63a8\u51fa\u552f\u4e00\u7684\u539f\u6811\uff08\u68ee\u6797\uff09\u3002\u6240\u4ee5\u4e4b\u540e\u7684\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728\u8f85\u52a9\u6811\u4e0a\u64cd\u4f5c\uff0c\u800c\u4e0d\u7528\u7ba1\u539f\u6811\u3002","title":"LCT \u4e0e\u8f85\u52a9\u6811"},{"location":"knowledge/ds/lct/#_4","text":"\u539f\u6811\u4e2d\u7684\u5b9e\u94fe: \u5728\u8f85\u52a9\u6811\u4e2d\u8282\u70b9\u90fd\u5728\u4e00\u68f5 Splay \u4e2d\u3002 \u539f\u6811\u4e2d\u7684\u865a\u94fe: \u5728\u8f85\u52a9\u6811\u4e2d\uff0c\u5b50\u8282\u70b9\u6240\u5728 Splay \u7684 Father \u6307\u5411\u7236\u8282\u70b9\uff0c\u4f46\u662f\u7236\u8282\u70b9\u7684\u4e24\u4e2a\u513f\u5b50\u90fd\u4e0d\u6307\u5411\u5b50\u8282\u70b9\u3002 \u539f\u6811\u7684\u6839\u4e0d\u7b49\u4e8e\u8f85\u52a9\u6811\u7684\u6839\u3002 \u539f\u6811\u7684\u7236\u4eb2\u8282\u70b9\u4e0d\u4e00\u5b9a\u7b49\u4e8e\u8f85\u52a9\u6811\u7684\u7236\u4eb2\u8282\u70b9\u3002 \u8f85\u52a9\u6811\u662f\u53ef\u4ee5\u5728\u6ee1\u8db3\u8f85\u52a9\u6811\u3001Splay \u7684\u6027\u8d28\u4e0b\u4efb\u610f\u6362\u6839\u7684\u3002\u8f85\u52a9\u6811\u548c\u539f\u6811\u662f\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\u3002 \u865a\u5b9e\u94fe\u53d8\u6362\u53ef\u4ee5\u8f7b\u677e\u5728\u8f85\u52a9\u6811\u4e0a\u5b8c\u6210\uff0c\u8fd9\u4e5f\u5c31\u662f\u5b9e\u73b0\u4e86\u52a8\u6001\u7ef4\u62a4\u6811\u94fe\u5256\u5206\u3002","title":"\u8003\u8651\u539f\u6811\u548c\u8f85\u52a9\u6811\u7684\u7ed3\u6784\u5173\u7cfb"},{"location":"knowledge/ds/lct/#_5","text":"ch[N][2] \u5de6\u53f3\u513f\u5b50 f[N] \u7236\u4eb2\u6307\u5411 sum[N] \u8def\u5f84\u6743\u503c\u548c val[N] \u70b9\u6743 tag[N] \u7ffb\u8f6c\u6807\u8bb0 laz[N] \u6743\u503c\u6807\u8bb0 siz[N] \u8f85\u52a9\u6811\u4e0a\u5b50\u6811\u5927\u5c0f Other_Vars","title":"\u63a5\u4e0b\u6765\u8981\u7528\u5230\u7684\u53d8\u91cf\u58f0\u660e"},{"location":"knowledge/ds/lct/#_6","text":"","title":"\u51fd\u6570\u58f0\u660e"},{"location":"knowledge/ds/lct/#_7","text":"PushUp(x) PushDown(x)","title":"\u4e00\u822c\u6570\u636e\u7ed3\u6784\u51fd\u6570\uff08\u5b57\u9762\u610f\u601d\uff09"},{"location":"knowledge/ds/lct/#splay","text":"Get(x) \u83b7\u53d6 \\(x\\) \u662f\u7236\u4eb2\u7684\u54ea\u4e2a\u513f\u5b50\u3002 Splay(x) \u901a\u8fc7\u548c Rotate \u64cd\u4f5c\u8054\u52a8\u5b9e\u73b0\u628a \\(x\\) \u65cb\u8f6c\u5230 \u5f53\u524d Splay \u7684\u6839 \u3002 Rotate(x) \u5c06 \\(x\\) \u5411\u4e0a\u65cb\u8f6c\u4e00\u5c42\u7684\u64cd\u4f5c\u3002","title":"Splay \u7cfb\u51fd\u6570\uff08\u4e0d\u4f1a\u591a\u505a\u89e3\u91ca\uff09"},{"location":"knowledge/ds/lct/#_8","text":"Access(x) \u628a\u4ece\u6839\u5230 \\(x\\) \u7684\u6240\u6709\u70b9\u653e\u5728\u4e00\u6761\u5b9e\u94fe\u91cc\uff0c\u4f7f\u6839\u5230 \\(x\\) \u6210\u4e3a\u4e00\u6761\u5b9e\u8def\u5f84\uff0c\u5e76\u4e14\u5728\u540c\u4e00\u68f5 Splay \u91cc\u3002 \u53ea\u6709\u6b64\u64cd\u4f5c\u662f\u5fc5\u987b\u5b9e\u73b0\u7684\uff0c\u5176\u4ed6\u64cd\u4f5c\u89c6\u9898\u76ee\u800c\u5b9e\u73b0\u3002 IsRoot(x) \u5224\u65ad \\(x\\) \u662f\u5426\u662f\u6240\u5728\u6811\u7684\u6839\u3002 Update(x) \u5728 Access \u64cd\u4f5c\u4e4b\u540e\uff0c\u9012\u5f52\u5730\u4ece\u4e0a\u5230\u4e0b PushDown \u66f4\u65b0\u4fe1\u606f\u3002 MakeRoot(x) \u4f7f \\(x\\) \u70b9\u6210\u4e3a\u5176\u6240\u5728\u6811\u7684\u6839\u3002 Link(x, y) \u5728 \\(x, y\\) \u4e24\u70b9\u95f4\u8fde\u4e00\u6761\u8fb9\u3002 Cut(x, y) \u628a \\(x, y\\) \u4e24\u70b9\u95f4\u8fb9\u5220\u6389\u3002 Find(x) \u627e\u5230 \\(x\\) \u6240\u5728\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u3002 Fix(x, v) \u4fee\u6539 \\(x\\) \u7684\u70b9\u6743\u4e3a \\(v\\) \u3002 Split(x, y) \u63d0\u53d6\u51fa \\(x, y\\) \u95f4\u7684\u8def\u5f84\uff0c\u65b9\u4fbf\u505a\u533a\u95f4\u64cd\u4f5c\u3002","title":"\u65b0\u64cd\u4f5c"},{"location":"knowledge/ds/lct/#_9","text":"#define ls ch[p][0] #define rs ch[p][1]","title":"\u5b8f\u5b9a\u4e49"},{"location":"knowledge/ds/lct/#_10","text":"","title":"\u51fd\u6570\u8bb2\u89e3"},{"location":"knowledge/ds/lct/#pushup","text":"\u4ece\u5de6\u53f3\u5b50\u8282\u70b9\u66f4\u65b0\u6570\u636e\u3002 inline void PushUp ( int p ) { // maintain other variables siz [ p ] = siz [ ls ] + siz [ rs ] + 1 ; }","title":"PushUp()"},{"location":"knowledge/ds/lct/#pushdown","text":"\u4e0b\u4f20\u6807\u8bb0\u3002 inline void PushDown ( int p ) { if ( tag [ p ] != std_tag ) { // pushdown the tag tag [ p ] = std_tag ; } }","title":"PushDown()"},{"location":"knowledge/ds/lct/#splay-rotate","text":"Splay \u6811\u57fa\u672c\u64cd\u4f5c\u3002 #define Get(x) (ch[f[x]][1] == x) inline void Rotate ( int x ) { int y = f [ x ], z = f [ y ], k = Get ( x ); if ( ! isRoot ( y )) ch [ z ][ ch [ z ][ 1 ] == y ] = x ; // \u4e0a\u9762\u8fd9\u53e5\u4e00\u5b9a\u8981\u5199\u5728\u524d\u9762\uff0c\u666e\u901a\u7684 Splay \u662f\u4e0d\u7528\u7684\uff0c\u56e0\u4e3a isRoot (\u540e\u9762\u4f1a\u8bb2) ch [ y ][ k ] = ch [ x ][ ! k ], f [ ch [ x ][ ! k ]] = y ; ch [ x ][ ! k ] = y , f [ y ] = x , f [ x ] = z ; PushUp ( y ), PushUp ( x ); } inline void Splay ( int x ) { Update ( x ); // \u9a6c\u4e0a\u5c31\u80fd\u770b\u5230\u5566\u3002\u5728 Splay \u4e4b\u524d\u8981\u628a\u65cb\u8f6c\u4f1a\u7ecf\u8fc7\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u90fd PushDown for ( int fa ; fa = f [ x ], ! isRoot ( x ); Rotate ( x )) { if ( ! isRoot ( fa )) Rotate ( Get ( fa ) == Get ( x ) ? fa : x ); } }","title":"Splay() &amp;&amp; Rotate()"},{"location":"knowledge/ds/lct/#isroot","text":"\u5224\u65ad\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u6240\u5728 Splay \u7684\u6839\u3002 // \u5728\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7\uff0cLCT \u5177\u6709 \u5982\u679c\u4e00\u4e2a\u513f\u5b50\u4e0d\u662f\u5b9e\u513f\u5b50\uff0c\u4ed6\u7684\u7236\u4eb2\u627e\u4e0d\u5230\u5b83\u7684\u6027\u8d28 // \u6240\u4ee5\u5f53\u4e00\u4e2a\u70b9\u65e2\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u5de6\u513f\u5b50\uff0c\u53c8\u4e0d\u662f\u5b83\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u5b83\u5c31\u662f\u5f53\u524d Splay \u7684\u6839 #define isRoot(x) (ch[f[x]][0] != x && ch[f[x]][1] != x)","title":"isRoot()"},{"location":"knowledge/ds/lct/#access","text":"\u5f00\u8f9f\u4e00\u6761\u4ece\u539f\u6811\u7684\u6839\u5230\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u94fe\u3002 \u53ef\u4ee5\u5206\u89e3\u4e3a\u5bf9\u539f\u6811\u7684\u4e24\u6b65\u64cd\u4f5c\uff1a \u5c06\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u513f\u5b50\u5168\u90e8\u8f6c\u5316\u4e3a\u865a\u513f\u5b50\uff0c\u4fdd\u8bc1\u76ee\u524d\u8282\u70b9\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u8282\u70b9\uff1b \u4ece\u6df1\u5f80\u6d45\uff0c\u901a\u8fc7\u6539\u53d8\u5b9e\u513f\u5b50\u7684\u9009\u62e9\uff0c\u6253\u901a\u4ece\u539f\u6811\u7684\u6839\u5230\u76ee\u524d\u8282\u70b9\u7684\u5b9e\u94fe\u3002 \u539f\u6811\u7684\u6539\u53d8\u8fc7\u7a0b \u539f\u6811 \u7ed3\u679c \u539f\u6811 \u7ecf\u8fc7 Access(N) \u540e\u7684\u539f\u6811 \u8f85\u52a9\u6811\u9700\u8981\u4f5c\u51fa\u5bf9\u5e94\u7684\u6539\u53d8\uff1a \u8f85\u52a9\u6811\u7684\u6539\u53d8\u8fc7\u7a0b \u539f\u8f85\u52a9\u6811 \u7b2c\u4e00\u6b21\u64cd\u4f5c \u7b2c\u4e8c\u6b21\u64cd\u4f5c \u7b2c\u4e09\u6b21\u64cd\u4f5c \u7b2c\u56db\u6b21\u64cd\u4f5c \u5047\u8bbe\u4e00\u5f00\u59cb\u8f85\u52a9\u6811\u662f\u8fd9\u4e2a\u6837\u5b50\u3002 \u8ba9 N \u65cb\u8f6c\u5230\u5f53\u524d Splay \u7684\u6839\uff1a N \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u76f4\u63a5\u65ad\u6389\u5373\u53ef\u3002 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a I \u3002 \u8ba9 I \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 I \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 N \u4f5c\u4e3a I \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 I K \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a H \u3002 \u8ba9 H \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 H \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 I \u4f5c\u4e3a H \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 H J \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I H G C \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u627e\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u64cd\u4f5c\u7684\u70b9\u4e3a A \u3002 \u8ba9 A \u65cb\u8f6c\u5230\u5f53\u524d\u8282\u70b9\u7684\u6839\u3002 A \u7684\u53f3\u5b69\u5b50\u90fd\u662f\u6df1\u5ea6\u66f4\u6df1\u7684\u70b9\uff0c\u5e94\u8be5\u94fe\u63a5\u5230\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u8ba9 H \u4f5c\u4e3a A \u7684\u53f3\u5b9e\u5b69\u5b50\u3002\uff08\u8fd9\u4e2a\u64cd\u4f5c\u540c\u65f6\u4e5f\u65ad\u5f00\u4e86\u5b9e\u8fb9 A B \uff09 \u6240\u6709\u5728 Splay \u6811\u4e2d\u7684\u70b9\u90fd\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u3002\u4ece\u6df1\u5230\u6d45\uff0c\u5df2\u7ecf\u5728\u76ee\u6807\u5b9e\u94fe\u4e0a\u7684\u8282\u70b9\u6709 N L I H G C A \u3002 \u7531\u5efa\u7acb\u8f85\u52a9\u6811\u7684\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u6211\u4eec\u5df2\u7ecf\u64cd\u4f5c\u5230\u4e86\u539f\u6811\u7684\u6839\u3002 // \u56de\u987e\u4e00\u4e0b\u4ee3\u7801 inline int Access ( int x ) { int p ; for ( p = 0 ; x ; p = x , x = f [ x ]) { Splay ( x ), ch [ x ][ 1 ] = p , PushUp ( x ); } return p ; } \u6211\u4eec\u53d1\u73b0 Access() \u5176\u5b9e\u5f88\u5bb9\u6613\uff0c\u53ea\u6709\u5982\u4e0b\u56db\u6b65\u64cd\u4f5c\uff1a \u628a\u5f53\u524d\u8282\u70b9\u8f6c\u5230\u6839\u3002 \u628a\u513f\u5b50\u6362\u6210\u4e4b\u524d\u7684\u8282\u70b9\u3002 \u66f4\u65b0\u5f53\u524d\u70b9\u7684\u4fe1\u606f\u3002 \u628a\u5f53\u524d\u70b9\u6362\u6210\u5f53\u524d\u70b9\u7684\u7236\u4eb2\uff0c\u7ee7\u7eed\u64cd\u4f5c\u3002 \u8fd9\u91cc\u63d0\u4f9b\u7684 Access \u8fd8\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u3002\u8fd9\u4e2a\u8fd4\u56de\u503c\u76f8\u5f53\u4e8e\u6700\u540e\u4e00\u6b21\u865a\u5b9e\u94fe\u53d8\u6362\u65f6\u865a\u8fb9\u7236\u4eb2\u8282\u70b9\u7684\u7f16\u53f7\u3002\u8be5\u503c\u6709\u4e24\u4e2a\u542b\u4e49\uff1a \u8fde\u7eed\u4e24\u6b21 Access \u64cd\u4f5c\u65f6\uff0c\u7b2c\u4e8c\u6b21 Access \u64cd\u4f5c\u7684\u8fd4\u56de\u503c\u7b49\u4e8e\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684 LCA. \u8868\u793a \\(x\\) \u5230\u6839\u7684\u94fe\u6240\u5728\u7684 Splay \u6811\u7684\u6839\u3002\u8fd9\u4e2a\u8282\u70b9\u4e00\u5b9a\u5df2\u7ecf\u88ab\u65cb\u8f6c\u5230\u4e86\u6839\u8282\u70b9\uff0c\u4e14\u7236\u4eb2\u4e00\u5b9a\u4e3a\u7a7a\u3002","title":"Access()"},{"location":"knowledge/ds/lct/#update","text":"\u66f4\u65b0\u4fe1\u606f\uff0c\u76f8\u5f53\u4e8e\u9010\u7ea7\u4e0b\u4f20\u6807\u8bb0\u3002 // \u4ece\u4e0a\u5230\u4e0b\u4e00\u5c42\u4e00\u5c42 pushDown \u5373\u53ef void Update ( int p ) { if ( ! isRoot ( p )) Update ( f [ p ]); pushDown ( p ); }","title":"Update()"},{"location":"knowledge/ds/lct/#makeroot","text":"\u5c06\u6307\u5b9a\u8282\u70b9\u8bbe\u4e3a\u539f\u6811\u7684\u6839\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u6709 makeRoot() \u7ef4\u62a4\u8def\u5f84\u4fe1\u606f\u65f6\uff0c\u5f88\u53ef\u80fd\u51fa\u73b0\u76f8\u540c\u6df1\u5ea6\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u6837\u7684\u8282\u70b9\u65e0\u6cd5\u51fa\u73b0\u5728\u540c\u4e00\u68f5 Splay \u5185\uff0c\u4ece\u800c\u4e0d\u80fd\u65b9\u4fbf\u5730\u8fdb\u884c\u64cd\u4f5c\u3002 \u4f7f\u7528 makeRoot() \u8ba9\u5176\u4e2d\u4e00\u4e2a\u70b9\u6210\u4e3a\u6839\uff0c\u5219\u53ef\u4ee5\u6d88\u9664\u8fd9\u79cd\u5f71\u54cd\u3002 \u4ee5 makeRoot(x) \u4e3a\u4f8b\uff0c\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u901a\u8fc7 Access(x) \u64cd\u4f5c\u83b7\u5f97\u4ece\u6839\u5230 x \u7684\u8def\u5f84\u7684 Splay\uff0c\u4e14\u8fd4\u56de\u503c y \u4e3a\u8be5 Splay \u7684\u6839\u3002 \u5c06\u4ee5 y \u4e3a\u6839\u7684 Splay \u8fdb\u884c\u533a\u95f4\u7ffb\u8f6c\u5373\u53ef\u3002 inline void makeRoot ( int p ) { p = Access ( p ); swap ( ch [ p ][ 0 ], ch [ p ][ 1 ]); tag [ p ] ^= 1 ; }","title":"makeRoot()"},{"location":"knowledge/ds/lct/#link","text":"Link \u4e24\u4e2a\u70b9\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5148 Make_Root(x) \uff0c\u7136\u540e\u628a \\(x\\) \u7684\u7236\u4eb2\u6307\u5411 \\(y\\) \u5373\u53ef\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u4e0d\u80fd\u53d1\u751f\u5728\u540c\u4e00\u68f5\u6811\u5185\uff0c\u6240\u4ee5\u8bb0\u5f97\u5148\u5224\u4e00\u4e0b\u3002 inline void Link ( int x , int p ) { makeRoot ( x ); splay ( x ); f [ x ] = p ; }","title":"Link()"},{"location":"knowledge/ds/lct/#split","text":"\u5c31\u662f\u62ff\u51fa\u4e00\u68f5 Splay\uff0c\u7ef4\u62a4\u7684\u662f \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f84\u3002 \u6267\u884c\u540e\u5f97\u5230 y \u7684\u5b50\u6811\u3002 - \u5148 MakeRoot(x) \uff0c\u7136\u540e Access(y) \u3002\u5982\u679c\u8981 \\(y\\) \u505a\u6839\uff0c\u518d Splay(y) \u3002 - \u53e6\u5916 Split \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u76f4\u63a5\u53ef\u4ee5\u628a\u9700\u8981\u7684\u8def\u5f84\u62ff\u51fa\u5230 \\(y\\) \u7684\u5b50\u6811\u4e0a\uff0c\u90a3\u4e0d\u662f\u968f\u4fbf\u5e72\u561b\u54af\u3002 void split () { makeRoot ( x ); Access ( y ); Splay ( y ); }","title":"Split()"},{"location":"knowledge/ds/lct/#cut","text":"Cut \u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4fdd\u8bc1\u5408\u6cd5\u548c\u4e0d\u4e00\u5b9a\u4fdd\u8bc1\u5408\u6cd5\u3002 \u5982\u679c\u4fdd\u8bc1\u5408\u6cd5\uff0c\u76f4\u63a5 Split(x, y) \uff0c\u8fd9\u65f6\u5019 \\(y\\) \u662f\u6839\uff0c \\(x\\) \u4e00\u5b9a\u662f\u5b83\u7684\u513f\u5b50\uff0c\u53cc\u5411\u65ad\u5f00\u5373\u53ef\u3002\u5c31\u50cf\u8fd9\u6837\uff1a inline void Cut ( int x , int p ) { makeRoot ( x ), Access ( p ), Splay ( p ), ls = f [ x ] = 0 ; } \u5982\u679c\u662f\u4e0d\u4fdd\u8bc1\u5408\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u6709\uff0c\u6211\u9009\u62e9\u4f7f\u7528 map \u5b58\u4e00\u4e0b\uff0c\u4f46\u662f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5229\u7528\u6027\u8d28\u7684\u65b9\u6cd5\uff1a \u60f3\u8981\u5220\u8fb9\uff0c\u5fc5\u987b\u8981\u6ee1\u8db3\u5982\u4e0b\u4e09\u4e2a\u6761\u4ef6\uff1a \\(x,y\\) \u8fde\u901a\u3002 \\(x,y\\) \u7684\u8def\u5f84\u4e0a\u6ca1\u6709\u5176\u4ed6\u7684\u94fe\u3002 \\(x\\) \u6ca1\u6709\u53f3\u513f\u5b50\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e0a\u9762\u4e09\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u4e00\u4e2a\uff1a \\(x,y\\) \u4e4b\u95f4\u6709\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u7559\u4f5c\u4e00\u4e2a\u601d\u8003\u9898\u7ed9\u5927\u5bb6\u3002\u5224\u65ad\u8fde\u901a\u9700\u8981\u7528\u5230\u540e\u9762\u7684 Find \uff0c\u5176\u4ed6\u4e24\u70b9\u7a0d\u4f5c\u601d\u8003\u5206\u6790\u4e00\u4e0b\u7ed3\u6784\u5c31\u77e5\u9053\u8be5\u600e\u4e48\u5224\u65ad\u4e86\u3002","title":"Cut()"},{"location":"knowledge/ds/lct/#find","text":"Find() \u5176\u5b9e\u5c31\u662f\u627e\u5230\u5f53\u524d\u8f85\u52a9\u6811\u7684\u6839\u3002\u5728 Access(p) \u540e\uff0c\u518d Splay(p) \u3002\u8fd9\u6837\u6839\u5c31\u662f\u6811\u91cc\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u4e00\u76f4\u5f80 ls \u8d70\uff0c\u6cbf\u9014 PushDown \u5373\u53ef\u3002 \u4e00\u76f4\u8d70\u5230\u6ca1\u6709 ls\uff0c\u975e\u5e38\u7b80\u5355\u3002 \u6ce8\u610f\uff0c\u6bcf\u6b21\u67e5\u8be2\u4e4b\u540e\u9700\u8981\u628a\u67e5\u8be2\u5230\u7684\u7b54\u6848\u5bf9\u5e94\u7684\u7ed3\u70b9 Splay \u4e0a\u53bb\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002 inline int Find ( int p ) { Access ( p ); Splay ( p ); pushDown ( p ); while ( ls ) p = ls , pushDown ( p ); Splay ( p ); return p ; }","title":"Find()"},{"location":"knowledge/ds/lct/#_11","text":"\u5e72\u70b9\u5565\u524d\u4e00\u5b9a\u8981\u60f3\u4e00\u60f3\u9700\u4e0d\u9700\u8981 PushUp \u6216\u8005 PushDown \uff0cLCT \u7531\u4e8e\u7279\u522b\u7075\u6d3b\u7684\u539f\u56e0\uff0c\u5c11 Pushdown \u6216\u8005 Pushup \u4e00\u6b21\u5c31\u53ef\u80fd\u628a\u4fee\u6539\u6539\u5230\u4e0d\u8be5\u6539\u7684\u70b9\u4e0a\uff01 LCT \u7684 Rotate \u548c Splay \u7684\u4e0d\u592a\u4e00\u6837\uff0c if (z) \u4e00\u5b9a\u8981\u653e\u5728\u524d\u9762\u3002 LCT \u7684 Splay \u64cd\u4f5c\u5c31\u662f\u65cb\u8f6c\u5230\u6839\uff0c\u6ca1\u6709\u65cb\u8f6c\u5230\u8c01\u513f\u5b50\u7684\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u3002","title":"\u4e00\u4e9b\u63d0\u9192"},{"location":"knowledge/ds/lct/#_12","text":"LCT \u901a\u8fc7 Split(x,y) \u64cd\u4f5c\uff0c\u53ef\u4ee5\u5c06\u6811\u4e0a\u4ece\u70b9 \\(x\\) \u5230\u70b9 \\(y\\) \u7684\u8def\u5f84\u63d0\u53d6\u5230\u4ee5 \\(y\\) \u4e3a\u6839\u7684 Splay \u5185\uff0c\u6811\u94fe\u4fe1\u606f\u7684\u4fee\u6539\u548c\u7edf\u8ba1\u8f6c\u5316\u4e3a\u5e73\u8861\u6811\u4e0a\u7684\u64cd\u4f5c\uff0c\u8fd9\u4f7f\u5f97 LCT \u5728\u7ef4\u62a4\u6811\u94fe\u4fe1\u606f\u4e0a\u5177\u6709\u4f18\u52bf\u3002\u6b64\u5916\uff0c\u501f\u52a9 LCT \u5b9e\u73b0\u7684\u5728\u6811\u94fe\u4e0a\u4e8c\u5206\u6bd4\u6811\u94fe\u5256\u5206\u5c11\u4e00\u4e2a \\(O(\\log n)\\) \u7684\u590d\u6742\u5ea6\u3002 \u4f8b\u9898 \u300c\u56fd\u5bb6\u96c6\u8bad\u961f\u300dTree II \u7ed9\u51fa\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u7684\u521d\u59cb\u6743\u503c\u4e3a \\(1\\) \u3002 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5747\u4e3a\u4ee5\u4e0b\u56db\u79cd\u4e4b\u4e00\uff1a - u1 v1 u2 v2 \uff1a\u5c06\u6811\u4e0a \\(u_1,v_1\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u5220\u9664\uff0c\u8fde\u63a5 \\(u_2,v_2\\) \u4e24\u70b9\uff0c\u4fdd\u8bc1\u64cd\u4f5c\u5408\u6cd5\u4e14\u8fde\u8fb9\u540e\u4ecd\u662f\u4e00\u68f5\u6811\u3002 + u v c \uff1a\u5c06\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u90fd\u589e\u52a0 \\(c\\) \u3002 * u v c \uff1a\u5c06\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u90fd\u4e58\u4ee5 \\(c\\) \u3002 / u v \uff1a\u8f93\u51fa\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u70b9\u6743\u4e4b\u548c\u5bf9 \\(51061\\) \u53d6\u6a21\u540e\u7684\u503c\u3002 \\(1\\le n,q\\le 10^5,0\\le c\\le 10^4\\) - \u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5 Cut(u1,v1),Link(u2,v2) \u3002 \u5bf9\u6811\u4e0a \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5148 Split(u,v) \u3002 \u6b64\u9898\u8981\u6c42\u8fdb\u884c\u5728\u8f85\u52a9\u6811\u4e0a\u7684\u5b50\u6811\u52a0\uff0c\u5b50\u6811\u4e58\uff0c\u5b50\u6811\u6c42\u548c\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9664\u4e86\u4e00\u822c LCT \u9700\u8981\u7ef4\u62a4\u7684\u5b50\u6811\u7ffb\u8f6c\u6807\u8bb0\uff0c\u8fd8\u8981\u7ef4\u62a4\u5b50\u6811\u52a0\u6cd5\u6807\u8bb0\u548c\u5b50\u6811\u4e58\u6cd5\u6807\u8bb0\u3002\u5904\u7406\u6807\u8bb0\u7684\u65b9\u6cd5\u548c\u5728 Splay \u4e0a\u662f\u4e00\u6837\u7684\u3002 \u5728\u6253\u4e0a\u548c\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\u65f6\uff0c\u5b50\u6811\u6743\u503c\u548c\u7684\u53d8\u5316\u91cf\u548c\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u6709\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u5b50\u6811\u7684\u5927\u5c0f siz \u3002 \u5728\u4e0b\u4f20\u6807\u8bb0\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u987a\u5e8f\uff0c\u5148\u4e0b\u4f20\u4e58\u6cd5\u6807\u8bb0\u518d\u4e0b\u4f20\u52a0\u6cd5\u6807\u8bb0\u3002\u5b50\u6811\u7ffb\u8f6c\u548c\u5b50\u6811\u52a0\u4e58\u4e24\u79cd\u6807\u8bb0\u6ca1\u6709\u51b2\u7a81\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; #define int long long const int maxn = 100010 ; const int mod = 51061 ; int n , q , u , v , c ; char op ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], siz [ maxn ], val [ maxn ], sum [ maxn ], rev [ maxn ], add [ maxn ], mul [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = siz [ x ] = val [ x ] = sum [ x ] = rev [ x ] = add [ x ] = 0 ; mul [ x ] = 1 ; } int getch ( int x ) { return ( ch [ fa [ x ]][ 1 ] == x ); } int isroot ( int x ) { clear ( 0 ); return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); siz [ x ] = ( siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]]) % mod ; sum [ x ] = ( sum [ ch [ x ][ 0 ]] + val [ x ] + sum [ ch [ x ][ 1 ]]) % mod ; } void pushdown ( int x ) { clear ( 0 ); if ( mul [ x ] != 1 ) { if ( ch [ x ][ 0 ]) mul [ ch [ x ][ 0 ]] = ( mul [ x ] * mul [ ch [ x ][ 0 ]]) % mod , val [ ch [ x ][ 0 ]] = ( val [ ch [ x ][ 0 ]] * mul [ x ]) % mod , sum [ ch [ x ][ 0 ]] = ( sum [ ch [ x ][ 0 ]] * mul [ x ]) % mod , add [ ch [ x ][ 0 ]] = ( add [ ch [ x ][ 0 ]] * mul [ x ]) % mod ; if ( ch [ x ][ 1 ]) mul [ ch [ x ][ 1 ]] = ( mul [ x ] * mul [ ch [ x ][ 1 ]]) % mod , val [ ch [ x ][ 1 ]] = ( val [ ch [ x ][ 1 ]] * mul [ x ]) % mod , sum [ ch [ x ][ 1 ]] = ( sum [ ch [ x ][ 1 ]] * mul [ x ]) % mod , add [ ch [ x ][ 1 ]] = ( add [ ch [ x ][ 1 ]] * mul [ x ]) % mod ; mul [ x ] = 1 ; } if ( add [ x ]) { if ( ch [ x ][ 0 ]) add [ ch [ x ][ 0 ]] = ( add [ ch [ x ][ 0 ]] + add [ x ]) % mod , val [ ch [ x ][ 0 ]] = ( val [ ch [ x ][ 0 ]] + add [ x ]) % mod , sum [ ch [ x ][ 0 ]] = ( sum [ ch [ x ][ 0 ]] + add [ x ] * siz [ ch [ x ][ 0 ]] % mod ) % mod ; if ( ch [ x ][ 1 ]) add [ ch [ x ][ 1 ]] = ( add [ ch [ x ][ 1 ]] + add [ x ]) % mod , val [ ch [ x ][ 1 ]] = ( val [ ch [ x ][ 1 ]] + add [ x ]) % mod , sum [ ch [ x ][ 1 ]] = ( sum [ ch [ x ][ 1 ]] + add [ x ] * siz [ ch [ x ][ 1 ]] % mod ) % mod ; add [ x ] = 0 ; } if ( rev [ x ]) { if ( ch [ x ][ 0 ]) rev [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) rev [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); rev [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%lld \" , x ); print ( ch [ x ][ 1 ]); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); rev [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; main () { scanf ( \"%lld%lld\" , & n , & q ); for ( int i = 1 ; i <= n ; i ++ ) st . val [ i ] = 1 , st . maintain ( i ); for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%lld%lld\" , & u , & v ); if ( st . find ( u ) != st . find ( v )) st . makeroot ( u ), st . fa [ u ] = v ; } while ( q -- ) { scanf ( \" %c%lld%lld\" , & op , & u , & v ); if ( op == '+' ) { scanf ( \"%lld\" , & c ); st . makeroot ( u ), st . access ( v ), st . splay ( v ); st . val [ v ] = ( st . val [ v ] + c ) % mod ; st . sum [ v ] = ( st . sum [ v ] + st . siz [ v ] * c % mod ) % mod ; st . add [ v ] = ( st . add [ v ] + c ) % mod ; } if ( op == '-' ) { st . makeroot ( u ); st . access ( v ); st . splay ( v ); if ( st . ch [ v ][ 0 ] == u && ! st . ch [ u ][ 1 ]) st . ch [ v ][ 0 ] = st . fa [ u ] = 0 ; scanf ( \"%lld%lld\" , & u , & v ); if ( st . find ( u ) != st . find ( v )) st . makeroot ( u ), st . fa [ u ] = v ; } if ( op == '*' ) { scanf ( \"%lld\" , & c ); st . makeroot ( u ), st . access ( v ), st . splay ( v ); st . val [ v ] = st . val [ v ] * c % mod ; st . sum [ v ] = st . sum [ v ] * c % mod ; st . mul [ v ] = st . mul [ v ] * c % mod ; } if ( op == '/' ) st . makeroot ( u ), st . access ( v ), st . splay ( v ), printf ( \"%lld \\n \" , st . sum [ v ]); } return 0 ; }","title":"\u7ef4\u62a4\u6811\u94fe\u4fe1\u606f"},{"location":"knowledge/ds/lct/#_13","text":"","title":"\u7ef4\u62a4\u8fde\u901a\u6027\u8d28"},{"location":"knowledge/ds/lct/#_14","text":"\u501f\u52a9 LCT \u7684 Find() \u51fd\u6570\uff0c\u53ef\u4ee5\u5224\u65ad\u52a8\u6001\u68ee\u6797\u4e0a\u7684\u4e24\u70b9\u662f\u5426\u8fde\u901a\u3002\u5982\u679c\u6709 Find(x)==Find(y) \uff0c\u5219\u8bf4\u660e \\(x,y\\) \u4e24\u70b9\u5728\u4e00\u68f5\u6811\u4e0a\uff0c\u76f8\u4e92\u8fde\u901a\u3002 \u4f8b\u9898 \u300cSDOI2008\u300d\u6d1e\u7a74\u52d8\u6d4b \u4e00\u5f00\u59cb\u6709 \\(n\\) \u4e2a\u72ec\u7acb\u7684\u70b9\uff0c \\(m\\) \u6b21\u64cd\u4f5c\u3002\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e4b\u4e00\uff1a Connect u v \uff1a\u5728 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 Destroy u v \uff1a\u5220\u9664\u5728 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u4fdd\u8bc1\u4e4b\u524d\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8fb9\u3002 Query u v \uff1a\u8be2\u95ee \\(u,v\\) \u4e24\u70b9\u662f\u5426\u8fde\u901a\u3002 \u4fdd\u8bc1\u5728\u4efb\u4f55\u65f6\u523b\u56fe\u7684\u5f62\u6001\u90fd\u662f\u4e00\u4e2a\u68ee\u6797\u3002 \\(n\\le 10^4, m\\le 2\\times 10^5\\) \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 10010 ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]), tag [ ch [ x ][ 0 ]] ^= 1 ; if ( ch [ x ][ 1 ]) swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]), tag [ ch [ x ][ 1 ]] ^= 1 ; tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f ; } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); tag [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; int n , q , x , y ; char op [ maxn ]; int main () { scanf ( \"%d%d\" , & n , & q ); while ( q -- ) { scanf ( \"%s%d%d\" , op , & x , & y ); if ( op [ 0 ] == 'Q' ) { if ( st . find ( x ) == st . find ( y )) printf ( \"Yes \\n \" ); else printf ( \"No \\n \" ); } if ( op [ 0 ] == 'C' ) if ( st . find ( x ) != st . find ( y )) st . makeroot ( x ), st . fa [ x ] = y ; if ( op [ 0 ] == 'D' ) { st . makeroot ( x ); st . access ( y ); st . splay ( y ); if ( st . ch [ y ][ 0 ] == x && ! st . ch [ x ][ 1 ]) st . ch [ y ][ 0 ] = st . fa [ x ] = 0 ; } } return 0 ; }","title":"\u5224\u65ad\u662f\u5426\u8fde\u901a"},{"location":"knowledge/ds/lct/#_15","text":"\u5982\u679c\u8981\u6c42\u5c06\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\uff0c\u6bcf\u6b21\u6dfb\u52a0\u4e00\u6761\u8fb9\uff0c\u6240\u8fde\u63a5\u7684\u6811\u4e0a\u7684\u4e24\u70b9\u5982\u679c\u76f8\u4e92\u8fde\u901a\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u90fd\u4f1a\u88ab\u7f29\u6210\u4e00\u4e2a\u70b9\u3002 \u4f8b\u9898 \u300cAHOI2005\u300d\u822a\u7ebf\u89c4\u5212 \u7ed9\u51fa \\(n\\) \u4e2a\u70b9\uff0c\u521d\u59cb\u65f6\u6709 \\(m\\) \u6761\u65e0\u5411\u8fb9\uff0c \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e4b\u4e00\uff1a 0 u v \uff1a\u5220\u9664 \\(u,v\\) \u4e4b\u95f4\u7684\u8fde\u8fb9\uff0c\u4fdd\u8bc1\u6b64\u65f6\u5b58\u5728\u8fd9\u6837\u7684\u4e00\u6761\u8fb9\u3002 1 u v \uff1a\u67e5\u8be2\u6b64\u65f6 \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u53ef\u80fd\u7684\u6240\u6709\u8def\u5f84\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u3002 \u4fdd\u8bc1\u56fe\u5728\u4efb\u610f\u65f6\u523b\u90fd\u8fde\u901a\u3002 \\(1<n<3\\times 10^4,1<m<10^5,0\\le q\\le 4\\times 10^4\\) \u53ef\u4ee5\u53d1\u73b0\uff0c \\(u,v\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u53ef\u80fd\u8def\u5f84\u5fc5\u987b\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf\u4e3a\u5c06\u6240\u6709\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u70b9\u4e4b\u540e \\(u\\) \u6240\u5728\u70b9\u548c \\(v\\) \u6240\u5728\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9\u6570 \\(-1\\) \u3002 \u7531\u4e8e\u9898\u76ee\u4e2d\u7684\u5220\u8fb9\u64cd\u4f5c\u4e0d\u597d\u8fdb\u884c\uff0c\u6211\u4eec\u8003\u8651\u79bb\u7ebf\u9006\u5411\u8fdb\u884c\u64cd\u4f5c\uff0c\u6539\u5220\u8fb9\u4e3a\u52a0\u8fb9\u3002 \u52a0\u5165\u4e00\u6761\u8fb9\u65f6\uff0c\u5982\u679c\u4e24\u70b9\u539f\u6765\u4e0d\u8fde\u901a\uff0c\u5219\u5728 LCT \u4e0a\u8fde\u63a5\u4e24\u70b9\uff1b\u5426\u5219\u63d0\u53d6\u51fa\u52a0\u8fd9\u6761\u8fb9\u4e4b\u524d LCT \u4e0a\u8fd9\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u904d\u5386\u8f85\u52a9\u6811\u4e0a\u7684\u8fd9\u4e2a\u5b50\u6811\uff0c\u76f8\u5f53\u4e8e\u904d\u5386\u4e86\u8fd9\u6761\u8def\u5f84\uff0c\u5c06\u8fd9\u4e9b\u70b9\u5408\u5e76\uff0c\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5408\u5e76\u7684\u4fe1\u606f\u3002 \u7528\u5408\u5e76\u540e\u5e76\u67e5\u96c6\u7684\u4ee3\u8868\u5143\u7d20\u4ee3\u66ff\u539f\u6765\u6811\u4e0a\u7684\u8def\u5f84\u3002\u6ce8\u610f\u4e4b\u540e\u7684\u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u627e\u5230\u64cd\u4f5c\u70b9\u5728\u5e76\u67e5\u96c6\u4e0a\u7684\u4ee3\u8868\u5143\u7d20\u8fdb\u884c\u64cd\u4f5c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> #include <map> using namespace std ; const int maxn = 200010 ; int f [ maxn ]; int findp ( int x ) { return f [ x ] ? f [ x ] = findp ( f [ x ]) : x ; } void merge ( int x , int y ) { x = findp ( x ); y = findp ( y ); if ( x != y ) f [ x ] = y ; } struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ], siz [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = siz [ x ] = 0 ; } int getch ( int x ) { return ch [ findp ( fa [ x ])][ 1 ] == x ; } int isroot ( int x ) { return ch [ findp ( fa [ x ])][ 0 ] != x && ch [ findp ( fa [ x ])][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]]; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) tag [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) tag [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); tag [ x ] = 0 ; } } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%d \" , x ); print ( ch [ x ][ 1 ]); } void update ( int x ) { if ( ! isroot ( x )) update ( findp ( fa [ x ])); pushdown ( x ); } void rotate ( int x ) { x = findp ( x ); int y = findp ( fa [ x ]), z = findp ( fa [ y ]), chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); if ( z ) maintain ( z ); } void splay ( int x ) { x = findp ( x ); update ( x ); for ( int f = findp ( fa [ x ]); f = findp ( fa [ x ]), ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = findp ( fa [ x ])) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { x = findp ( x ); access ( x ); splay ( x ); tag [ x ] ^= 1 ; swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); } int find ( int x ) { x = findp ( x ); access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } void dfs ( int x ) { pushdown ( x ); if ( ch [ x ][ 0 ]) dfs ( ch [ x ][ 0 ]), merge ( ch [ x ][ 0 ], x ); if ( ch [ x ][ 1 ]) dfs ( ch [ x ][ 1 ]), merge ( ch [ x ][ 1 ], x ); } } st ; int n , m , q , x , y , cur , ans [ maxn ]; struct oper { int op , a , b ; } s [ maxn ]; map < pair < int , int > , int > mp ; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) st . maintain ( i ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d\" , & x , & y ), mp [{ x , y }] = mp [{ y , x }] = 1 ; while ( scanf ( \"%d\" , & s [ ++ q ]. op )) { if ( s [ q ]. op == -1 ) { q -- ; break ; } scanf ( \"%d%d\" , & s [ q ]. a , & s [ q ]. b ); if ( ! s [ q ]. op ) mp [{ s [ q ]. a , s [ q ]. b }] = mp [{ s [ q ]. b , s [ q ]. a }] = 0 ; } reverse ( s + 1 , s + q + 1 ); for ( map < pair < int , int > , int >:: iterator it = mp . begin (); it != mp . end (); it ++ ) if ( it -> second ) { mp [{ it -> first . second , it -> first . first }] = 0 ; x = findp ( it -> first . first ); y = findp ( it -> first . second ); if ( st . find ( x ) != st . find ( y )) st . makeroot ( x ), st . fa [ x ] = y ; else { if ( x == y ) continue ; st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . dfs ( y ); int t = findp ( y ); st . fa [ t ] = findp ( st . fa [ y ]); st . ch [ t ][ 0 ] = st . ch [ t ][ 1 ] = 0 ; st . maintain ( t ); } } for ( int i = 1 ; i <= q ; i ++ ) { if ( s [ i ]. op == 0 ) { x = findp ( s [ i ]. a ); y = findp ( s [ i ]. b ); st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . dfs ( y ); int t = findp ( y ); st . fa [ t ] = st . fa [ y ]; st . ch [ t ][ 0 ] = st . ch [ t ][ 1 ] = 0 ; st . maintain ( t ); } if ( s [ i ]. op == 1 ) { x = findp ( s [ i ]. a ); y = findp ( s [ i ]. b ); st . makeroot ( x ); st . access ( y ); st . splay ( y ); ans [ ++ cur ] = st . siz [ y ] - 1 ; } } for ( int i = cur ; i >= 1 ; i -- ) printf ( \"%d \\n \" , ans [ i ]); return 0 ; }","title":"\u7ef4\u62a4\u8fb9\u53cc\u8fde\u901a\u5206\u91cf"},{"location":"knowledge/ds/lct/#_16","text":"LCT \u5e76\u4e0d\u80fd\u76f4\u63a5\u5904\u7406\u8fb9\u6743\uff0c\u6b64\u65f6\u9700\u8981\u5bf9\u6bcf\u6761\u8fb9\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u70b9\uff0c\u65b9\u4fbf\u67e5\u8be2\u94fe\u4e0a\u7684\u8fb9\u4fe1\u606f\u3002\u5229\u7528\u8fd9\u4e00\u6280\u5de7\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u751f\u6210\u6811\u3002 \u4f8b\u9898 luogu P4234 \u6700\u5c0f\u5dee\u503c\u751f\u6210\u6811 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\u7684\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5176\u8fb9\u6743\u6700\u5927\u503c\u548c\u8fb9\u6743\u6700\u5c0f\u503c\u7684\u5dee\u503c\u6700\u5c0f\u7684\u751f\u6210\u6811\uff0c\u8f93\u51fa\u8fd9\u4e2a\u5dee\u503c\u3002 \u6570\u636e\u4fdd\u8bc1\u81f3\u5c11\u5b58\u5728\u4e00\u68f5\u751f\u6210\u6811\u3002 \\(1\\le n\\le 5\\times 10^4,1\\le m\\le 2\\times 10^5,1\\le w_i\\le 10^4\\) \u5c06\u8fb9\u6309\u7167\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u679a\u4e3e\u9009\u62e9\u7684\u6700\u53f3\u8fb9\u7684\u4e00\u6761\u8fb9\uff0c\u8981\u5f97\u5230\u6700\u4f18\u89e3\uff0c\u9700\u8981\u4f7f\u8fb9\u6743\u6700\u5c0f\u8fb9\u7684\u8fb9\u6743\u6700\u5927\u3002 \u6bcf\u6b21\u6309\u7167\u987a\u5e8f\u6dfb\u52a0\u8fb9\uff0c\u5982\u679c\u5c06\u8981\u8fde\u63a5\u7684\u8fd9\u4e24\u4e2a\u70b9\u5df2\u7ecf\u8fde\u901a\uff0c\u5219\u5220\u9664\u8fd9\u4e24\u70b9\u4e4b\u95f4\u8fb9\u6743\u6700\u5c0f\u7684\u4e00\u6761\u8fb9\u3002\u5982\u679c\u6574\u4e2a\u56fe\u5df2\u7ecf\u8fde\u901a\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u5219\u7528\u5f53\u524d\u8fb9\u6743\u51cf\u53bb\u6700\u5c0f\u8fb9\u6743\u66f4\u65b0\u7b54\u6848\u3002\u6700\u5c0f\u8fb9\u6743\u53ef\u7528\u53cc\u6307\u9488\u6cd5\u66f4\u65b0\u3002 LCT \u4e0a\u6ca1\u6709\u56fa\u5b9a\u7684\u7236\u5b50\u5173\u7cfb\uff0c\u6240\u4ee5\u4e0d\u80fd\u5c06\u8fb9\u6743\u8bb0\u5f55\u5728\u70b9\u6743\u4e2d\u3002 \u8bb0\u5f55\u6811\u94fe\u4e0a\u7684\u8fb9\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528 \u62c6\u8fb9 \u3002\u5bf9\u6bcf\u6761\u8fb9\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\uff0c\u4ece\u8fd9\u6761\u8fb9\u5411\u5176\u4e24\u4e2a\u7aef\u70b9\u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u539f\u5148\u7684\u8fde\u8fb9\u4e0e\u5220\u8fb9\u64cd\u4f5c\u90fd\u53d8\u6210\u4e24\u6b21\u64cd\u4f5c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> #include <set> using namespace std ; const int maxn = 5000010 ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], tag [ maxn ], val [ maxn ], minn [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = tag [ x ] = val [ x ] = minn [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { if ( ! x ) return ; minn [ x ] = x ; if ( ch [ x ][ 0 ]) { if ( val [ minn [ ch [ x ][ 0 ]]] < val [ minn [ x ]]) minn [ x ] = minn [ ch [ x ][ 0 ]]; } if ( ch [ x ][ 1 ]) { if ( val [ minn [ ch [ x ][ 1 ]]] < val [ minn [ x ]]) minn [ x ] = minn [ ch [ x ][ 1 ]]; } } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) tag [ ch [ x ][ 0 ]] ^= 1 , swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]); if ( ch [ x ][ 1 ]) tag [ ch [ x ][ 1 ]] ^= 1 , swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]); tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void print ( int x ) { if ( ! x ) return ; pushdown ( x ); print ( ch [ x ][ 0 ]); printf ( \"%d \" , x ); print ( ch [ x ][ 1 ]); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); if ( z ) maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); tag [ x ] ^= 1 ; swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } void link ( int x , int y ) { makeroot ( x ); fa [ x ] = y ; } void cut ( int x , int y ) { makeroot ( x ); access ( y ); splay ( y ); ch [ y ][ 0 ] = fa [ x ] = 0 ; maintain ( y ); } } st ; const int inf = 2e9 + 1 ; int n , m , ans , nww , x , y ; struct Edge { int u , v , w ; bool operator < ( Edge x ) const { return w < x . w ; }; } s [ maxn ]; multiset < int > mp ; int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) st . val [ i ] = inf , st . maintain ( i ); for ( int i = 1 ; i <= m ; i ++ ) scanf ( \"%d%d%d\" , & s [ i ]. u , & s [ i ]. v , & s [ i ]. w ); sort ( s + 1 , s + m + 1 ); for ( int i = 1 ; i <= m ; i ++ ) st . val [ n + i ] = s [ i ]. w , st . maintain ( n + i ); for ( int i = 1 ; i <= m ; i ++ ) { x = s [ i ]. u ; y = s [ i ]. v ; if ( x == y ) continue ; if ( st . find ( x ) != st . find ( y )) { nww ++ ; st . link ( x , n + i ); st . link ( n + i , y ); mp . insert ( s [ i ]. w ); if ( nww == n - 1 ) ans = s [ i ]. w - ( * ( mp . begin () ++ )); } else { st . makeroot ( x ); st . access ( y ); st . splay ( y ); int t = st . minn [ y ] - n ; st . cut ( s [ t ]. u , t + n ); st . cut ( t + n , s [ t ]. v ); mp . erase ( mp . find ( s [ t ]. w )); st . link ( x , n + i ); st . link ( n + i , y ); mp . insert ( s [ i ]. w ); if ( nww == n - 1 ) ans = min ( ans , s [ i ]. w - ( * ( mp . begin () ++ ))); } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"\u7ef4\u62a4\u8fb9\u6743"},{"location":"knowledge/ds/lct/#_17","text":"LCT \u4e0d\u64c5\u957f\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u3002\u7edf\u8ba1\u4e00\u4e2a\u7ed3\u70b9\u6240\u6709\u865a\u5b50\u6811\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u6c42\u5f97\u6574\u68f5\u6811\u7684\u4fe1\u606f\u3002 \u4f8b\u9898 \u300cBJOI2014\u300d\u5927\u878d\u5408 \u7ed9\u5b9a \\(n\\) \u4e2a\u7ed3\u70b9\u548c \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u4e3a\u5982\u4e0b\u5f62\u5f0f\uff1a A x y \u5728\u7ed3\u70b9 \\(x\\) \u548c \\(y\\) \u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 Q x y \u7ed9\u5b9a\u4e00\u6761\u5df2\u7ecf\u5b58\u5728\u7684\u8fb9 \\((x,y)\\) \uff0c\u6c42\u6709\u591a\u5c11\u6761\u7b80\u5355\u8def\u5f84\uff0c\u5176\u4e2d\u5305\u542b\u8fb9 \\((x,y)\\) \u3002 \u4fdd\u8bc1\u5728\u4efb\u610f\u65f6\u523b\uff0c\u56fe\u7684\u5f62\u6001\u90fd\u662f\u4e00\u68f5\u68ee\u6797\u3002 \\(1\\le n,q,x,y\\le 10^5\\) \u4e3a\u8be2\u95ee Q \u8003\u8651\u53e6\u4e00\u79cd\u8868\u8ff0\uff0c\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u7b49\u4e8e\u8fb9 \\((x,y)\\) \u5728 \\(x\\) \u4fa7\u7684\u7ed3\u70b9\u6570\u4e0e \\(y\\) \u4fa7\u7684\u7ed3\u70b9\u6570\u7684\u4e58\u79ef\uff0c\u5373\u5c06\u8fb9 \\((x,y)\\) \u65ad\u5f00\u540e\u5206\u522b\u5305\u542b \\(x\\) \u548c \\(y\\) \u7684\u6811\u7684\u7ed3\u70b9\u6570\u3002\u4e3a\u4e86\u6d88\u9664\u65ad\u8fb9\u7684\u5f71\u54cd\uff0c\u5728\u8be2\u95ee\u540e\u6211\u4eec\u518d\u6b21\u8fde\u63a5\u8fb9 \\((x,y)\\) \u3002 \u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u65e2\u6709\u8fde\u8fb9\uff0c\u53c8\u6709\u5220\u8fb9\uff0c\u8fd8\u4fdd\u8bc1\u5728\u4efb\u610f\u65f6\u523b\u90fd\u662f\u4e00\u68f5\u68ee\u6797\uff0c\u6211\u4eec\u4e0d\u7531\u5f97\u60f3\u5230\u7528 LCT \u6765\u7ef4\u62a4\u3002\u4f46\u662f\u8fd9\u9898\u4e2d LCT \u7ef4\u62a4\u7684\u662f\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u4e0d\u50cf\u6211\u4eec\u5370\u8c61\u4e2d\u7684\u7ef4\u62a4\u4e00\u6761\u94fe\u7684\u4fe1\u606f\uff0c\u800c LCT \u7684\u6784\u9020 \u8ba4\u7236\u4e0d\u8ba4\u5b50 \uff0c\u4e0d\u65b9\u4fbf\u6211\u4eec\u76f4\u63a5\u8fdb\u884c\u5b50\u6811\u7684\u7edf\u8ba1\u3002\u600e\u4e48\u529e\u5462\uff1f \u65b9\u6cd5\u662f\u7edf\u8ba1\u4e00\u4e2a\u7ed3\u70b9 \\(x\\) \u6240\u6709\u865a\u513f\u5b50\uff08\u5373\u7236\u4eb2\u4e3a \\(x\\) \uff0c\u4f46 \\(x\\) \u5728 Splay \u4e2d\u7684\u5de6\u53f3\u513f\u5b50\u5e76\u4e0d\u5305\u542b\u5b83\uff09\u6240\u4ee3\u8868\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002 \u5b9a\u4e49 \\(siz2[x]\\) \u4e3a\u7ed3\u70b9 \\(x\\) \u7684\u6240\u6709\u865a\u513f\u5b50\u4ee3\u8868\u7684\u5b50\u6811\u7684\u7ed3\u70b9\u6570\uff0c \\(siz[x]\\) \u4e3a \u7ed3\u70b9 \\(x\\) \u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u3002 \u4e0d\u540c\u4e8e\u4ee5\u5f80\u6211\u4eec\u7ef4\u62a4 Splay \u4e2d\u5b50\u6811\u7ed3\u70b9\u4e2a\u6570\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5728\u8ba1\u7b97\u7ed3\u70b9 \\(x\\) \u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u65f6\uff0c\u8fd8\u8981\u52a0\u4e0a \\(siz2[x]\\) \uff0c\u5373 void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]] + siz2 [ x ]; } \u800c\u4e14\u5728\u6211\u4eec \u6539\u53d8 Splay \u7684\u5f62\u6001 \uff08\u5373\u6539\u53d8\u4e00\u4e2a\u7ed3\u70b9\u5728 Splay \u4e0a\u7684\u5de6\u53f3\u513f\u5b50\u6307\u5411\u65f6\uff09\uff0c\u9700\u8981\u53ca\u65f6\u4fee\u6539 \\(siz2[x]\\) \u7684\u503c\u3002 \u5728 Rotate(),Splay() \u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u90fd\u53ea\u662f\u6539\u53d8\u4e86 Splay \u4e2d\u7ed3\u70b9\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u6ca1\u6709\u6539\u53d8\u4efb\u610f\u4e00\u6761\u8fb9\u7684\u865a\u5b9e\u60c5\u51b5\uff0c\u6240\u4ee5\u4e0d\u5bf9 \\(siz2[x]\\) \u8fdb\u884c\u4efb\u4f55\u4fee\u6539\u3002 \u5728 access \u64cd\u4f5c\u4e2d\uff0c\u5728\u6bcf\u6b21 splay \u5b8c\u540e\uff0c\u90fd\u4f1a\u6539\u53d8\u521a\u521a splay \u5b8c\u7684\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u5373\u8be5\u7ed3\u70b9\u4e0e\u5176\u539f\u53f3\u513f\u5b50\u7684\u8fde\u8fb9\u548c\u8be5\u8282\u70b9\u548c\u65b0\u53f3\u513f\u5b50\u7684\u8fde\u8fb9\u7684\u865a\u5b9e\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6211\u4eec\u9700\u8981\u52a0\u4e0a\u65b0\u53d8\u6210\u865a\u8fb9\u6240\u8fde\u7684\u5b50\u6811\u7684\u8d21\u732e\uff0c\u51cf\u53bb\u521a\u521a\u53d8\u6210\u5b9e\u8fb9\u6240\u8fde\u7684\u5b50\u6811\u7684\u8d21\u732e\u3002\u4ee3\u7801\u5982\u4e0b\uff1a void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), siz2 [ x ] += siz [ ch [ x ][ 1 ]] - siz [ f ], ch [ x ][ 1 ] = f , maintain ( x ); } \u5728 MakeRoot(),Find() \u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u90fd\u53ea\u662f\u8c03\u7528\u4e86\u4e4b\u524d\u7684\u51fd\u6570\u6216\u8005\u5728 Splay \u4e0a\u6761\u8fb9\uff0c\u5e76\u4e0d\u7528\u505a\u4efb\u4f55\u4fee\u6539\u3002 \u5728\u8fde\u63a5\u4e24\u70b9\u65f6\uff0c\u6211\u4eec\u4fee\u6539\u4e86\u4e00\u4e2a\u7ed3\u70b9\u7684\u7236\u4eb2\u3002\u6211\u4eec\u9700\u8981\u5728\u7236\u4eb2\u7ed3\u70b9\u7684 \\(siz2\\) \u503c\u4e2d\u52a0\u4e0a\u65b0\u5b50\u7ed3\u70b9\u7684\u5b50\u6811\u5927\u5c0f\u8d21\u732e\u3002 st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; \u5728\u65ad\u5f00\u4e00\u6761\u8fb9\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u5220\u9664\u4e86 Splay \u4e0a\u7684\u4e00\u6761\u5b9e\u8fb9\uff0c Maintain \u64cd\u4f5c\u4f1a\u7ef4\u62a4\u8fd9\u4e9b\u4fe1\u606f\uff0c\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\u3002 \u4ee3\u7801\u4fee\u6539\u7684\u7ec6\u8282\u8bb2\u5b8c\u4e86\uff0c\u603b\u7ed3\u4e00\u4e0b LCT \u7ef4\u62a4\u5b50\u6811\u4fe1\u606f\u7684\u8981\u6c42\u4e0e\u65b9\u6cd5\uff1a \u7ef4\u62a4\u7684\u4fe1\u606f\u8981\u6709 \u53ef\u51cf\u6027 \uff0c\u5982\u5b50\u6811\u7ed3\u70b9\u6570\uff0c\u5b50\u6811\u6743\u503c\u548c\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u7ef4\u62a4\u5b50\u6811\u6700\u5927\u6700\u5c0f\u503c\uff0c\u56e0\u4e3a\u5728\u5c06\u4e00\u6761\u865a\u8fb9\u53d8\u6210\u5b9e\u8fb9\u65f6\u8981\u6392\u9664\u539f\u5148\u865a\u8fb9\u7684\u8d21\u732e\u3002 \u65b0\u5efa\u4e00\u4e2a\u9644\u52a0\u503c\u5b58\u50a8\u865a\u5b50\u6811\u7684\u8d21\u732e\uff0c\u5728\u7edf\u8ba1\u65f6\u5c06\u5176\u52a0\u5165\u672c\u7ed3\u70b9\u7b54\u6848\uff0c\u5728\u6539\u53d8\u8fb9\u7684\u865a\u5b9e\u65f6\u53ca\u65f6\u7ef4\u62a4\u3002 \u5176\u4f59\u90e8\u5206\u540c\u666e\u901a LCT\uff0c\u5728\u7edf\u8ba1\u5b50\u6811\u4fe1\u606f\u65f6\u4e00\u5b9a\u5c06\u5176\u4f5c\u4e3a\u6839\u8282\u70b9\u3002 \u5982\u679c\u7ef4\u62a4\u7684\u4fe1\u606f\u6ca1\u6709\u53ef\u51cf\u6027\uff0c\u5982\u7ef4\u62a4\u533a\u95f4\u6700\u503c\uff0c\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u5f00\u4e00\u4e2a\u5e73\u8861\u6811\u7ef4\u62a4\u7ed3\u70b9\u7684\u865a\u5b50\u6811\u4e2d\u7684\u6700\u503c\u3002 \u53c2\u8003\u4ee3\u7801 #include <algorithm> #include <cstdio> #include <cstring> using namespace std ; const int maxn = 100010 ; typedef long long ll ; struct Splay { int ch [ maxn ][ 2 ], fa [ maxn ], siz [ maxn ], siz2 [ maxn ], tag [ maxn ]; void clear ( int x ) { ch [ x ][ 0 ] = ch [ x ][ 1 ] = fa [ x ] = siz [ x ] = siz2 [ x ] = tag [ x ] = 0 ; } int getch ( int x ) { return ch [ fa [ x ]][ 1 ] == x ; } int isroot ( int x ) { return ch [ fa [ x ]][ 0 ] != x && ch [ fa [ x ]][ 1 ] != x ; } void maintain ( int x ) { clear ( 0 ); if ( x ) siz [ x ] = siz [ ch [ x ][ 0 ]] + 1 + siz [ ch [ x ][ 1 ]] + siz2 [ x ]; } void pushdown ( int x ) { if ( tag [ x ]) { if ( ch [ x ][ 0 ]) swap ( ch [ ch [ x ][ 0 ]][ 0 ], ch [ ch [ x ][ 0 ]][ 1 ]), tag [ ch [ x ][ 0 ]] ^= 1 ; if ( ch [ x ][ 1 ]) swap ( ch [ ch [ x ][ 1 ]][ 0 ], ch [ ch [ x ][ 1 ]][ 1 ]), tag [ ch [ x ][ 1 ]] ^= 1 ; tag [ x ] = 0 ; } } void update ( int x ) { if ( ! isroot ( x )) update ( fa [ x ]); pushdown ( x ); } void rotate ( int x ) { int y = fa [ x ], z = fa [ y ], chx = getch ( x ), chy = getch ( y ); fa [ x ] = z ; if ( ! isroot ( y )) ch [ z ][ chy ] = x ; ch [ y ][ chx ] = ch [ x ][ chx ^ 1 ]; fa [ ch [ x ][ chx ^ 1 ]] = y ; ch [ x ][ chx ^ 1 ] = y ; fa [ y ] = x ; maintain ( y ); maintain ( x ); maintain ( z ); } void splay ( int x ) { update ( x ); for ( int f = fa [ x ]; f = fa [ x ], ! isroot ( x ); rotate ( x )) if ( ! isroot ( f )) rotate ( getch ( x ) == getch ( f ) ? f : x ); } void access ( int x ) { for ( int f = 0 ; x ; f = x , x = fa [ x ]) splay ( x ), siz2 [ x ] += siz [ ch [ x ][ 1 ]] - siz [ f ], ch [ x ][ 1 ] = f , maintain ( x ); } void makeroot ( int x ) { access ( x ); splay ( x ); swap ( ch [ x ][ 0 ], ch [ x ][ 1 ]); tag [ x ] ^= 1 ; } int find ( int x ) { access ( x ); splay ( x ); while ( ch [ x ][ 0 ]) x = ch [ x ][ 0 ]; splay ( x ); return x ; } } st ; int n , q , x , y ; char op ; int main () { scanf ( \"%d%d\" , & n , & q ); while ( q -- ) { scanf ( \" %c%d%d\" , & op , & x , & y ); if ( op == 'A' ) { st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; } if ( op == 'Q' ) { st . makeroot ( x ); st . access ( y ); st . splay ( y ); st . ch [ y ][ 0 ] = st . fa [ x ] = 0 ; st . maintain ( x ); st . makeroot ( x ); st . makeroot ( y ); printf ( \"%lld \\n \" , ( ll )( st . siz [ x ] * st . siz [ y ])); st . makeroot ( x ); st . makeroot ( y ); st . fa [ x ] = y ; st . siz2 [ y ] += st . siz [ x ]; } } return 0 ; }","title":"\u7ef4\u62a4\u5b50\u6811\u4fe1\u606f"},{"location":"problem/","text":"\u9898\u76ee\u5217\u8868 \u60a8\u53ef\u4ee5\u5148\u9009\u62e9\u5bf9\u5e94\u573a\u6b21\uff0c\u518d\u9009\u62e9\u5bf9\u5e94\u7684\u9898\u76ee\u3002 \u9006\u5e8f\uff08\u5df2\u66f4\u65b0\u53ca\u66f4\u65b0\u4e2d\uff09 \u9006\u5e8f\uff08\u6240\u6709\uff09 \u6b63\u5e8f\uff08\u6240\u6709\uff09 \u7b2c 24 \u6b21 \u7b2c 23 \u6b21 \u7b2c 24 \u6b21 \u7b2c 23 \u6b21 \u7b2c 22 \u6b21 \u7b2c 21 \u6b21 \u7b2c 20 \u6b21 \u7b2c 19 \u6b21 \u7b2c 18 \u6b21 \u7b2c 17 \u6b21 \u7b2c 16 \u6b21 \u7b2c 15 \u6b21 \u7b2c 14 \u6b21 \u7b2c 13 \u6b21 \u7b2c 12 \u6b21 \u7b2c 11 \u6b21 \u7b2c 10 \u6b21 \u7b2c 9 \u6b21 \u7b2c 8 \u6b21 \u7b2c 7 \u6b21 \u7b2c 6 \u6b21 \u7b2c 5 \u6b21 \u7b2c 4 \u6b21 \u7b2c 3 \u6b21 \u7b2c 2 \u6b21 \u7b2c 1 \u6b21 \u7b2c 1 \u6b21 \u7b2c 2 \u6b21 \u7b2c 3 \u6b21 \u7b2c 4 \u6b21 \u7b2c 5 \u6b21 \u7b2c 6 \u6b21 \u7b2c 7 \u6b21 \u7b2c 8 \u6b21 \u7b2c 9 \u6b21 \u7b2c 10 \u6b21 \u7b2c 11 \u6b21 \u7b2c 12 \u6b21 \u7b2c 13 \u6b21 \u7b2c 14 \u6b21 \u7b2c 15 \u6b21 \u7b2c 16 \u6b21 \u7b2c 17 \u6b21 \u7b2c 18 \u6b21 \u7b2c 19 \u6b21 \u7b2c 20 \u6b21 \u7b2c 21 \u6b21 \u7b2c 22 \u6b21 \u7b2c 23 \u6b21 \u7b2c 24 \u6b21","title":"\u9898\u76ee\u5217\u8868"},{"location":"problem/#_1","text":"\u60a8\u53ef\u4ee5\u5148\u9009\u62e9\u5bf9\u5e94\u573a\u6b21\uff0c\u518d\u9009\u62e9\u5bf9\u5e94\u7684\u9898\u76ee\u3002 \u9006\u5e8f\uff08\u5df2\u66f4\u65b0\u53ca\u66f4\u65b0\u4e2d\uff09 \u9006\u5e8f\uff08\u6240\u6709\uff09 \u6b63\u5e8f\uff08\u6240\u6709\uff09 \u7b2c 24 \u6b21 \u7b2c 23 \u6b21 \u7b2c 24 \u6b21 \u7b2c 23 \u6b21 \u7b2c 22 \u6b21 \u7b2c 21 \u6b21 \u7b2c 20 \u6b21 \u7b2c 19 \u6b21 \u7b2c 18 \u6b21 \u7b2c 17 \u6b21 \u7b2c 16 \u6b21 \u7b2c 15 \u6b21 \u7b2c 14 \u6b21 \u7b2c 13 \u6b21 \u7b2c 12 \u6b21 \u7b2c 11 \u6b21 \u7b2c 10 \u6b21 \u7b2c 9 \u6b21 \u7b2c 8 \u6b21 \u7b2c 7 \u6b21 \u7b2c 6 \u6b21 \u7b2c 5 \u6b21 \u7b2c 4 \u6b21 \u7b2c 3 \u6b21 \u7b2c 2 \u6b21 \u7b2c 1 \u6b21 \u7b2c 1 \u6b21 \u7b2c 2 \u6b21 \u7b2c 3 \u6b21 \u7b2c 4 \u6b21 \u7b2c 5 \u6b21 \u7b2c 6 \u6b21 \u7b2c 7 \u6b21 \u7b2c 8 \u6b21 \u7b2c 9 \u6b21 \u7b2c 10 \u6b21 \u7b2c 11 \u6b21 \u7b2c 12 \u6b21 \u7b2c 13 \u6b21 \u7b2c 14 \u6b21 \u7b2c 15 \u6b21 \u7b2c 16 \u6b21 \u7b2c 17 \u6b21 \u7b2c 18 \u6b21 \u7b2c 19 \u6b21 \u7b2c 20 \u6b21 \u7b2c 21 \u6b21 \u7b2c 22 \u6b21 \u7b2c 23 \u6b21 \u7b2c 24 \u6b21","title":"\u9898\u76ee\u5217\u8868"},{"location":"problem/1/","text":"\u7b2c 1 \u6b21\uff082014 \u5e74 3 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201403-1 \u76f8\u53cd\u6570 \u94fe\u63a5 201403-2 \u7a97\u53e3 \u94fe\u63a5 201403-3 \u547d\u4ee4\u884c\u9009\u9879 \u94fe\u63a5 201403-4 \u65e0\u7ebf\u7f51\u7edc \u94fe\u63a5 201403-5 \u4efb\u52a1\u8c03\u5ea6 \u94fe\u63a5","title":"\u7b2c 1 \u6b21\uff082014 \u5e74 3 \u6708\uff09"},{"location":"problem/1/#1-2014-3","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201403-1 \u76f8\u53cd\u6570 \u94fe\u63a5 201403-2 \u7a97\u53e3 \u94fe\u63a5 201403-3 \u547d\u4ee4\u884c\u9009\u9879 \u94fe\u63a5 201403-4 \u65e0\u7ebf\u7f51\u7edc \u94fe\u63a5 201403-5 \u4efb\u52a1\u8c03\u5ea6 \u94fe\u63a5","title":"\u7b2c 1 \u6b21\uff082014 \u5e74 3 \u6708\uff09"},{"location":"problem/1/1/","text":"201403-1 \u76f8\u53cd\u6570 \u9898\u76ee\u94fe\u63a5 201403-1 \u76f8\u53cd\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201403-1 \u76f8\u53cd\u6570"},{"location":"problem/1/1/#201403-1","text":"","title":"201403-1 \u76f8\u53cd\u6570"},{"location":"problem/1/1/#_1","text":"201403-1 \u76f8\u53cd\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/1/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/1/2/","text":"201403-2 \u7a97\u53e3 \u9898\u76ee\u94fe\u63a5 201403-2 \u7a97\u53e3 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201403-2 \u7a97\u53e3"},{"location":"problem/1/2/#201403-2","text":"","title":"201403-2 \u7a97\u53e3"},{"location":"problem/1/2/#_1","text":"201403-2 \u7a97\u53e3","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/1/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/1/3/","text":"201403-3 \u547d\u4ee4\u884c\u9009\u9879 \u9898\u76ee\u94fe\u63a5 201403-3 \u547d\u4ee4\u884c\u9009\u9879 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201403-3 \u547d\u4ee4\u884c\u9009\u9879"},{"location":"problem/1/3/#201403-3","text":"","title":"201403-3 \u547d\u4ee4\u884c\u9009\u9879"},{"location":"problem/1/3/#_1","text":"201403-3 \u547d\u4ee4\u884c\u9009\u9879","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/1/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/1/4/","text":"201403-4 \u65e0\u7ebf\u7f51\u7edc \u9898\u76ee\u94fe\u63a5 201403-4 \u65e0\u7ebf\u7f51\u7edc \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201403-4 \u65e0\u7ebf\u7f51\u7edc"},{"location":"problem/1/4/#201403-4","text":"","title":"201403-4 \u65e0\u7ebf\u7f51\u7edc"},{"location":"problem/1/4/#_1","text":"201403-4 \u65e0\u7ebf\u7f51\u7edc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/1/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/1/5/","text":"201403-5 \u4efb\u52a1\u8c03\u5ea6 \u9898\u76ee\u94fe\u63a5 201403-5 \u4efb\u52a1\u8c03\u5ea6 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201403-5 \u4efb\u52a1\u8c03\u5ea6"},{"location":"problem/1/5/#201403-5","text":"","title":"201403-5 \u4efb\u52a1\u8c03\u5ea6"},{"location":"problem/1/5/#_1","text":"201403-5 \u4efb\u52a1\u8c03\u5ea6","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/1/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/10/","text":"\u7b2c 10 \u6b21\uff082017 \u5e74 3 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201703-1 \u5206\u86cb\u7cd5 \u94fe\u63a5 201703-2 \u5b66\u751f\u6392\u961f \u94fe\u63a5 201703-3 Markdown \u94fe\u63a5 201703-4 \u5730\u94c1\u4fee\u5efa \u94fe\u63a5 201703-5 \u5f15\u6c34\u5165\u57ce \u94fe\u63a5","title":"\u7b2c 10 \u6b21\uff082017 \u5e74 3 \u6708\uff09"},{"location":"problem/10/#10-2017-3","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201703-1 \u5206\u86cb\u7cd5 \u94fe\u63a5 201703-2 \u5b66\u751f\u6392\u961f \u94fe\u63a5 201703-3 Markdown \u94fe\u63a5 201703-4 \u5730\u94c1\u4fee\u5efa \u94fe\u63a5 201703-5 \u5f15\u6c34\u5165\u57ce \u94fe\u63a5","title":"\u7b2c 10 \u6b21\uff082017 \u5e74 3 \u6708\uff09"},{"location":"problem/10/1/","text":"201703-1 \u5206\u86cb\u7cd5 \u9898\u76ee\u94fe\u63a5 201703-1 \u5206\u86cb\u7cd5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201703-1 \u5206\u86cb\u7cd5"},{"location":"problem/10/1/#201703-1","text":"","title":"201703-1 \u5206\u86cb\u7cd5"},{"location":"problem/10/1/#_1","text":"201703-1 \u5206\u86cb\u7cd5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/10/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/10/2/","text":"201703-2 \u5b66\u751f\u6392\u961f \u9898\u76ee\u94fe\u63a5 201703-2 \u5b66\u751f\u6392\u961f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201703-2 \u5b66\u751f\u6392\u961f"},{"location":"problem/10/2/#201703-2","text":"","title":"201703-2 \u5b66\u751f\u6392\u961f"},{"location":"problem/10/2/#_1","text":"201703-2 \u5b66\u751f\u6392\u961f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/10/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/10/3/","text":"201703-3 Markdown \u9898\u76ee\u94fe\u63a5 201703-3 Markdown \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201703-3 Markdown"},{"location":"problem/10/3/#201703-3-markdown","text":"","title":"201703-3 Markdown"},{"location":"problem/10/3/#_1","text":"201703-3 Markdown","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/10/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/10/4/","text":"201703-4 \u5730\u94c1\u4fee\u5efa \u9898\u76ee\u94fe\u63a5 201703-4 \u5730\u94c1\u4fee\u5efa \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201703-4 \u5730\u94c1\u4fee\u5efa"},{"location":"problem/10/4/#201703-4","text":"","title":"201703-4 \u5730\u94c1\u4fee\u5efa"},{"location":"problem/10/4/#_1","text":"201703-4 \u5730\u94c1\u4fee\u5efa","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/10/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/10/5/","text":"201703-5 \u5f15\u6c34\u5165\u57ce \u9898\u76ee\u94fe\u63a5 201703-5 \u5f15\u6c34\u5165\u57ce \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201703-5 \u5f15\u6c34\u5165\u57ce"},{"location":"problem/10/5/#201703-5","text":"","title":"201703-5 \u5f15\u6c34\u5165\u57ce"},{"location":"problem/10/5/#_1","text":"201703-5 \u5f15\u6c34\u5165\u57ce","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/10/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/11/","text":"\u7b2c 11 \u6b21\uff082017 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201709-1 \u6253\u9171\u6cb9 \u94fe\u63a5 201709-2 \u516c\u5171\u94a5\u5319\u76d2 \u94fe\u63a5 201709-3 JSON\u67e5\u8be2 \u94fe\u63a5 201709-4 \u901a\u4fe1\u7f51\u7edc \u94fe\u63a5 201709-5 \u9664\u6cd5 \u94fe\u63a5","title":"\u7b2c 11 \u6b21\uff082017 \u5e74 9 \u6708\uff09"},{"location":"problem/11/#11-2017-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201709-1 \u6253\u9171\u6cb9 \u94fe\u63a5 201709-2 \u516c\u5171\u94a5\u5319\u76d2 \u94fe\u63a5 201709-3 JSON\u67e5\u8be2 \u94fe\u63a5 201709-4 \u901a\u4fe1\u7f51\u7edc \u94fe\u63a5 201709-5 \u9664\u6cd5 \u94fe\u63a5","title":"\u7b2c 11 \u6b21\uff082017 \u5e74 9 \u6708\uff09"},{"location":"problem/11/1/","text":"201709-1 \u6253\u9171\u6cb9 \u9898\u76ee\u94fe\u63a5 201709-1 \u6253\u9171\u6cb9 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201709-1 \u6253\u9171\u6cb9"},{"location":"problem/11/1/#201709-1","text":"","title":"201709-1 \u6253\u9171\u6cb9"},{"location":"problem/11/1/#_1","text":"201709-1 \u6253\u9171\u6cb9","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/11/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/11/2/","text":"201709-2 \u516c\u5171\u94a5\u5319\u76d2 \u9898\u76ee\u94fe\u63a5 201709-2 \u516c\u5171\u94a5\u5319\u76d2 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201709-2 \u516c\u5171\u94a5\u5319\u76d2"},{"location":"problem/11/2/#201709-2","text":"","title":"201709-2 \u516c\u5171\u94a5\u5319\u76d2"},{"location":"problem/11/2/#_1","text":"201709-2 \u516c\u5171\u94a5\u5319\u76d2","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/11/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/11/3/","text":"201709-3 JSON\u67e5\u8be2 \u9898\u76ee\u94fe\u63a5 201709-3 JSON\u67e5\u8be2 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201709-3 JSON\u67e5\u8be2"},{"location":"problem/11/3/#201709-3-json","text":"","title":"201709-3 JSON\u67e5\u8be2"},{"location":"problem/11/3/#_1","text":"201709-3 JSON\u67e5\u8be2","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/11/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/11/4/","text":"201709-4 \u901a\u4fe1\u7f51\u7edc \u9898\u76ee\u94fe\u63a5 201709-4 \u901a\u4fe1\u7f51\u7edc \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201709-4 \u901a\u4fe1\u7f51\u7edc"},{"location":"problem/11/4/#201709-4","text":"","title":"201709-4 \u901a\u4fe1\u7f51\u7edc"},{"location":"problem/11/4/#_1","text":"201709-4 \u901a\u4fe1\u7f51\u7edc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/11/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/11/5/","text":"201709-5 \u9664\u6cd5 \u9898\u76ee\u94fe\u63a5 201709-5 \u9664\u6cd5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201709-5 \u9664\u6cd5"},{"location":"problem/11/5/#201709-5","text":"","title":"201709-5 \u9664\u6cd5"},{"location":"problem/11/5/#_1","text":"201709-5 \u9664\u6cd5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/11/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/12/","text":"\u7b2c 12 \u6b21\uff082017 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201712-1 \u6700\u5c0f\u5dee\u503c \u94fe\u63a5 201712-2 \u6e38\u620f \u94fe\u63a5 201712-3 Crontab \u94fe\u63a5 201712-4 \u884c\u8f66\u8def\u7ebf \u94fe\u63a5 201712-5 \u5546\u8def \u94fe\u63a5","title":"\u7b2c 12 \u6b21\uff082017 \u5e74 12 \u6708\uff09"},{"location":"problem/12/#12-2017-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201712-1 \u6700\u5c0f\u5dee\u503c \u94fe\u63a5 201712-2 \u6e38\u620f \u94fe\u63a5 201712-3 Crontab \u94fe\u63a5 201712-4 \u884c\u8f66\u8def\u7ebf \u94fe\u63a5 201712-5 \u5546\u8def \u94fe\u63a5","title":"\u7b2c 12 \u6b21\uff082017 \u5e74 12 \u6708\uff09"},{"location":"problem/12/1/","text":"201712-1 \u6700\u5c0f\u5dee\u503c \u9898\u76ee\u94fe\u63a5 201712-1 \u6700\u5c0f\u5dee\u503c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201712-1 \u6700\u5c0f\u5dee\u503c"},{"location":"problem/12/1/#201712-1","text":"","title":"201712-1 \u6700\u5c0f\u5dee\u503c"},{"location":"problem/12/1/#_1","text":"201712-1 \u6700\u5c0f\u5dee\u503c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/12/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/12/2/","text":"201712-2 \u6e38\u620f \u9898\u76ee\u94fe\u63a5 201712-2 \u6e38\u620f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201712-2 \u6e38\u620f"},{"location":"problem/12/2/#201712-2","text":"","title":"201712-2 \u6e38\u620f"},{"location":"problem/12/2/#_1","text":"201712-2 \u6e38\u620f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/12/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/12/3/","text":"201712-3 Crontab \u9898\u76ee\u94fe\u63a5 201712-3 Crontab \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201712-3 Crontab"},{"location":"problem/12/3/#201712-3-crontab","text":"","title":"201712-3 Crontab"},{"location":"problem/12/3/#_1","text":"201712-3 Crontab","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/12/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/12/4/","text":"201712-4 \u884c\u8f66\u8def\u7ebf \u9898\u76ee\u94fe\u63a5 201712-4 \u884c\u8f66\u8def\u7ebf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201712-4 \u884c\u8f66\u8def\u7ebf"},{"location":"problem/12/4/#201712-4","text":"","title":"201712-4 \u884c\u8f66\u8def\u7ebf"},{"location":"problem/12/4/#_1","text":"201712-4 \u884c\u8f66\u8def\u7ebf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/12/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/12/5/","text":"201712-5 \u5546\u8def \u9898\u76ee\u94fe\u63a5 201712-5 \u5546\u8def \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201712-5 \u5546\u8def"},{"location":"problem/12/5/#201712-5","text":"","title":"201712-5 \u5546\u8def"},{"location":"problem/12/5/#_1","text":"201712-5 \u5546\u8def","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/12/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/13/","text":"\u7b2c 13 \u6b21\uff082018 \u5e74 3 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201803-1 \u8df3\u4e00\u8df3 \u94fe\u63a5 201803-2 \u78b0\u649e\u7684\u5c0f\u7403 \u94fe\u63a5 201803-3 URL\u6620\u5c04 \u94fe\u63a5 201803-4 \u68cb\u5c40\u8bc4\u4f30 \u94fe\u63a5 201803-5 \u4e8c\u6b21\u6c42\u548c \u94fe\u63a5","title":"\u7b2c 13 \u6b21\uff082018 \u5e74 3 \u6708\uff09"},{"location":"problem/13/#13-2018-3","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201803-1 \u8df3\u4e00\u8df3 \u94fe\u63a5 201803-2 \u78b0\u649e\u7684\u5c0f\u7403 \u94fe\u63a5 201803-3 URL\u6620\u5c04 \u94fe\u63a5 201803-4 \u68cb\u5c40\u8bc4\u4f30 \u94fe\u63a5 201803-5 \u4e8c\u6b21\u6c42\u548c \u94fe\u63a5","title":"\u7b2c 13 \u6b21\uff082018 \u5e74 3 \u6708\uff09"},{"location":"problem/13/1/","text":"201803-1 \u8df3\u4e00\u8df3 \u9898\u76ee\u94fe\u63a5 201803-1 \u8df3\u4e00\u8df3 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201803-1 \u8df3\u4e00\u8df3"},{"location":"problem/13/1/#201803-1","text":"","title":"201803-1 \u8df3\u4e00\u8df3"},{"location":"problem/13/1/#_1","text":"201803-1 \u8df3\u4e00\u8df3","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/13/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/13/2/","text":"201803-2 \u78b0\u649e\u7684\u5c0f\u7403 \u9898\u76ee\u94fe\u63a5 201803-2 \u78b0\u649e\u7684\u5c0f\u7403 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201803-2 \u78b0\u649e\u7684\u5c0f\u7403"},{"location":"problem/13/2/#201803-2","text":"","title":"201803-2 \u78b0\u649e\u7684\u5c0f\u7403"},{"location":"problem/13/2/#_1","text":"201803-2 \u78b0\u649e\u7684\u5c0f\u7403","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/13/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/13/3/","text":"201803-3 URL\u6620\u5c04 \u9898\u76ee\u94fe\u63a5 201803-3 URL\u6620\u5c04 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201803-3 URL\u6620\u5c04"},{"location":"problem/13/3/#201803-3-url","text":"","title":"201803-3 URL\u6620\u5c04"},{"location":"problem/13/3/#_1","text":"201803-3 URL\u6620\u5c04","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/13/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/13/4/","text":"201803-4 \u68cb\u5c40\u8bc4\u4f30 \u9898\u76ee\u94fe\u63a5 201803-4 \u68cb\u5c40\u8bc4\u4f30 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201803-4 \u68cb\u5c40\u8bc4\u4f30"},{"location":"problem/13/4/#201803-4","text":"","title":"201803-4 \u68cb\u5c40\u8bc4\u4f30"},{"location":"problem/13/4/#_1","text":"201803-4 \u68cb\u5c40\u8bc4\u4f30","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/13/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/13/5/","text":"201803-5 \u4e8c\u6b21\u6c42\u548c \u9898\u76ee\u94fe\u63a5 201803-5 \u4e8c\u6b21\u6c42\u548c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201803-5 \u4e8c\u6b21\u6c42\u548c"},{"location":"problem/13/5/#201803-5","text":"","title":"201803-5 \u4e8c\u6b21\u6c42\u548c"},{"location":"problem/13/5/#_1","text":"201803-5 \u4e8c\u6b21\u6c42\u548c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/13/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/14/","text":"\u7b2c 14 \u6b21\uff082018 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201809-1 \u5356\u83dc \u94fe\u63a5 201809-2 \u4e70\u83dc \u94fe\u63a5 201809-3 \u5143\u7d20\u9009\u62e9\u5668 \u94fe\u63a5 201809-4 \u518d\u5356\u83dc \u94fe\u63a5 201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f \u94fe\u63a5","title":"\u7b2c 14 \u6b21\uff082018 \u5e74 9 \u6708\uff09"},{"location":"problem/14/#14-2018-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201809-1 \u5356\u83dc \u94fe\u63a5 201809-2 \u4e70\u83dc \u94fe\u63a5 201809-3 \u5143\u7d20\u9009\u62e9\u5668 \u94fe\u63a5 201809-4 \u518d\u5356\u83dc \u94fe\u63a5 201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f \u94fe\u63a5","title":"\u7b2c 14 \u6b21\uff082018 \u5e74 9 \u6708\uff09"},{"location":"problem/14/1/","text":"201809-1 \u5356\u83dc \u9898\u76ee\u94fe\u63a5 201809-1 \u5356\u83dc \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201809-1 \u5356\u83dc"},{"location":"problem/14/1/#201809-1","text":"","title":"201809-1 \u5356\u83dc"},{"location":"problem/14/1/#_1","text":"201809-1 \u5356\u83dc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/14/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/14/2/","text":"201809-2 \u4e70\u83dc \u9898\u76ee\u94fe\u63a5 201809-2 \u4e70\u83dc \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201809-2 \u4e70\u83dc"},{"location":"problem/14/2/#201809-2","text":"","title":"201809-2 \u4e70\u83dc"},{"location":"problem/14/2/#_1","text":"201809-2 \u4e70\u83dc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/14/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/14/3/","text":"201809-3 \u5143\u7d20\u9009\u62e9\u5668 \u9898\u76ee\u94fe\u63a5 201809-3 \u5143\u7d20\u9009\u62e9\u5668 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201809-3 \u5143\u7d20\u9009\u62e9\u5668"},{"location":"problem/14/3/#201809-3","text":"","title":"201809-3 \u5143\u7d20\u9009\u62e9\u5668"},{"location":"problem/14/3/#_1","text":"201809-3 \u5143\u7d20\u9009\u62e9\u5668","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/14/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/14/4/","text":"201809-4 \u518d\u5356\u83dc \u9898\u76ee\u94fe\u63a5 201809-4 \u518d\u5356\u83dc \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201809-4 \u518d\u5356\u83dc"},{"location":"problem/14/4/#201809-4","text":"","title":"201809-4 \u518d\u5356\u83dc"},{"location":"problem/14/4/#_1","text":"201809-4 \u518d\u5356\u83dc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/14/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/14/5/","text":"201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f \u9898\u76ee\u94fe\u63a5 201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f"},{"location":"problem/14/5/#201809-5","text":"","title":"201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f"},{"location":"problem/14/5/#_1","text":"201809-5 \u7ebf\u6027\u9012\u63a8\u5f0f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/14/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/15/","text":"\u7b2c 15 \u6b21\uff082018 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201812-1 \u5c0f\u660e\u4e0a\u5b66 \u94fe\u63a5 201812-2 \u5c0f\u660e\u653e\u5b66 \u94fe\u63a5 201812-3 CIDR\u5408\u5e76 \u94fe\u63a5 201812-4 \u6570\u636e\u4e2d\u5fc3 \u94fe\u63a5 201812-5 \u7ba1\u9053\u6e05\u6d01 \u94fe\u63a5","title":"\u7b2c 15 \u6b21\uff082018 \u5e74 12 \u6708\uff09"},{"location":"problem/15/#15-2018-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201812-1 \u5c0f\u660e\u4e0a\u5b66 \u94fe\u63a5 201812-2 \u5c0f\u660e\u653e\u5b66 \u94fe\u63a5 201812-3 CIDR\u5408\u5e76 \u94fe\u63a5 201812-4 \u6570\u636e\u4e2d\u5fc3 \u94fe\u63a5 201812-5 \u7ba1\u9053\u6e05\u6d01 \u94fe\u63a5","title":"\u7b2c 15 \u6b21\uff082018 \u5e74 12 \u6708\uff09"},{"location":"problem/15/1/","text":"201812-1 \u5c0f\u660e\u4e0a\u5b66 \u9898\u76ee\u94fe\u63a5 201812-1 \u5c0f\u660e\u4e0a\u5b66 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201812-1 \u5c0f\u660e\u4e0a\u5b66"},{"location":"problem/15/1/#201812-1","text":"","title":"201812-1 \u5c0f\u660e\u4e0a\u5b66"},{"location":"problem/15/1/#_1","text":"201812-1 \u5c0f\u660e\u4e0a\u5b66","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/15/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/15/2/","text":"201812-2 \u5c0f\u660e\u653e\u5b66 \u9898\u76ee\u94fe\u63a5 201812-2 \u5c0f\u660e\u653e\u5b66 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201812-2 \u5c0f\u660e\u653e\u5b66"},{"location":"problem/15/2/#201812-2","text":"","title":"201812-2 \u5c0f\u660e\u653e\u5b66"},{"location":"problem/15/2/#_1","text":"201812-2 \u5c0f\u660e\u653e\u5b66","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/15/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/15/3/","text":"201812-3 CIDR\u5408\u5e76 \u9898\u76ee\u94fe\u63a5 201812-3 CIDR\u5408\u5e76 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201812-3 CIDR\u5408\u5e76"},{"location":"problem/15/3/#201812-3-cidr","text":"","title":"201812-3 CIDR\u5408\u5e76"},{"location":"problem/15/3/#_1","text":"201812-3 CIDR\u5408\u5e76","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/15/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/15/4/","text":"201812-4 \u6570\u636e\u4e2d\u5fc3 \u9898\u76ee\u94fe\u63a5 201812-4 \u6570\u636e\u4e2d\u5fc3 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201812-4 \u6570\u636e\u4e2d\u5fc3"},{"location":"problem/15/4/#201812-4","text":"","title":"201812-4 \u6570\u636e\u4e2d\u5fc3"},{"location":"problem/15/4/#_1","text":"201812-4 \u6570\u636e\u4e2d\u5fc3","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/15/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/15/5/","text":"201812-5 \u7ba1\u9053\u6e05\u6d01 \u9898\u76ee\u94fe\u63a5 201812-5 \u7ba1\u9053\u6e05\u6d01 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201812-5 \u7ba1\u9053\u6e05\u6d01"},{"location":"problem/15/5/#201812-5","text":"","title":"201812-5 \u7ba1\u9053\u6e05\u6d01"},{"location":"problem/15/5/#_1","text":"201812-5 \u7ba1\u9053\u6e05\u6d01","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/15/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/16/","text":"\u7b2c 16 \u6b21\uff082019 \u5e74 3 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201903-1 \u5c0f\u4e2d\u5927 \u94fe\u63a5 201903-2 \u4e8c\u5341\u56db\u70b9 \u94fe\u63a5 201903-3 \u635f\u574f\u7684RAID5 \u94fe\u63a5 201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 \u94fe\u63a5 201903-5 317\u53f7\u5b50\u4efb\u52a1 \u94fe\u63a5","title":"\u7b2c 16 \u6b21\uff082019 \u5e74 3 \u6708\uff09"},{"location":"problem/16/#16-2019-3","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201903-1 \u5c0f\u4e2d\u5927 \u94fe\u63a5 201903-2 \u4e8c\u5341\u56db\u70b9 \u94fe\u63a5 201903-3 \u635f\u574f\u7684RAID5 \u94fe\u63a5 201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 \u94fe\u63a5 201903-5 317\u53f7\u5b50\u4efb\u52a1 \u94fe\u63a5","title":"\u7b2c 16 \u6b21\uff082019 \u5e74 3 \u6708\uff09"},{"location":"problem/16/1/","text":"201903-1 \u5c0f\u4e2d\u5927 \u9898\u76ee\u94fe\u63a5 201903-1 \u5c0f\u4e2d\u5927 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201903-1 \u5c0f\u4e2d\u5927"},{"location":"problem/16/1/#201903-1","text":"","title":"201903-1 \u5c0f\u4e2d\u5927"},{"location":"problem/16/1/#_1","text":"201903-1 \u5c0f\u4e2d\u5927","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/16/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/16/2/","text":"201903-2 \u4e8c\u5341\u56db\u70b9 \u9898\u76ee\u94fe\u63a5 201903-2 \u4e8c\u5341\u56db\u70b9 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201903-2 \u4e8c\u5341\u56db\u70b9"},{"location":"problem/16/2/#201903-2","text":"","title":"201903-2 \u4e8c\u5341\u56db\u70b9"},{"location":"problem/16/2/#_1","text":"201903-2 \u4e8c\u5341\u56db\u70b9","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/16/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/16/3/","text":"201903-3 \u635f\u574f\u7684RAID5 \u9898\u76ee\u94fe\u63a5 201903-3 \u635f\u574f\u7684RAID5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201903-3 \u635f\u574f\u7684RAID5"},{"location":"problem/16/3/#201903-3-raid5","text":"","title":"201903-3 \u635f\u574f\u7684RAID5"},{"location":"problem/16/3/#_1","text":"201903-3 \u635f\u574f\u7684RAID5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/16/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/16/4/","text":"201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 \u9898\u76ee\u94fe\u63a5 201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3"},{"location":"problem/16/4/#201903-4","text":"","title":"201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3"},{"location":"problem/16/4/#_1","text":"201903-4 \u6d88\u606f\u4f20\u9012\u63a5\u53e3","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/16/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/16/5/","text":"201903-5 317\u53f7\u5b50\u4efb\u52a1 \u9898\u76ee\u94fe\u63a5 201903-5 317\u53f7\u5b50\u4efb\u52a1 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201903-5 317\u53f7\u5b50\u4efb\u52a1"},{"location":"problem/16/5/#201903-5-317","text":"","title":"201903-5 317\u53f7\u5b50\u4efb\u52a1"},{"location":"problem/16/5/#_1","text":"201903-5 317\u53f7\u5b50\u4efb\u52a1","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/16/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/17/","text":"\u7b2c 17 \u6b21\uff082019 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201909-1 \u5c0f\u660e\u79cd\u82f9\u679c \u94fe\u63a5 201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u94fe\u63a5 201909-3 \u5b57\u7b26\u753b \u94fe\u63a5 201909-4 \u63a8\u8350\u7cfb\u7edf \u94fe\u63a5 201909-5 \u57ce\u5e02\u89c4\u5212 \u94fe\u63a5","title":"\u7b2c 17 \u6b21\uff082019 \u5e74 9 \u6708\uff09"},{"location":"problem/17/#17-2019-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201909-1 \u5c0f\u660e\u79cd\u82f9\u679c \u94fe\u63a5 201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u94fe\u63a5 201909-3 \u5b57\u7b26\u753b \u94fe\u63a5 201909-4 \u63a8\u8350\u7cfb\u7edf \u94fe\u63a5 201909-5 \u57ce\u5e02\u89c4\u5212 \u94fe\u63a5","title":"\u7b2c 17 \u6b21\uff082019 \u5e74 9 \u6708\uff09"},{"location":"problem/17/1/","text":"201909-1 \u5c0f\u660e\u79cd\u82f9\u679c \u9898\u76ee\u94fe\u63a5 201909-1 \u5c0f\u660e\u79cd\u82f9\u679c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201909-1 \u5c0f\u660e\u79cd\u82f9\u679c"},{"location":"problem/17/1/#201909-1","text":"","title":"201909-1 \u5c0f\u660e\u79cd\u82f9\u679c"},{"location":"problem/17/1/#_1","text":"201909-1 \u5c0f\u660e\u79cd\u82f9\u679c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/17/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/17/2/","text":"201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u9898\u76ee\u94fe\u63a5 201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09"},{"location":"problem/17/2/#201909-2","text":"","title":"201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09"},{"location":"problem/17/2/#_1","text":"201909-2 \u5c0f\u660e\u79cd\u82f9\u679c\uff08\u7eed\uff09","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/17/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/17/3/","text":"201909-3 \u5b57\u7b26\u753b \u9898\u76ee\u94fe\u63a5 201909-3 \u5b57\u7b26\u753b \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201909-3 \u5b57\u7b26\u753b"},{"location":"problem/17/3/#201909-3","text":"","title":"201909-3 \u5b57\u7b26\u753b"},{"location":"problem/17/3/#_1","text":"201909-3 \u5b57\u7b26\u753b","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/17/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/17/4/","text":"201909-4 \u63a8\u8350\u7cfb\u7edf \u9898\u76ee\u94fe\u63a5 201909-4 \u63a8\u8350\u7cfb\u7edf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201909-4 \u63a8\u8350\u7cfb\u7edf"},{"location":"problem/17/4/#201909-4","text":"","title":"201909-4 \u63a8\u8350\u7cfb\u7edf"},{"location":"problem/17/4/#_1","text":"201909-4 \u63a8\u8350\u7cfb\u7edf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/17/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/17/5/","text":"201909-5 \u57ce\u5e02\u89c4\u5212 \u9898\u76ee\u94fe\u63a5 201909-5 \u57ce\u5e02\u89c4\u5212 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201909-5 \u57ce\u5e02\u89c4\u5212"},{"location":"problem/17/5/#201909-5","text":"","title":"201909-5 \u57ce\u5e02\u89c4\u5212"},{"location":"problem/17/5/#_1","text":"201909-5 \u57ce\u5e02\u89c4\u5212","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/17/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/18/","text":"\u7b2c 18 \u6b21\uff082019 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201912-1 \u62a5\u6570 \u94fe\u63a5 201912-2 \u56de\u6536\u7ad9\u9009\u5740 \u94fe\u63a5 201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f \u94fe\u63a5 201912-4 \u533a\u5757\u94fe \u94fe\u63a5 201912-5 \u9b54\u6570 \u94fe\u63a5","title":"\u7b2c 18 \u6b21\uff082019 \u5e74 12 \u6708\uff09"},{"location":"problem/18/#18-2019-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201912-1 \u62a5\u6570 \u94fe\u63a5 201912-2 \u56de\u6536\u7ad9\u9009\u5740 \u94fe\u63a5 201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f \u94fe\u63a5 201912-4 \u533a\u5757\u94fe \u94fe\u63a5 201912-5 \u9b54\u6570 \u94fe\u63a5","title":"\u7b2c 18 \u6b21\uff082019 \u5e74 12 \u6708\uff09"},{"location":"problem/18/1/","text":"201912-1 \u62a5\u6570 \u9898\u76ee\u94fe\u63a5 201912-1 \u62a5\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201912-1 \u62a5\u6570"},{"location":"problem/18/1/#201912-1","text":"","title":"201912-1 \u62a5\u6570"},{"location":"problem/18/1/#_1","text":"201912-1 \u62a5\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/18/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/18/2/","text":"201912-2 \u56de\u6536\u7ad9\u9009\u5740 \u9898\u76ee\u94fe\u63a5 201912-2 \u56de\u6536\u7ad9\u9009\u5740 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201912-2 \u56de\u6536\u7ad9\u9009\u5740"},{"location":"problem/18/2/#201912-2","text":"","title":"201912-2 \u56de\u6536\u7ad9\u9009\u5740"},{"location":"problem/18/2/#_1","text":"201912-2 \u56de\u6536\u7ad9\u9009\u5740","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/18/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/18/3/","text":"201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f \u9898\u76ee\u94fe\u63a5 201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f"},{"location":"problem/18/3/#201912-3","text":"","title":"201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f"},{"location":"problem/18/3/#_1","text":"201912-3 \u5316\u5b66\u65b9\u7a0b\u5f0f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/18/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/18/4/","text":"201912-4 \u533a\u5757\u94fe \u9898\u76ee\u94fe\u63a5 201912-4 \u533a\u5757\u94fe \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201912-4 \u533a\u5757\u94fe"},{"location":"problem/18/4/#201912-4","text":"","title":"201912-4 \u533a\u5757\u94fe"},{"location":"problem/18/4/#_1","text":"201912-4 \u533a\u5757\u94fe","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/18/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/18/5/","text":"201912-5 \u9b54\u6570 \u9898\u76ee\u94fe\u63a5 201912-5 \u9b54\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201912-5 \u9b54\u6570"},{"location":"problem/18/5/#201912-5","text":"","title":"201912-5 \u9b54\u6570"},{"location":"problem/18/5/#_1","text":"201912-5 \u9b54\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/18/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/19/","text":"\u7b2c 19 \u6b21\uff082020 \u5e74 6 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202006-1 \u7ebf\u6027\u5206\u7c7b\u5668 \u94fe\u63a5 202006-2 \u7a00\u758f\u5411\u91cf \u94fe\u63a5 202006-3 Markdown\u6e32\u67d3\u5668 \u94fe\u63a5 202006-4 1246 \u94fe\u63a5 202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02 \u94fe\u63a5","title":"\u7b2c 19 \u6b21\uff082020 \u5e74 6 \u6708\uff09"},{"location":"problem/19/#19-2020-6","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202006-1 \u7ebf\u6027\u5206\u7c7b\u5668 \u94fe\u63a5 202006-2 \u7a00\u758f\u5411\u91cf \u94fe\u63a5 202006-3 Markdown\u6e32\u67d3\u5668 \u94fe\u63a5 202006-4 1246 \u94fe\u63a5 202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02 \u94fe\u63a5","title":"\u7b2c 19 \u6b21\uff082020 \u5e74 6 \u6708\uff09"},{"location":"problem/19/1/","text":"202006-1 \u7ebf\u6027\u5206\u7c7b\u5668 \u9898\u76ee\u94fe\u63a5 202006-1 \u7ebf\u6027\u5206\u7c7b\u5668 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202006-1 \u7ebf\u6027\u5206\u7c7b\u5668"},{"location":"problem/19/1/#202006-1","text":"","title":"202006-1 \u7ebf\u6027\u5206\u7c7b\u5668"},{"location":"problem/19/1/#_1","text":"202006-1 \u7ebf\u6027\u5206\u7c7b\u5668","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/19/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/19/2/","text":"202006-2 \u7a00\u758f\u5411\u91cf \u9898\u76ee\u94fe\u63a5 202006-2 \u7a00\u758f\u5411\u91cf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202006-2 \u7a00\u758f\u5411\u91cf"},{"location":"problem/19/2/#202006-2","text":"","title":"202006-2 \u7a00\u758f\u5411\u91cf"},{"location":"problem/19/2/#_1","text":"202006-2 \u7a00\u758f\u5411\u91cf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/19/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/19/3/","text":"202006-3 Markdown\u6e32\u67d3\u5668 \u9898\u76ee\u94fe\u63a5 202006-3 Markdown\u6e32\u67d3\u5668 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202006-3 Markdown\u6e32\u67d3\u5668"},{"location":"problem/19/3/#202006-3-markdown","text":"","title":"202006-3 Markdown\u6e32\u67d3\u5668"},{"location":"problem/19/3/#_1","text":"202006-3 Markdown\u6e32\u67d3\u5668","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/19/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/19/4/","text":"202006-4 1246 \u9898\u76ee\u94fe\u63a5 202006-4 1246 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202006-4 1246"},{"location":"problem/19/4/#202006-4-1246","text":"","title":"202006-4 1246"},{"location":"problem/19/4/#_1","text":"202006-4 1246","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/19/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/19/5/","text":"202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02 \u9898\u76ee\u94fe\u63a5 202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02"},{"location":"problem/19/5/#202006-5","text":"","title":"202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02"},{"location":"problem/19/5/#_1","text":"202006-5 \u4e54\u4e54\u548c\u725b\u725b\u901b\u8d85\u5e02","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/19/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/2/","text":"\u7b2c 2 \u6b21\uff082014 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201409-1 \u76f8\u90bb\u6570\u5bf9 \u94fe\u63a5 201409-2 \u753b\u56fe \u94fe\u63a5 201409-3 \u5b57\u7b26\u4e32\u5339\u914d \u94fe\u63a5 201409-4 \u6700\u4f18\u914d\u9910 \u94fe\u63a5 201409-5 \u62fc\u56fe \u94fe\u63a5","title":"\u7b2c 2 \u6b21\uff082014 \u5e74 9 \u6708\uff09"},{"location":"problem/2/#2-2014-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201409-1 \u76f8\u90bb\u6570\u5bf9 \u94fe\u63a5 201409-2 \u753b\u56fe \u94fe\u63a5 201409-3 \u5b57\u7b26\u4e32\u5339\u914d \u94fe\u63a5 201409-4 \u6700\u4f18\u914d\u9910 \u94fe\u63a5 201409-5 \u62fc\u56fe \u94fe\u63a5","title":"\u7b2c 2 \u6b21\uff082014 \u5e74 9 \u6708\uff09"},{"location":"problem/2/1/","text":"201409-1 \u76f8\u90bb\u6570\u5bf9 \u9898\u76ee\u94fe\u63a5 201409-1 \u76f8\u90bb\u6570\u5bf9 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201409-1 \u76f8\u90bb\u6570\u5bf9"},{"location":"problem/2/1/#201409-1","text":"","title":"201409-1 \u76f8\u90bb\u6570\u5bf9"},{"location":"problem/2/1/#_1","text":"201409-1 \u76f8\u90bb\u6570\u5bf9","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/2/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/2/2/","text":"201409-2 \u753b\u56fe \u9898\u76ee\u94fe\u63a5 201409-2 \u753b\u56fe \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201409-2 \u753b\u56fe"},{"location":"problem/2/2/#201409-2","text":"","title":"201409-2 \u753b\u56fe"},{"location":"problem/2/2/#_1","text":"201409-2 \u753b\u56fe","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/2/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/2/3/","text":"201409-3 \u5b57\u7b26\u4e32\u5339\u914d \u9898\u76ee\u94fe\u63a5 201409-3 \u5b57\u7b26\u4e32\u5339\u914d \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201409-3 \u5b57\u7b26\u4e32\u5339\u914d"},{"location":"problem/2/3/#201409-3","text":"","title":"201409-3 \u5b57\u7b26\u4e32\u5339\u914d"},{"location":"problem/2/3/#_1","text":"201409-3 \u5b57\u7b26\u4e32\u5339\u914d","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/2/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/2/4/","text":"201409-4 \u6700\u4f18\u914d\u9910 \u9898\u76ee\u94fe\u63a5 201409-4 \u6700\u4f18\u914d\u9910 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201409-4 \u6700\u4f18\u914d\u9910"},{"location":"problem/2/4/#201409-4","text":"","title":"201409-4 \u6700\u4f18\u914d\u9910"},{"location":"problem/2/4/#_1","text":"201409-4 \u6700\u4f18\u914d\u9910","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/2/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/2/5/","text":"201409-5 \u62fc\u56fe \u9898\u76ee\u94fe\u63a5 201409-5 \u62fc\u56fe \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201409-5 \u62fc\u56fe"},{"location":"problem/2/5/#201409-5","text":"","title":"201409-5 \u62fc\u56fe"},{"location":"problem/2/5/#_1","text":"201409-5 \u62fc\u56fe","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/2/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/20/","text":"\u7b2c 20 \u6b21\uff082020 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u94fe\u63a5 202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u94fe\u63a5 202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u94fe\u63a5 202009-4 \u661f\u9645\u65c5\u884c \u94fe\u63a5 202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570 \u94fe\u63a5","title":"\u7b2c 20 \u6b21\uff082020 \u5e74 9 \u6708\uff09"},{"location":"problem/20/#20-2020-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u94fe\u63a5 202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u94fe\u63a5 202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u94fe\u63a5 202009-4 \u661f\u9645\u65c5\u884c \u94fe\u63a5 202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570 \u94fe\u63a5","title":"\u7b2c 20 \u6b21\uff082020 \u5e74 9 \u6708\uff09"},{"location":"problem/20/1/","text":"202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u9898\u76ee\u94fe\u63a5 202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2"},{"location":"problem/20/1/#202009-1","text":"","title":"202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2"},{"location":"problem/20/1/#_1","text":"202009-1 \u79f0\u68c0\u6d4b\u70b9\u67e5\u8be2","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/20/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/20/2/","text":"202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u9898\u76ee\u94fe\u63a5 202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5"},{"location":"problem/20/2/#202009-2","text":"","title":"202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5"},{"location":"problem/20/2/#_1","text":"202009-2 \u98ce\u9669\u4eba\u7fa4\u7b5b\u67e5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/20/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/20/3/","text":"202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u9898\u76ee\u94fe\u63a5 202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f"},{"location":"problem/20/3/#202009-3","text":"","title":"202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f"},{"location":"problem/20/3/#_1","text":"202009-3 \u70b9\u4eae\u6570\u5b57\u4eba\u751f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/20/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/20/4/","text":"202009-4 \u661f\u9645\u65c5\u884c \u9898\u76ee\u94fe\u63a5 202009-4 \u661f\u9645\u65c5\u884c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202009-4 \u661f\u9645\u65c5\u884c"},{"location":"problem/20/4/#202009-4","text":"","title":"202009-4 \u661f\u9645\u65c5\u884c"},{"location":"problem/20/4/#_1","text":"202009-4 \u661f\u9645\u65c5\u884c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/20/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/20/5/","text":"202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570 \u9898\u76ee\u94fe\u63a5 202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570"},{"location":"problem/20/5/#202009-5","text":"","title":"202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570"},{"location":"problem/20/5/#_1","text":"202009-5 \u5bc6\u4fe1\u4e0e\u8ba1\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/20/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/21/","text":"\u7b2c 21 \u6b21\uff082020 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u94fe\u63a5 202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u94fe\u63a5 202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u94fe\u63a5 202012-4 \u98df\u6750\u8fd0\u8f93 \u94fe\u63a5 202012-5 \u661f\u9645\u65c5\u884c \u94fe\u63a5","title":"\u7b2c 21 \u6b21\uff082020 \u5e74 12 \u6708\uff09"},{"location":"problem/21/#21-2020-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u94fe\u63a5 202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u94fe\u63a5 202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u94fe\u63a5 202012-4 \u98df\u6750\u8fd0\u8f93 \u94fe\u63a5 202012-5 \u661f\u9645\u65c5\u884c \u94fe\u63a5","title":"\u7b2c 21 \u6b21\uff082020 \u5e74 12 \u6708\uff09"},{"location":"problem/21/1/","text":"202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u9898\u76ee\u94fe\u63a5 202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570"},{"location":"problem/21/1/#202012-1","text":"","title":"202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570"},{"location":"problem/21/1/#_1","text":"202012-1 \u671f\u672b\u9884\u6d4b\u4e4b\u5b89\u5168\u6307\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/21/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/21/2/","text":"202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u9898\u76ee\u94fe\u63a5 202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c"},{"location":"problem/21/2/#202012-2","text":"","title":"202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c"},{"location":"problem/21/2/#_1","text":"202012-2 \u671f\u672b\u9884\u6d4b\u4e4b\u6700\u4f73\u9608\u503c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/21/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/21/3/","text":"202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u9898\u76ee\u94fe\u63a5 202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf"},{"location":"problem/21/3/#202012-3","text":"","title":"202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf"},{"location":"problem/21/3/#_1","text":"202012-3 \u5e26\u914d\u989d\u7684\u6587\u4ef6\u7cfb\u7edf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/21/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/21/4/","text":"202012-4 \u98df\u6750\u8fd0\u8f93 \u9898\u76ee\u94fe\u63a5 202012-4 \u98df\u6750\u8fd0\u8f93 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202012-4 \u98df\u6750\u8fd0\u8f93"},{"location":"problem/21/4/#202012-4","text":"","title":"202012-4 \u98df\u6750\u8fd0\u8f93"},{"location":"problem/21/4/#_1","text":"202012-4 \u98df\u6750\u8fd0\u8f93","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/21/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/21/5/","text":"202012-5 \u661f\u9645\u65c5\u884c \u9898\u76ee\u94fe\u63a5 202012-5 \u661f\u9645\u65c5\u884c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"202012-5 \u661f\u9645\u65c5\u884c"},{"location":"problem/21/5/#202012-5","text":"","title":"202012-5 \u661f\u9645\u65c5\u884c"},{"location":"problem/21/5/#_1","text":"202012-5 \u661f\u9645\u65c5\u884c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/21/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/22/","text":"\u7b2c 22 \u6b21\uff082021 \u5e74 4 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe \u94fe\u63a5 202104-2 \u90bb\u57df\u5747\u503c \u94fe\u63a5 202104-3 DHCP\u670d\u52a1\u5668 \u94fe\u63a5 202104-4 \u6821\u95e8\u5916\u7684\u6811 \u94fe\u63a5 202104-5 \u75ab\u82d7\u8fd0\u8f93 \u94fe\u63a5","title":"\u7b2c 22 \u6b21\uff082021 \u5e74 4 \u6708\uff09"},{"location":"problem/22/#22-2021-4","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe \u94fe\u63a5 202104-2 \u90bb\u57df\u5747\u503c \u94fe\u63a5 202104-3 DHCP\u670d\u52a1\u5668 \u94fe\u63a5 202104-4 \u6821\u95e8\u5916\u7684\u6811 \u94fe\u63a5 202104-5 \u75ab\u82d7\u8fd0\u8f93 \u94fe\u63a5","title":"\u7b2c 22 \u6b21\uff082021 \u5e74 4 \u6708\uff09"},{"location":"problem/22/1/","text":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe \u9898\u76ee\u94fe\u63a5 202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5","title":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe"},{"location":"problem/22/1/#202104-1","text":"","title":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe"},{"location":"problem/22/1/#_1","text":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/22/1/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/22/1/1/","text":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe 100% \u6570\u636e\u2014\u2014\u6a21\u62df \u9898\u76ee\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u6700\u7ec8\u8f93\u51fa\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u51e0\u6b21\u3002 \u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <cstdio> #include <iostream> using namespace std ; const int maxn = 510 ; const int maxl = 256 ; int n , m , L ; int a [ maxn ][ maxn ]; int tot [ maxl ]; int main () { scanf ( \"%d%d%d\" , & n , & m , & L ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { ++ tot [ a [ i ][ j ]]; } } for ( int i = 0 ; i < L ; ++ i ) { printf ( \"%d \" , tot [ i ]); } return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), m = input . nextInt (), L = input . nextInt (); int [][] a = new int [ n ][ m ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { a [ i ][ j ] = input . nextInt (); } } input . close (); int [] tot = new int [ L ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { ++ tot [ a [ i ][ j ]] ; } } for ( int i = 0 ; i < L ; ++ i ) { System . out . printf ( \"%d \" , tot [ i ] ); } } } 1 2 3 4 5 6 7 8 9 10 n , m , L = map ( int , input () . strip () . split ()) a = [] for i in range ( n ): a . append ( list ( map ( int , input () . strip () . split ()))) tot = [ 0 for i in range ( L )] for i in range ( n ): for j in range ( m ): tot [ a [ i ][ j ]] += 1 for i in range ( L ): print ( tot [ i ], end = \" \" )","title":"\u6587\u7ae0 1"},{"location":"problem/22/1/1/#202104-1","text":"","title":"202104-1 \u7070\u5ea6\u76f4\u65b9\u56fe"},{"location":"problem/22/1/1/#100","text":"\u9898\u76ee\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u6700\u7ec8\u8f93\u51fa\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u51e0\u6b21\u3002 \u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <cstdio> #include <iostream> using namespace std ; const int maxn = 510 ; const int maxl = 256 ; int n , m , L ; int a [ maxn ][ maxn ]; int tot [ maxl ]; int main () { scanf ( \"%d%d%d\" , & n , & m , & L ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { ++ tot [ a [ i ][ j ]]; } } for ( int i = 0 ; i < L ; ++ i ) { printf ( \"%d \" , tot [ i ]); } return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), m = input . nextInt (), L = input . nextInt (); int [][] a = new int [ n ][ m ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { a [ i ][ j ] = input . nextInt (); } } input . close (); int [] tot = new int [ L ] ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { ++ tot [ a [ i ][ j ]] ; } } for ( int i = 0 ; i < L ; ++ i ) { System . out . printf ( \"%d \" , tot [ i ] ); } } } 1 2 3 4 5 6 7 8 9 10 n , m , L = map ( int , input () . strip () . split ()) a = [] for i in range ( n ): a . append ( list ( map ( int , input () . strip () . split ()))) tot = [ 0 for i in range ( L )] for i in range ( n ): for j in range ( m ): tot [ a [ i ][ j ]] += 1 for i in range ( L ): print ( tot [ i ], end = \" \" )","title":"100% \u6570\u636e\u2014\u2014\u6a21\u62df"},{"location":"problem/22/2/","text":"202104-2 \u90bb\u57df\u5747\u503c \u9898\u76ee\u94fe\u63a5 202104-2 \u90bb\u57df\u5747\u503c \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n\u2264100,r\u226410 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u7531\u76f8\u90bb\u90bb\u57df\u5747\u503c\u63a8\u5bfc C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u4e8c\u7ef4\u524d\u7f00\u548c C++ \u9898\u89e3\u94fe\u63a5","title":"202104-2 \u90bb\u57df\u5747\u503c"},{"location":"problem/22/2/#202104-2","text":"","title":"202104-2 \u90bb\u57df\u5747\u503c"},{"location":"problem/22/2/#_1","text":"202104-2 \u90bb\u57df\u5747\u503c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/22/2/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n\u2264100,r\u226410 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u7531\u76f8\u90bb\u90bb\u57df\u5747\u503c\u63a8\u5bfc C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u4e8c\u7ef4\u524d\u7f00\u548c C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/22/2/1/","text":"202104-1 \u90bb\u57df\u5747\u503c 70% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df \u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u7b97\u51fa\u6bcf\u4e2a\u70b9\u7684\u90bb\u57df\u5747\u503c\uff0c\u7136\u540e\u76f4\u63a5\u7edf\u8ba1\u5373\u53ef\u3002 \u4e00\u5171\u6709 \\(\\mathrm{O}(n^2)\\) \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u590d\u6742\u5ea6 \\(\\mathrm{O}(r^2)\\) \uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2r^2)\\) \u3002 100% \u6570\u636e\u2014\u2014\u7531\u76f8\u90bb\u90bb\u57df\u5747\u503c\u63a8\u5bfc \u4e3a\u4e86\u7b80\u5316\u8bf4\u660e\u53ca\u907f\u514d\u9664\u6cd5\u7cbe\u5ea6\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u90bb\u57df\u5747\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(t\\) \u8f6c\u5316\u4e3a \u90bb\u57df\u503c\u7684\u603b\u548c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(t\\) \u4e0e\u5143\u7d20\u5408\u6570\u4e4b\u79ef \u3002 \u8003\u8651\u5728 70 \u5206\u7684\u505a\u6cd5\u4e2d\u4ec0\u4e48\u5730\u65b9\u6d6a\u8d39\u4e86\u65f6\u95f4\uff1a\u5728\u7edf\u8ba1\u5b8c\u4e00\u4e2a\u70b9\u7684\u90bb\u57df\u503c\u7684\u603b\u548c\u65f6\uff0c\u6211\u4eec\u5c31\u629b\u5f03\u4e86\u8fd9\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u5b8c\u5168\u91cd\u65b0\u8ba1\u7b97\u5176\u4ed6\u70b9\u7684\u90bb\u57df\u503c\u7684\u548c\u3002\u4f46\u5bf9\u4e8e\u76f8\u90bb\u7684\u70b9\uff0c\u5176\u90bb\u57df\u6709\u5f88\u5927\u9762\u79ef\u7684\u91cd\u5408\uff0c\u6700\u591a\u76f8\u5dee \\(2r\\) \u4e2a\u5143\u7d20\u3002 \u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\uff0c\u53ea\u9700\u8981\u5904\u7406\u8fd9 \\(2r\\) \u4e2a\u5143\u7d20\u7684\u66f4\u6539\u5373\u53ef\u3002 \u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u51fa\u7b2c\u4e00\u4e2a\u70b9\u7684\u90bb\u57df\u503c\u7684\u548c\u4e3a \\(\\mathrm{O}(r^2)\\) \uff0c\u4e00\u5171\u8981\u8fdb\u884c \\(n^2\\) \u6b21 \\(\\mathrm{O}(r)\\) \u7684\u4fee\u6539\uff0c\u6574\u4f53\u6bd4\u8f83\u590d\u6742\u5ea6 \\(n^2\\) \uff0c\u6700\u7ec8\u590d\u6742\u5ea6 \\(\\mathrm{O}(r^2+n^2r)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 610 ; int n , L , r , t ; int a [ maxn ][ maxn ], sum [ maxn ][ maxn ]; int ans ; inline int getSum ( int row1 , int col1 , int row2 , int col2 ) { // \u8ba1\u7b97\u4e00\u5757\u77e9\u9635\u533a\u95f4\u7684\u548c int res = 0 ; for ( int i = row1 ; i <= row2 ; ++ i ) { for ( int j = col1 ; j <= col2 ; ++ j ) { res += a [ i ][ j ]; } } return res ; } inline int getSize ( int x , int y ) { // \u8ba1\u7b97 (x,y) \u7684\u90bb\u57df\u5927\u5c0f int row1 = max ( x - r , 1 ), col1 = max ( y - r , 1 ); int row2 = min ( x + r , n ), col2 = min ( y + r , n ); return ( row2 - row1 + 1 ) * ( col2 - col1 + 1 ); } int main () { scanf ( \"%d%d%d%d\" , & n , & L , & r , & t ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } // \u6c42\u51fa sum[1][1] sum [ 1 ][ 1 ] = getSum ( 1 , 1 , min ( r + 1 , n ), min ( r + 1 , n )); // \u6c42\u51fa sum[1][2..n] for ( int j = 2 ; j <= n ; ++ j ) { sum [ 1 ][ j ] = sum [ 1 ][ j - 1 ]; // \u51cf\u53bb\u6700\u5de6\u4fa7\u4e00\u90e8\u5206 if ( j - 1 - r > 0 ) sum [ 1 ][ j ] -= getSum ( 1 , j - 1 - r , min ( r + 1 , n ), j - 1 - r ); // \u589e\u52a0\u53f3\u4fa7\u4e00\u90e8\u5206 if ( j + r <= n ) sum [ 1 ][ j ] += getSum ( 1 , j + r , min ( r + 1 , n ), j + r ); } // \u8ba1\u7b97\u5269\u4e0b\u90e8\u5206\uff0csum[i][j] \u7531 sum[i-1][j] \u8f6c\u79fb\u800c\u6765 for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { sum [ i ][ j ] = sum [ i - 1 ][ j ]; if ( i - 1 - r > 0 ) sum [ i ][ j ] -= getSum ( i - 1 - r , max ( j - r , 1 ), i - 1 - r , min ( j + r , n )); if ( i + r <= n ) sum [ i ][ j ] += getSum ( i + r , max ( j - r , 1 ), i + r , min ( j + r , n )); } } // \u7edf\u8ba1\u7b54\u6848 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( sum [ i ][ j ] <= t * getSize ( i , j )) ++ ans ; } } printf ( \"%d\" , ans ); return 0 ; } 100% \u6570\u636e\u2014\u2014\u4e8c\u7ef4\u524d\u7f00\u548c \u5bf9\u4e8e\u591a\u6b21\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u7684\u503c\uff0c\u5bb9\u6613\u60f3\u5230\u524d\u7f00\u548c\uff1b\u5982\u679c\u591a\u6b21\u8be2\u95ee\u4e8c\u7ef4\u533a\u95f4\u7684\u503c\uff0c\u9700\u8981\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u8bbe \\(S(x,y)= \\sum\\limits_{i=1}^{x}\\sum\\limits_{j=1}^{y}{a_{i,j}}\\) \uff0c\u5219 \\((x_1,y_1)\\) \u5230 \\((x_2,y_2)\\) \uff08 \\(x_2\\ge x_1, y_2\\ge y_1\\) \uff09\u7684\u548c\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[S(x_2,y_2) - S(x_1 - 1, y_2) - S(x_2, y_1 - 1) + S(x_1 - 1, y_1 - 1)\\] \u6211\u4eec\u53ef\u4ee5 \\(\\mathrm{O}(n^2)\\) \u9884\u5904\u7406\u51fa \\(S(x,y)\\) \u6570\u7ec4\uff0c\u4e4b\u540e\u5219\u53ef\u4ee5 \\(\\mathrm{O}(1)\\) \u67e5\u8be2\u5355\u70b9\u90bb\u57df\u503c\u7684\u548c\u4e86\u3002\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 610 ; int n , L , r , t ; int a [ maxn ][ maxn ], sum [ maxn ][ maxn ]; int ans ; inline int getSize ( int x , int y ) { // \u8ba1\u7b97 (x,y) \u7684\u90bb\u57df\u5927\u5c0f int row1 = max ( x - r , 1 ), col1 = max ( y - r , 1 ); int row2 = min ( x + r , n ), col2 = min ( y + r , n ); return ( row2 - row1 + 1 ) * ( col2 - col1 + 1 ); } int main () { scanf ( \"%d%d%d%d\" , & n , & L , & r , & t ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } // \u9884\u5904\u7406\u524d\u7f00\u548c\u6570\u7ec4 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { sum [ i ][ j ] = sum [ i - 1 ][ j ] + sum [ i ][ j - 1 ] - sum [ i - 1 ][ j - 1 ] + a [ i ][ j ]; } } // \u7edf\u8ba1\u7b54\u6848 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { int row1 = max ( 1 , i - r ), col1 = max ( 1 , j - r ); int row2 = min ( n , i + r ), col2 = min ( n , j + r ); int s = sum [ row2 ][ col2 ] - sum [ row2 ][ col1 - 1 ] - sum [ row1 - 1 ][ col2 ] + sum [ row1 - 1 ][ col1 - 1 ]; if ( s <= t * getSize ( i , j )) ++ ans ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/22/2/1/#202104-1","text":"","title":"202104-1 \u90bb\u57df\u5747\u503c"},{"location":"problem/22/2/1/#70","text":"\u6309\u7167\u9898\u76ee\u8981\u6c42\uff0c\u7b97\u51fa\u6bcf\u4e2a\u70b9\u7684\u90bb\u57df\u5747\u503c\uff0c\u7136\u540e\u76f4\u63a5\u7edf\u8ba1\u5373\u53ef\u3002 \u4e00\u5171\u6709 \\(\\mathrm{O}(n^2)\\) \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u7edf\u8ba1\u590d\u6742\u5ea6 \\(\\mathrm{O}(r^2)\\) \uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2r^2)\\) \u3002","title":"70% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df"},{"location":"problem/22/2/1/#100","text":"\u4e3a\u4e86\u7b80\u5316\u8bf4\u660e\u53ca\u907f\u514d\u9664\u6cd5\u7cbe\u5ea6\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u90bb\u57df\u5747\u503c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(t\\) \u8f6c\u5316\u4e3a \u90bb\u57df\u503c\u7684\u603b\u548c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(t\\) \u4e0e\u5143\u7d20\u5408\u6570\u4e4b\u79ef \u3002 \u8003\u8651\u5728 70 \u5206\u7684\u505a\u6cd5\u4e2d\u4ec0\u4e48\u5730\u65b9\u6d6a\u8d39\u4e86\u65f6\u95f4\uff1a\u5728\u7edf\u8ba1\u5b8c\u4e00\u4e2a\u70b9\u7684\u90bb\u57df\u503c\u7684\u603b\u548c\u65f6\uff0c\u6211\u4eec\u5c31\u629b\u5f03\u4e86\u8fd9\u4e2a\u70b9\u7684\u4fe1\u606f\uff0c\u5b8c\u5168\u91cd\u65b0\u8ba1\u7b97\u5176\u4ed6\u70b9\u7684\u90bb\u57df\u503c\u7684\u548c\u3002\u4f46\u5bf9\u4e8e\u76f8\u90bb\u7684\u70b9\uff0c\u5176\u90bb\u57df\u6709\u5f88\u5927\u9762\u79ef\u7684\u91cd\u5408\uff0c\u6700\u591a\u76f8\u5dee \\(2r\\) \u4e2a\u5143\u7d20\u3002 \u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\uff0c\u53ea\u9700\u8981\u5904\u7406\u8fd9 \\(2r\\) \u4e2a\u5143\u7d20\u7684\u66f4\u6539\u5373\u53ef\u3002 \u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7b97\u51fa\u7b2c\u4e00\u4e2a\u70b9\u7684\u90bb\u57df\u503c\u7684\u548c\u4e3a \\(\\mathrm{O}(r^2)\\) \uff0c\u4e00\u5171\u8981\u8fdb\u884c \\(n^2\\) \u6b21 \\(\\mathrm{O}(r)\\) \u7684\u4fee\u6539\uff0c\u6574\u4f53\u6bd4\u8f83\u590d\u6742\u5ea6 \\(n^2\\) \uff0c\u6700\u7ec8\u590d\u6742\u5ea6 \\(\\mathrm{O}(r^2+n^2r)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 610 ; int n , L , r , t ; int a [ maxn ][ maxn ], sum [ maxn ][ maxn ]; int ans ; inline int getSum ( int row1 , int col1 , int row2 , int col2 ) { // \u8ba1\u7b97\u4e00\u5757\u77e9\u9635\u533a\u95f4\u7684\u548c int res = 0 ; for ( int i = row1 ; i <= row2 ; ++ i ) { for ( int j = col1 ; j <= col2 ; ++ j ) { res += a [ i ][ j ]; } } return res ; } inline int getSize ( int x , int y ) { // \u8ba1\u7b97 (x,y) \u7684\u90bb\u57df\u5927\u5c0f int row1 = max ( x - r , 1 ), col1 = max ( y - r , 1 ); int row2 = min ( x + r , n ), col2 = min ( y + r , n ); return ( row2 - row1 + 1 ) * ( col2 - col1 + 1 ); } int main () { scanf ( \"%d%d%d%d\" , & n , & L , & r , & t ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } // \u6c42\u51fa sum[1][1] sum [ 1 ][ 1 ] = getSum ( 1 , 1 , min ( r + 1 , n ), min ( r + 1 , n )); // \u6c42\u51fa sum[1][2..n] for ( int j = 2 ; j <= n ; ++ j ) { sum [ 1 ][ j ] = sum [ 1 ][ j - 1 ]; // \u51cf\u53bb\u6700\u5de6\u4fa7\u4e00\u90e8\u5206 if ( j - 1 - r > 0 ) sum [ 1 ][ j ] -= getSum ( 1 , j - 1 - r , min ( r + 1 , n ), j - 1 - r ); // \u589e\u52a0\u53f3\u4fa7\u4e00\u90e8\u5206 if ( j + r <= n ) sum [ 1 ][ j ] += getSum ( 1 , j + r , min ( r + 1 , n ), j + r ); } // \u8ba1\u7b97\u5269\u4e0b\u90e8\u5206\uff0csum[i][j] \u7531 sum[i-1][j] \u8f6c\u79fb\u800c\u6765 for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { sum [ i ][ j ] = sum [ i - 1 ][ j ]; if ( i - 1 - r > 0 ) sum [ i ][ j ] -= getSum ( i - 1 - r , max ( j - r , 1 ), i - 1 - r , min ( j + r , n )); if ( i + r <= n ) sum [ i ][ j ] += getSum ( i + r , max ( j - r , 1 ), i + r , min ( j + r , n )); } } // \u7edf\u8ba1\u7b54\u6848 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( sum [ i ][ j ] <= t * getSize ( i , j )) ++ ans ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u7531\u76f8\u90bb\u90bb\u57df\u5747\u503c\u63a8\u5bfc"},{"location":"problem/22/2/1/#100_1","text":"\u5bf9\u4e8e\u591a\u6b21\u8be2\u95ee\u4e00\u6bb5\u533a\u95f4\u7684\u503c\uff0c\u5bb9\u6613\u60f3\u5230\u524d\u7f00\u548c\uff1b\u5982\u679c\u591a\u6b21\u8be2\u95ee\u4e8c\u7ef4\u533a\u95f4\u7684\u503c\uff0c\u9700\u8981\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u8bbe \\(S(x,y)= \\sum\\limits_{i=1}^{x}\\sum\\limits_{j=1}^{y}{a_{i,j}}\\) \uff0c\u5219 \\((x_1,y_1)\\) \u5230 \\((x_2,y_2)\\) \uff08 \\(x_2\\ge x_1, y_2\\ge y_1\\) \uff09\u7684\u548c\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a \\[S(x_2,y_2) - S(x_1 - 1, y_2) - S(x_2, y_1 - 1) + S(x_1 - 1, y_1 - 1)\\] \u6211\u4eec\u53ef\u4ee5 \\(\\mathrm{O}(n^2)\\) \u9884\u5904\u7406\u51fa \\(S(x,y)\\) \u6570\u7ec4\uff0c\u4e4b\u540e\u5219\u53ef\u4ee5 \\(\\mathrm{O}(1)\\) \u67e5\u8be2\u5355\u70b9\u90bb\u57df\u503c\u7684\u548c\u4e86\u3002\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^2)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 610 ; int n , L , r , t ; int a [ maxn ][ maxn ], sum [ maxn ][ maxn ]; int ans ; inline int getSize ( int x , int y ) { // \u8ba1\u7b97 (x,y) \u7684\u90bb\u57df\u5927\u5c0f int row1 = max ( x - r , 1 ), col1 = max ( y - r , 1 ); int row2 = min ( x + r , n ), col2 = min ( y + r , n ); return ( row2 - row1 + 1 ) * ( col2 - col1 + 1 ); } int main () { scanf ( \"%d%d%d%d\" , & n , & L , & r , & t ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { scanf ( \"%d\" , & a [ i ][ j ]); } } // \u9884\u5904\u7406\u524d\u7f00\u548c\u6570\u7ec4 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { sum [ i ][ j ] = sum [ i - 1 ][ j ] + sum [ i ][ j - 1 ] - sum [ i - 1 ][ j - 1 ] + a [ i ][ j ]; } } // \u7edf\u8ba1\u7b54\u6848 for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { int row1 = max ( 1 , i - r ), col1 = max ( 1 , j - r ); int row2 = min ( n , i + r ), col2 = min ( n , j + r ); int s = sum [ row2 ][ col2 ] - sum [ row2 ][ col1 - 1 ] - sum [ row1 - 1 ][ col2 ] + sum [ row1 - 1 ][ col1 - 1 ]; if ( s <= t * getSize ( i , j )) ++ ans ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"problem/22/3/","text":"202104-3 DHCP\u670d\u52a1\u5668 \u9898\u76ee\u94fe\u63a5 202104-3 DHCP\u670d\u52a1\u5668 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"202104-3 DHCP\u670d\u52a1\u5668"},{"location":"problem/22/3/#202104-3-dhcp","text":"","title":"202104-3 DHCP\u670d\u52a1\u5668"},{"location":"problem/22/3/#_1","text":"202104-3 DHCP\u670d\u52a1\u5668","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/22/3/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/22/4/","text":"202104-4 \u6821\u95e8\u5916\u7684\u6811 \u9898\u76ee\u94fe\u63a5 202104-4 \u6821\u95e8\u5916\u7684\u6811 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"202104-4 \u6821\u95e8\u5916\u7684\u6811"},{"location":"problem/22/4/#202104-4","text":"","title":"202104-4 \u6821\u95e8\u5916\u7684\u6811"},{"location":"problem/22/4/#_1","text":"202104-4 \u6821\u95e8\u5916\u7684\u6811","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/22/4/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/22/5/","text":"202104-5 \u75ab\u82d7\u8fd0\u8f93 \u9898\u76ee\u94fe\u63a5 202104-5 \u75ab\u82d7\u8fd0\u8f93 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"202104-5 \u75ab\u82d7\u8fd0\u8f93"},{"location":"problem/22/5/#202104-5","text":"","title":"202104-5 \u75ab\u82d7\u8fd0\u8f93"},{"location":"problem/22/5/#_1","text":"202104-5 \u75ab\u82d7\u8fd0\u8f93","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/22/5/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/","text":"\u7b2c 23 \u6b21\uff082021 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202109-1 \u6570\u7ec4\u63a8\u5bfc \u6a21\u62df 100 C++\u3001Java\u3001Python 3 \u94fe\u63a5 202109-2 \u975e\u96f6\u6bb5\u5212\u5206 \u6a21\u62df 100 C++ \u94fe\u63a5 202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u6a21\u62df\u3001\u6eda\u52a8\u6570\u7ec4 100 C++ \u94fe\u63a5 202109-4 \u6536\u96c6\u5361\u724c \u8bb0\u5fc6\u5316\u641c\u7d22 100 C++ \u94fe\u63a5 202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b LCT 100 C++ \u94fe\u63a5","title":"\u7b2c 23 \u6b21\uff082021 \u5e74 9 \u6708\uff09"},{"location":"problem/23/#23-2021-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202109-1 \u6570\u7ec4\u63a8\u5bfc \u6a21\u62df 100 C++\u3001Java\u3001Python 3 \u94fe\u63a5 202109-2 \u975e\u96f6\u6bb5\u5212\u5206 \u6a21\u62df 100 C++ \u94fe\u63a5 202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u6a21\u62df\u3001\u6eda\u52a8\u6570\u7ec4 100 C++ \u94fe\u63a5 202109-4 \u6536\u96c6\u5361\u724c \u8bb0\u5fc6\u5316\u641c\u7d22 100 C++ \u94fe\u63a5 202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b LCT 100 C++ \u94fe\u63a5","title":"\u7b2c 23 \u6b21\uff082021 \u5e74 9 \u6708\uff09"},{"location":"problem/23/1/","text":"202109-1 \u6570\u7ec4\u63a8\u5bfc \u9898\u76ee\u94fe\u63a5 202109-1 \u6570\u7ec4\u63a8\u5bfc \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5","title":"202109-1 \u6570\u7ec4\u63a8\u5bfc"},{"location":"problem/23/1/#202109-1","text":"","title":"202109-1 \u6570\u7ec4\u63a8\u5bfc"},{"location":"problem/23/1/#_1","text":"202109-1 \u6570\u7ec4\u63a8\u5bfc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/23/1/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/1/1/","text":"202109-1 \u6570\u7ec4\u63a8\u5bfc 100% \u6570\u636e\u2014\u2014\u6a21\u62df \\(B\\) \u6570\u7ec4\u662f \\(A\\) \u6570\u7ec4\u7684\u524d\u7f00\u6700\u5927\u503c\uff0c\u6240\u4ee5 \\(B\\) \u5fc5\u5b9a\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002 \u8003\u8651 \\(B\\) \u6570\u7ec4\u4e2d\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u63a8\u6d4b \\(A\\) \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u8303\u56f4\uff1a \\(B_1=A_1\\) \uff1b \u82e5 \\(B_i\\not=B_{i-1}(i\\ge 2)\\) \uff0c\u8bf4\u660e\u524d\u7f00\u6700\u5927\u503c\u5728\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8\uff1b \u8003\u8651 \\(A_i\\) \uff1a\u82e5 \\(A_i \\le B_{i-1}\\) \u5219 \\(B_i\\) \u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u82e5 \\(A_i > B_{i-1}\\) \u4e14 \\(A_i\\not=B_i\\) \u5219 \\(B_i=A_i\\) \u77db\u76fe\uff0c\u6240\u4ee5\u6b64\u65f6 \\(B_i=A_i\\) \uff1b \u82e5 \\(B_i=B_{i-1}(i\\ge 2)\\) \uff0c\u8bf4\u660e\u524d\u7f00\u6700\u5927\u503c\u5728 \\(i\\) \u5904\u6ca1\u6709\u6539\u53d8\uff0c\u7ed3\u5408\u4e0a\u9762\u7684\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \\(A_i \\in [0, B_{i-1}]\\) \u3002\u56e0\u4e3a \\(B_{i-1}=B_i\\) \uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5199\u4e3a \\(A_i \\in [0, B_{i}]\\) \u3002 \u7efc\u5408\u4ee5\u4e0a\u5206\u6790\uff0c\u53ea\u6709\u5728 \\(B_{i}=B_{i-1}(i\\ge 2)\\) \u65f6\uff0c \\(A_i\\) \u7684\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u8981\u6c42\u6700\u5927\u6700\u5c0f\u503c\uff0c\u53ea\u8981\u4ee4\u4e0d\u786e\u5b9a\u7684 \\(A_i=0\\) \u6216 \\(A_i=B_{i}\\) \u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 110 ; int a [ maxn ], b [ maxn ]; int n ; int sum ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } // \u8ba1\u7b97\u6700\u5927\u503c\uff1a\u6ee1\u8db3 a[i]=b[i] sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += b [ i ]; printf ( \"%lld \\n \" , sum ); // \u8ba1\u7b97\u6700\u5c0f\u503c\uff1a\u5728\u53d8\u5316\u65f6 a[i]=b[i]\uff0c\u5176\u4f59\u4e3a 0 sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i == 1 || b [ i ] != b [ i - 1 ]) sum += b [ i ]; } printf ( \"%d \\n \" , sum ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (); int maxval = 0 , minval = 0 ; int b [] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { b [ i ] = input . nextInt (); maxval += b [ i ] ; if ( b [ i ] != b [ i - 1 ] ) minval += b [ i ] ; } input . close (); System . out . println ( maxval ); System . out . println ( minval ); } } 1 2 3 4 5 6 7 8 9 10 n = int ( input ()) b = list ( map ( int , input () . strip () . split ())) minval = 0 maxval = 0 for i in range ( n ): maxval += b [ i ] if b [ i ] != b [ i - 1 ]: minval += b [ i ] print ( maxval ) print ( minval )","title":"\u6587\u7ae0 1"},{"location":"problem/23/1/1/#202109-1","text":"","title":"202109-1 \u6570\u7ec4\u63a8\u5bfc"},{"location":"problem/23/1/1/#100","text":"\\(B\\) \u6570\u7ec4\u662f \\(A\\) \u6570\u7ec4\u7684\u524d\u7f00\u6700\u5927\u503c\uff0c\u6240\u4ee5 \\(B\\) \u5fc5\u5b9a\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002 \u8003\u8651 \\(B\\) \u6570\u7ec4\u4e2d\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u63a8\u6d4b \\(A\\) \u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u503c\u8303\u56f4\uff1a \\(B_1=A_1\\) \uff1b \u82e5 \\(B_i\\not=B_{i-1}(i\\ge 2)\\) \uff0c\u8bf4\u660e\u524d\u7f00\u6700\u5927\u503c\u5728\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u53d1\u751f\u4e86\u6539\u53d8\uff1b \u8003\u8651 \\(A_i\\) \uff1a\u82e5 \\(A_i \\le B_{i-1}\\) \u5219 \\(B_i\\) \u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u82e5 \\(A_i > B_{i-1}\\) \u4e14 \\(A_i\\not=B_i\\) \u5219 \\(B_i=A_i\\) \u77db\u76fe\uff0c\u6240\u4ee5\u6b64\u65f6 \\(B_i=A_i\\) \uff1b \u82e5 \\(B_i=B_{i-1}(i\\ge 2)\\) \uff0c\u8bf4\u660e\u524d\u7f00\u6700\u5927\u503c\u5728 \\(i\\) \u5904\u6ca1\u6709\u6539\u53d8\uff0c\u7ed3\u5408\u4e0a\u9762\u7684\u5206\u6790\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \\(A_i \\in [0, B_{i-1}]\\) \u3002\u56e0\u4e3a \\(B_{i-1}=B_i\\) \uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u5199\u4e3a \\(A_i \\in [0, B_{i}]\\) \u3002 \u7efc\u5408\u4ee5\u4e0a\u5206\u6790\uff0c\u53ea\u6709\u5728 \\(B_{i}=B_{i-1}(i\\ge 2)\\) \u65f6\uff0c \\(A_i\\) \u7684\u503c\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u8981\u6c42\u6700\u5927\u6700\u5c0f\u503c\uff0c\u53ea\u8981\u4ee4\u4e0d\u786e\u5b9a\u7684 \\(A_i=0\\) \u6216 \\(A_i=B_{i}\\) \u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 110 ; int a [ maxn ], b [ maxn ]; int n ; int sum ; int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & b [ i ]); } // \u8ba1\u7b97\u6700\u5927\u503c\uff1a\u6ee1\u8db3 a[i]=b[i] sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum += b [ i ]; printf ( \"%lld \\n \" , sum ); // \u8ba1\u7b97\u6700\u5c0f\u503c\uff1a\u5728\u53d8\u5316\u65f6 a[i]=b[i]\uff0c\u5176\u4f59\u4e3a 0 sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i == 1 || b [ i ] != b [ i - 1 ]) sum += b [ i ]; } printf ( \"%d \\n \" , sum ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (); int maxval = 0 , minval = 0 ; int b [] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { b [ i ] = input . nextInt (); maxval += b [ i ] ; if ( b [ i ] != b [ i - 1 ] ) minval += b [ i ] ; } input . close (); System . out . println ( maxval ); System . out . println ( minval ); } } 1 2 3 4 5 6 7 8 9 10 n = int ( input ()) b = list ( map ( int , input () . strip () . split ())) minval = 0 maxval = 0 for i in range ( n ): maxval += b [ i ] if b [ i ] != b [ i - 1 ]: minval += b [ i ] print ( maxval ) print ( minval )","title":"100% \u6570\u636e\u2014\u2014\u6a21\u62df"},{"location":"problem/23/2/","text":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206 \u9898\u76ee\u94fe\u63a5 202109-2 \u975e\u96f6\u6bb5\u5212\u5206 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n\u22641000 \u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u907f\u514d\u4e0d\u5fc5\u8981\u66f4\u65b0 C++ \u9898\u89e3\u94fe\u63a5","title":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206"},{"location":"problem/23/2/#202109-2","text":"","title":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206"},{"location":"problem/23/2/#_1","text":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/23/2/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n\u22641000 \u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u907f\u514d\u4e0d\u5fc5\u8981\u66f4\u65b0 C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/2/1/","text":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206 70% \u6570\u636e\u2014\u2014\u6a21\u62df \u9898\u76ee\u4e2d\u8bf4\u660e \\(A_i\\in[0, 10000]\\) \u3002\u5f53 \\(p>10000\\) \u540e\uff0c \\(A\\) \u6570\u7ec4\u5219\u6210\u4e3a\u5168 \\(0\\) \u6570\u7ec4\uff0c \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8003\u8651 \\(k\\in[1, 10000]\\) \u65f6\u7684\u975e\u96f6\u6bb5\u4e2a\u6570\uff0c\u4e0d\u59a8\u8bbe \\(m=10000\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e00\u4e2a \\(p\\) \uff0c\u8ba1\u7b97\u51fa \\(A\\) \u6570\u7ec4\u7684\u60c5\u51b5\uff0c\u8fdb\u800c\u8ba1\u7b97\u975e\u96f6\u6bb5\u7684\u4e2a\u6570\uff0c\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\u3002 \u5728\u7ef4\u62a4 \\(A\\) \u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9 \\(p\\) \u9012\u589e\u66f4\u65b0\u3002 \u8fd9\u6837\u5728 \\(p\\) \u66f4\u65b0\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5c06 \\(A_i=p-1\\) \u5904\u66f4\u65b0\u4e3a \\(0\\) \u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(nm)\\) \u3002 100% \u6570\u636e\u2014\u2014\u907f\u514d\u4e0d\u5fc5\u8981\u66f4\u65b0 \u5728\u4e0a\u4e2a\u505a\u6cd5\u4e2d\uff0c\u65f6\u95f4\u4e3b\u8981\u6d6a\u8d39\u5728\u4e86\u5bf9 \\(A\\) \u6570\u7ec4\u7684\u66f4\u65b0\u4e0e\u91cd\u590d\u8ba1\u7b97\u975e\u96f6\u6bb5\u4e0a\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u975e\u96f6 \\(A_i\\) \uff0c\u968f\u7740 \\(p\\) \u9010\u6e10\u589e\u5927\uff0c\u5176\u6700\u591a\u6539\u53d8\u4e00\u6b21\uff0c\u5373\u53d8\u4e3a \\(0\\) \u3002 \u800c\u5728\u4e0a\u9762\u7684\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6bcf\u6b21\u90fd\u5bf9\u6240\u6709\u7684\u5143\u7d20\u8fdb\u884c\u68c0\u67e5\uff0c\u65e0\u8bba\u5176\u662f\u5426\u4e3a \\(0\\) \u3002 \u8003\u8651\u6bcf\u4e2a \\(A_i\\) \u53d8\u4e3a \\(0\\) \u65f6\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u7684\u8d21\u732e\u3002 \u4e3a\u4e86\u7b80\u5316\u540e\u7eed\u8ba8\u8bba\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u63a8\u8bba\uff1a \u76f8\u90bb\u76f8\u7b49\u5143\u7d20\u4e0e\u5355\u4e2a\u5143\u7d20\u7b49\u4ef7 \u5bf9\u4e8e\u4e00\u6bb5\u503c\u76f8\u540c\u7684\u533a\u95f4\uff0c\u53ef\u4ee5\u628a\u5b83\u4eec\u770b\u505a\u6210\u5176\u4e2d\u4efb\u610f\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u8fd9\u4e00\u70b9\u5f88\u597d\u7406\u89e3\uff1a\u65e2\u7136\u503c\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u5728\u53d8\u4e3a \\(0\\) \u65f6\u5fc5\u7136\u662f\u540c\u65f6\u6539\u53d8\u3002 \u901a\u8fc7\u4ee5\u4e0a\u63a8\u8bba\uff0c\u6211\u4eec\u5148\u7f29\u5c0f \\(A\\) \u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u76f4\u5230\u4efb\u610f\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u90fd\u4e0d\u540c\uff0c\u4e4b\u540e\u8003\u8651\u6bcf\u4e2a\u5143\u7d20\u5bf9\u6574\u4f53\u7684\u8d21\u732e\u3002 \u53ea\u770b\u5143\u7d20\u672c\u8eab\u770b\u4e0d\u51fa\u4ec0\u4e48\uff0c\u4e00\u79cd\u601d\u8def\u662f\u67e5\u770b\u4e0e\u4e4b\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u3002 \u56fe 1\uff1a\u76f8\u90bb\u5143\u7d20\u7684\u56db\u79cd\u60c5\u51b5 \u5982\u56fe\uff0c\u7ea2\u8272\u70b9\u4ee3\u8868\u5c06\u8981\u53d8\u4e3a \\(0\\) \u7684\u5143\u7d20\uff0c\u84dd\u8272\u70b9\u4e3a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff1b\u9ed1\u7ebf\u4ee5\u4e0b\u4e3a\u76ee\u524d\u53d8\u4e3a \\(0\\) \u7684\u5143\u7d20\u3002\u6211\u4eec\u5bf9\u4ee5\u4e0a\u56db\u79cd\u60c5\u51b5\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a \u5f53\u5de6\u53f3\u76f8\u90bb\u5143\u7d20\u5747\u5927\u4e8e\u4e2d\u95f4\u5143\u7d20\u65f6\uff1a\u5f53\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u65f6\uff0c\u539f\u672c\u4e00\u4e2a\u975e\u96f6\u6bb5\u5206\u6210\u4e86\u4e24\u4e2a\u975e\u96f6\u6bb5\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u8d21\u732e \\(+1\\) \uff1b \u5f53\u5de6\u53f3\u76f8\u90bb\u5143\u7d20\u5747\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u65f6\uff1a\u5f53\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u4e4b\u524d\uff0c\u5de6\u53f3\u5143\u7d20\u5747\u5df2\u53d8\u6210 \\(0\\) \uff0c\u4e2d\u95f4\u5143\u7d20\u662f\u5b64\u7acb\u7684\u975e\u96f6\u6bb5\uff0c\u5728\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u540e\uff0c\u975e\u96f6\u6bb5\u4e2a\u6570\u51cf\u5c11\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u8d21\u732e \\(-1\\) \uff1b \u5176\u4ed6\u4e24\u79cd\u60c5\u51b5\uff1a\u76f8\u5f53\u4e8e\u67d0\u4e2a\u975e\u96f6\u6bb5\u7684\u8fb9\u754c\u53bb\u6389\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u65e0\u5f71\u54cd\u3002 \u9488\u5bf9\u8fb9\u754c\u5143\u7d20\u800c\u8a00\uff0c\u53ef\u4ee5\u5c06\u5176\u7f3a\u5931\u7684\u76f8\u90bb\u5143\u7d20\u89c6\u4e3a \\(0\\) \u3002 \u540c\u65f6\uff0c\u8003\u8651\u5230\u6211\u4eec\u53ea\u9700\u8981\u6c42\u89e3\u975e\u96f6\u6bb5\u7684\u4e2a\u6570\uff0c\u5e76\u4e0d\u9700\u8981\u8f93\u51fa\u5bf9\u5e94 \\(A\\) \u6570\u7ec4\u7684\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5143\u7d20\u7684\u8d21\u732e\uff08\u5f53\u7136\u53ea\u6709\u5728\u5bf9\u5e94 \\(p=A_{i}+1\\) \u65f6\u624d\u4f1a\u6709\u8d21\u732e\uff09\u7d2f\u52a0\uff0c\u6210\u4e3a\u6bcf\u4e2a \\(p\\) \u5bf9\u5e94\u7684\u8d21\u732e\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u6c42\u51fa\u521d\u59cb\u72b6\u6001\u7684\u975e\u96f6\u6bb5\u4e2a\u6570\uff0c\u4e4b\u540e\u968f\u7740 \\(p\\) \u589e\u52a0\u5229\u7528\u4e4b\u524d\u6c42\u51fa\u7684\u8d21\u732e\u8fdb\u884c\u66f4\u65b0\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u89e3\u51b3\u3002 \u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3001\u5e76\u7d2f\u52a0\u5230\u5bf9\u5e94 \\(p\\) \u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(n)\\) \uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a \\(p\\) \u7684\u6700\u540e\u8d21\u732e\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(m)\\) \uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n+m)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 500010 ; const int maxm = 10010 ; int n ; int a [ maxn ]; int sum [ maxm ]; // sum[i] \u8868\u793a p = i \u65f6\u7684\u8d21\u732e // \u6ce8\u610f\u5f53 a[i] \u53d1\u751f\u53d8\u5316\u65f6\uff0cp = a[i] + 1 int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } // \u53bb\u6389\u6570\u7ec4\u4e2d\u76f8\u540c\u5143\u7d20\u6bb5 int tot = 0 ; a [ ++ tot ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { if ( a [ i ] == a [ i - 1 ]) continue ; a [ ++ tot ] = a [ i ]; } n = tot ; // \u5bf9\u975e\u4e24\u4fa7\u5143\u7d20\u8fdb\u884c\u5904\u7406 for ( int i = 2 ; i < n ; ++ i ) { if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ]) { // \u4e2d\u95f4\u5c0f\u4e24\u4fa7\u5927\uff0c\u8d21\u732e +1 ++ sum [ a [ i ] + 1 ]; } if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ]) { // \u4e2d\u95f4\u5927\u4e24\u4fa7\u5c0f\uff0c\u8d21\u732e -1 -- sum [ a [ i ] + 1 ]; } } // \u5904\u7406\u4e24\u4fa7\u5143\u7d20 if ( n > 1 && a [ 1 ] > a [ 2 ]) -- sum [ a [ 1 ] + 1 ]; if ( n > 1 && a [ n ] > a [ n - 1 ]) -- sum [ a [ n ] + 1 ]; // \u8ba1\u7b97\u521d\u59cb\u60c5\u51b5 p = 1 \u65f6\u7684\u975e\u96f6\u6bb5\u6570 cur int cur = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0 && a [ i - 1 ] != 0 ) ++ cur ; } if ( a [ n ]) ++ cur ; // \u8ba1\u7b97\u5e76\u5f97\u5230\u6700\u5927\u7684\u975e\u96f6\u6bb5\u6570 int ans = cur ; for ( int i = 2 ; i <= 10001 ; ++ i ) { cur += sum [ i ]; if ( cur > ans ) { ans = cur ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/23/2/1/#202109-2","text":"","title":"202109-2 \u975e\u96f6\u6bb5\u5212\u5206"},{"location":"problem/23/2/1/#70","text":"\u9898\u76ee\u4e2d\u8bf4\u660e \\(A_i\\in[0, 10000]\\) \u3002\u5f53 \\(p>10000\\) \u540e\uff0c \\(A\\) \u6570\u7ec4\u5219\u6210\u4e3a\u5168 \\(0\\) \u6570\u7ec4\uff0c \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8003\u8651 \\(k\\in[1, 10000]\\) \u65f6\u7684\u975e\u96f6\u6bb5\u4e2a\u6570\uff0c\u4e0d\u59a8\u8bbe \\(m=10000\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e00\u4e2a \\(p\\) \uff0c\u8ba1\u7b97\u51fa \\(A\\) \u6570\u7ec4\u7684\u60c5\u51b5\uff0c\u8fdb\u800c\u8ba1\u7b97\u975e\u96f6\u6bb5\u7684\u4e2a\u6570\uff0c\u4e0d\u65ad\u66f4\u65b0\u7b54\u6848\u3002 \u5728\u7ef4\u62a4 \\(A\\) \u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9 \\(p\\) \u9012\u589e\u66f4\u65b0\u3002 \u8fd9\u6837\u5728 \\(p\\) \u66f4\u65b0\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u5c06 \\(A_i=p-1\\) \u5904\u66f4\u65b0\u4e3a \\(0\\) \u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(nm)\\) \u3002","title":"70% \u6570\u636e\u2014\u2014\u6a21\u62df"},{"location":"problem/23/2/1/#100","text":"\u5728\u4e0a\u4e2a\u505a\u6cd5\u4e2d\uff0c\u65f6\u95f4\u4e3b\u8981\u6d6a\u8d39\u5728\u4e86\u5bf9 \\(A\\) \u6570\u7ec4\u7684\u66f4\u65b0\u4e0e\u91cd\u590d\u8ba1\u7b97\u975e\u96f6\u6bb5\u4e0a\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u975e\u96f6 \\(A_i\\) \uff0c\u968f\u7740 \\(p\\) \u9010\u6e10\u589e\u5927\uff0c\u5176\u6700\u591a\u6539\u53d8\u4e00\u6b21\uff0c\u5373\u53d8\u4e3a \\(0\\) \u3002 \u800c\u5728\u4e0a\u9762\u7684\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6bcf\u6b21\u90fd\u5bf9\u6240\u6709\u7684\u5143\u7d20\u8fdb\u884c\u68c0\u67e5\uff0c\u65e0\u8bba\u5176\u662f\u5426\u4e3a \\(0\\) \u3002 \u8003\u8651\u6bcf\u4e2a \\(A_i\\) \u53d8\u4e3a \\(0\\) \u65f6\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u7684\u8d21\u732e\u3002 \u4e3a\u4e86\u7b80\u5316\u540e\u7eed\u8ba8\u8bba\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u63a8\u8bba\uff1a \u76f8\u90bb\u76f8\u7b49\u5143\u7d20\u4e0e\u5355\u4e2a\u5143\u7d20\u7b49\u4ef7 \u5bf9\u4e8e\u4e00\u6bb5\u503c\u76f8\u540c\u7684\u533a\u95f4\uff0c\u53ef\u4ee5\u628a\u5b83\u4eec\u770b\u505a\u6210\u5176\u4e2d\u4efb\u610f\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u8fd9\u4e00\u70b9\u5f88\u597d\u7406\u89e3\uff1a\u65e2\u7136\u503c\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e00\u6bb5\u5728\u53d8\u4e3a \\(0\\) \u65f6\u5fc5\u7136\u662f\u540c\u65f6\u6539\u53d8\u3002 \u901a\u8fc7\u4ee5\u4e0a\u63a8\u8bba\uff0c\u6211\u4eec\u5148\u7f29\u5c0f \\(A\\) \u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u76f4\u5230\u4efb\u610f\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u90fd\u4e0d\u540c\uff0c\u4e4b\u540e\u8003\u8651\u6bcf\u4e2a\u5143\u7d20\u5bf9\u6574\u4f53\u7684\u8d21\u732e\u3002 \u53ea\u770b\u5143\u7d20\u672c\u8eab\u770b\u4e0d\u51fa\u4ec0\u4e48\uff0c\u4e00\u79cd\u601d\u8def\u662f\u67e5\u770b\u4e0e\u4e4b\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u3002 \u56fe 1\uff1a\u76f8\u90bb\u5143\u7d20\u7684\u56db\u79cd\u60c5\u51b5 \u5982\u56fe\uff0c\u7ea2\u8272\u70b9\u4ee3\u8868\u5c06\u8981\u53d8\u4e3a \\(0\\) \u7684\u5143\u7d20\uff0c\u84dd\u8272\u70b9\u4e3a\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff1b\u9ed1\u7ebf\u4ee5\u4e0b\u4e3a\u76ee\u524d\u53d8\u4e3a \\(0\\) \u7684\u5143\u7d20\u3002\u6211\u4eec\u5bf9\u4ee5\u4e0a\u56db\u79cd\u60c5\u51b5\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a \u5f53\u5de6\u53f3\u76f8\u90bb\u5143\u7d20\u5747\u5927\u4e8e\u4e2d\u95f4\u5143\u7d20\u65f6\uff1a\u5f53\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u65f6\uff0c\u539f\u672c\u4e00\u4e2a\u975e\u96f6\u6bb5\u5206\u6210\u4e86\u4e24\u4e2a\u975e\u96f6\u6bb5\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u8d21\u732e \\(+1\\) \uff1b \u5f53\u5de6\u53f3\u76f8\u90bb\u5143\u7d20\u5747\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u65f6\uff1a\u5f53\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u4e4b\u524d\uff0c\u5de6\u53f3\u5143\u7d20\u5747\u5df2\u53d8\u6210 \\(0\\) \uff0c\u4e2d\u95f4\u5143\u7d20\u662f\u5b64\u7acb\u7684\u975e\u96f6\u6bb5\uff0c\u5728\u4e2d\u95f4\u5143\u7d20\u53d8\u4e3a \\(0\\) \u540e\uff0c\u975e\u96f6\u6bb5\u4e2a\u6570\u51cf\u5c11\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u8d21\u732e \\(-1\\) \uff1b \u5176\u4ed6\u4e24\u79cd\u60c5\u51b5\uff1a\u76f8\u5f53\u4e8e\u67d0\u4e2a\u975e\u96f6\u6bb5\u7684\u8fb9\u754c\u53bb\u6389\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u5bf9\u975e\u96f6\u6bb5\u4e2a\u6570\u65e0\u5f71\u54cd\u3002 \u9488\u5bf9\u8fb9\u754c\u5143\u7d20\u800c\u8a00\uff0c\u53ef\u4ee5\u5c06\u5176\u7f3a\u5931\u7684\u76f8\u90bb\u5143\u7d20\u89c6\u4e3a \\(0\\) \u3002 \u540c\u65f6\uff0c\u8003\u8651\u5230\u6211\u4eec\u53ea\u9700\u8981\u6c42\u89e3\u975e\u96f6\u6bb5\u7684\u4e2a\u6570\uff0c\u5e76\u4e0d\u9700\u8981\u8f93\u51fa\u5bf9\u5e94 \\(A\\) \u6570\u7ec4\u7684\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5143\u7d20\u7684\u8d21\u732e\uff08\u5f53\u7136\u53ea\u6709\u5728\u5bf9\u5e94 \\(p=A_{i}+1\\) \u65f6\u624d\u4f1a\u6709\u8d21\u732e\uff09\u7d2f\u52a0\uff0c\u6210\u4e3a\u6bcf\u4e2a \\(p\\) \u5bf9\u5e94\u7684\u8d21\u732e\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5148\u6c42\u51fa\u521d\u59cb\u72b6\u6001\u7684\u975e\u96f6\u6bb5\u4e2a\u6570\uff0c\u4e4b\u540e\u968f\u7740 \\(p\\) \u589e\u52a0\u5229\u7528\u4e4b\u524d\u6c42\u51fa\u7684\u8d21\u732e\u8fdb\u884c\u66f4\u65b0\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u5feb\u901f\u5730\u89e3\u51b3\u3002 \u6c42\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u8d21\u732e\u3001\u5e76\u7d2f\u52a0\u5230\u5bf9\u5e94 \\(p\\) \u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(n)\\) \uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a \\(p\\) \u7684\u6700\u540e\u8d21\u732e\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(m)\\) \uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n+m)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 500010 ; const int maxm = 10010 ; int n ; int a [ maxn ]; int sum [ maxm ]; // sum[i] \u8868\u793a p = i \u65f6\u7684\u8d21\u732e // \u6ce8\u610f\u5f53 a[i] \u53d1\u751f\u53d8\u5316\u65f6\uff0cp = a[i] + 1 int main () { scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } // \u53bb\u6389\u6570\u7ec4\u4e2d\u76f8\u540c\u5143\u7d20\u6bb5 int tot = 0 ; a [ ++ tot ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { if ( a [ i ] == a [ i - 1 ]) continue ; a [ ++ tot ] = a [ i ]; } n = tot ; // \u5bf9\u975e\u4e24\u4fa7\u5143\u7d20\u8fdb\u884c\u5904\u7406 for ( int i = 2 ; i < n ; ++ i ) { if ( a [ i ] < a [ i - 1 ] && a [ i ] < a [ i + 1 ]) { // \u4e2d\u95f4\u5c0f\u4e24\u4fa7\u5927\uff0c\u8d21\u732e +1 ++ sum [ a [ i ] + 1 ]; } if ( a [ i ] > a [ i - 1 ] && a [ i ] > a [ i + 1 ]) { // \u4e2d\u95f4\u5927\u4e24\u4fa7\u5c0f\uff0c\u8d21\u732e -1 -- sum [ a [ i ] + 1 ]; } } // \u5904\u7406\u4e24\u4fa7\u5143\u7d20 if ( n > 1 && a [ 1 ] > a [ 2 ]) -- sum [ a [ 1 ] + 1 ]; if ( n > 1 && a [ n ] > a [ n - 1 ]) -- sum [ a [ n ] + 1 ]; // \u8ba1\u7b97\u521d\u59cb\u60c5\u51b5 p = 1 \u65f6\u7684\u975e\u96f6\u6bb5\u6570 cur int cur = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0 && a [ i - 1 ] != 0 ) ++ cur ; } if ( a [ n ]) ++ cur ; // \u8ba1\u7b97\u5e76\u5f97\u5230\u6700\u5927\u7684\u975e\u96f6\u6bb5\u6570 int ans = cur ; for ( int i = 2 ; i <= 10001 ; ++ i ) { cur += sum [ i ]; if ( cur > ans ) { ans = cur ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u907f\u514d\u4e0d\u5fc5\u8981\u66f4\u65b0"},{"location":"problem/23/3/","text":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u9898\u76ee\u94fe\u63a5 202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 N\u00d7T\u226410 6 \u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6eda\u52a8\u6570\u7ec4\u4f18\u5316 C++ \u9898\u89e3\u94fe\u63a5","title":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc"},{"location":"problem/23/3/#202109-3","text":"","title":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc"},{"location":"problem/23/3/#_1","text":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/23/3/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 N\u00d7T\u226410 6 \u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6eda\u52a8\u6570\u7ec4\u4f18\u5316 C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/3/1/","text":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc 70% \u6570\u636e\u2014\u2014\u6a21\u62df \u5148\u4e0d\u8003\u8651\u5177\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u601d\u8003\u6734\u7d20\u505a\u6cd5\u5e94\u8be5\u600e\u4e48\u505a\uff1a \u679a\u4e3e \\([0,T]\\) \u6bcf\u4e2a\u65f6\u523b\uff0c\u8fd9\u91cc\u5e94\u4e3a\u4e00\u4e2a\u5916\u5c42\u5faa\u73af\uff1b \u5bf9\u8109\u51b2\u6e90\u8fdb\u884c\u5904\u7406\uff1a\u901a\u8fc7 \\(r\\) \u53c2\u6570\u5224\u65ad\u662f\u5426\u4f1a\u53d1\u5c04\u8109\u51b2\uff1b \u5bf9\u795e\u7ecf\u5143\u8fdb\u884c\u5904\u7406\uff1a\u901a\u8fc7 \\(v_k\\) \u5224\u65ad\u662f\u5426\u4f1a\u53d1\u5c04\u8109\u51b2\uff1b\u5982\u679c\u53d1\u5c04\u8109\u51b2\uff0c\u5219\u66f4\u65b0 \\(u_k,v_k\\) \u3002 \u5224\u65ad\u8109\u51b2\u6e90\u662f\u5426\u53d1\u5c04\u8109\u51b2\u76f8\u5bf9\u5bb9\u6613\u3002\u4f46\u5bf9\u4e8e\u795e\u7ecf\u5143\u6765\u8bf4\uff0c\u7531\u4e8e\u4f20\u64ad\u5ef6\u8fdf\u7684\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053 \\(I_k\\) \uff0c \u5373\u795e\u7ecf\u5143\u5728 \\(k\\) \u65f6\u523b\u63a5\u6536\u5230\u6240\u6709\u8109\u51b2\u8f93\u5165\u7684\u5f3a\u5ea6\u4e4b\u548c\u3002 \u53c8\u7531\u4e8e\u6bcf\u4e2a\u795e\u7ecf\u5143\u662f\u5426\u53d1\u5c04\u8109\u51b2\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053 \u6bcf\u4e2a\u795e\u7ecf\u5143 \u5728 \u6bcf\u4e2a\u65f6\u523b \u63a5\u6536\u5230\u7684\u8109\u51b2\u548c\u3002 \u4e00\u79cd\u601d\u8def\u662f\u5f00\u4e00\u4e2a \\(\\mathrm{O}(NT)\\) \u7684\u4e8c\u7ef4\u6570\u7ec4\u6765\u8bb0\u5f55\u3002\u7531\u4e8e\u7a7a\u95f4\u5927\u5c0f\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7 \\(70%\\) \u6570\u636e\u3002 \u518d\u6765\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u679a\u4e3e\u65f6\u523b\u662f \\(\\mathrm{O}(T)\\) \uff0c\u679a\u4e3e\u8109\u51b2\u3001\u795e\u7ecf\u5143\u53ca\u53d1\u5c04\u8109\u51b2\u9700\u8981 \\(\\mathrm{O}(N+S+P)\\) \uff0c \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(T(N+S+P))\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u6570\u636e\u3002 100% \u6570\u636e\u2014\u2014\u6eda\u52a8\u6570\u7ec4\u4f18\u5316 \u4e3a\u4e86\u5f97\u5230\u6ee1\u5206\uff0c\u76ee\u524d\u7684\u4efb\u52a1\u662f\u7f29\u5c0f\u8bb0\u5f55\u6bcf\u4e2a\u795e\u7ecf\u5143 \\(I_k\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u63d0\u793a \u9898\u76ee\u7ed9\u51fa\u7684\u91cf\u7684\u5927\u5c0f\u4e00\u822c\u90fd\u662f\u6709\u7528\u7684\u3002\u5982\u679c\u6ca1\u6709\u601d\u8def\u65f6\uff0c\u53ef\u4ee5\u4ece\u8fd9\u4e9b\u8c8c\u4f3c\u201c\u6ca1\u7528\u201d\u7684\u91cf\u4e0a\u8fdb\u884c\u7a81\u7834\uff0c\u6bd4\u5982\u672c\u9898\u7684 \\(D\\) \u3002 \u8003\u8651\u8017\u8d39\u7a7a\u95f4\u7684\u4f4d\u7f6e\uff1a\u867d\u7136\u6709\u4f20\u64ad\u5ef6\u8fdf \\(d\\) \u7684\u5b58\u5728\uff0c\u4f46\u5728\u67d0\u4e2a\u65f6\u523b \\(t\\) \uff0c \u80fd\u5f71\u54cd\u5230\u795e\u7ecf\u5143 \\(I_k\\) \u7684\u65f6\u523b\u8303\u56f4\u5728 \\([t, t+\\max\\{d\\}]\\) \u8303\u56f4\u5185\u3002 \u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e \\(k>t+\\max\\{d\\}\\) \u7684 \\(I_k\\) \u6211\u4eec\u6ca1\u5fc5\u8981\u8bb0\u5f55\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6709\u8109\u51b2\u5bf9\u5176\u9020\u6210\u5f71\u54cd\uff1b \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e \\(k<t\\) \u7684 \\(I_k\\) \u6211\u4eec\u6ca1\u5fc5\u8981\u4fdd\u7559\u3002 \u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4 \\(k\\in [t, t+\\max\\{d\\}]\\) \u7684 \\(I_k\\) \u503c\u5c31\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u5229\u7528{\\heiti{\u6eda\u52a8\u6570\u7ec4}}\u8fdb\u884c\u4f18\u5316\u3002 \u6eda\u52a8\u6570\u7ec4 \u6eda\u52a8\u6570\u7ec4\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u901a\u8fc7\u5bf9\u6570\u7ec4\u201c\u53d6\u4f59\u201d\u6765\u7f29\u5c0f\u7a7a\u95f4\u3002\u8bbe\u76ee\u524d\u9700\u8981\u4fdd\u7559\u503c\u7684\u4e2a\u6570\u4e3a \\(p\\) \uff0c\u5219\u5728\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u540e\uff0c\u539f\u6570\u7ec4\u5728 \\(i\\) \u7684\u4f4d\u7f6e\u7531 \\(i \\bmod p\\) \u66ff\u4ee3\u3002 \u4e0d\u59a8\u8bbe\u6c42\u89e3\u539f\u6570\u7ec4\u4e2d \\(i\\) \u4f4d\u7f6e\u503c\u6d89\u53ca\u7684\u4f4d\u7f6e\u6709 \\([i-p, i-1]\\) \uff0c \u5f53\u8ba1\u7b97\u51fa\u539f\u6570\u7ec4 \\(i\\) \u4f4d\u7f6e\u7684\u503c\u540e\uff0c\u76f4\u63a5\u8986\u76d6 \\(i \\bmod p\\) \u4f4d\u7f6e\u7684\u503c\u5373\u53ef\u3002 \u56e0\u4e3a\u88ab\u8986\u76d6\u7684\u503c\u4e3a \\(i-p\\) \u4f4d\u7f6e\u7684\u503c\uff0c\u5728\u4e0b\u6b21\u8ba1\u7b97 \\(i+1\\) \u4f4d\u7f6e\u7684\u503c\u65f6\uff0c \u9700\u8981\u7684\u533a\u95f4\u4e3a \\([i-p+1,i]\\) \uff0c\u5df2\u7ecf\u4e0d\u9700\u8981\u5b58\u50a8\u8be5\u4f4d\u7f6e\u7684\u503c\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3\u8986\u76d6\u3002 \u5728\u9009\u53d6\u5408\u9002\u7684 \\(p\\) \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c3d\u91cf\u5927\u4e00\u4e9b\uff0c\u9632\u6b62\u8986\u76d6\u9700\u8981\u4fdd\u7559\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6eda\u52a8\u6570\u7ec4\u7684\u601d\u8def\uff0c\u5c06\u7a7a\u95f4\u4f18\u5316\u5230 \\(\\mathrm{O}(ND)\\) \uff0c\u5373\u53ef\u901a\u8fc7\u6b64\u9898\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 1010 ; const int maxD = 1010 ; // \u5982\u679c\u4f7f\u7528\u539f\u9898\u7684 next \u53ef\u80fd\u4f1a CE\uff0c\u8fd9\u91cc\u6539\u6210 nxt static unsigned long nxt = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { nxt = nxt * 1103515245 + 12345 ; return (( unsigned )( nxt / 65536 ) % 32768 ); } int N , S , P , T ; double dt ; // \u8109\u51b2\u6e90\u53ea\u9700\u8981 r \u53c2\u6570\u5373\u53ef int r [ maxn ]; // \u795e\u7ecf\u5143 struct Neuron { double v , u , a , b , c , d ; int activate_times ; } neuron [ maxn << 1 ]; // \u7a81\u89e6 struct Synapse { int s , t ; double w ; int D ; } synapse [ maxn << 1 ]; // \u5b58\u56fe vector < int > G [ maxn << 1 ]; // \u5b58\u50a8\u6bcf\u4e2a\u65f6\u523b\u6bcf\u4e2a\u8282\u70b9\u7684 Ik \u503c double I [ maxD ][ maxn ]; int main () { scanf ( \"%d%d%d%d\" , & N , & S , & P , & T ); scanf ( \"%lf\" , & dt ); int cur = 0 , rn ; double ru , rv , ra , rb , rc , rd ; while ( cur < N ) { scanf ( \"%d\" , & rn ); scanf ( \"%lf%lf%lf%lf%lf%lf\" , & rv , & ru , & ra , & rb , & rc , & rd ); while ( rn -- ) { neuron [ cur ]. v = rv ; neuron [ cur ]. u = ru ; neuron [ cur ]. a = ra ; neuron [ cur ]. b = rb ; neuron [ cur ]. c = rc ; neuron [ cur ]. d = rd ; neuron [ cur ]. activate_times = 0 ; ++ cur ; } } for ( int i = 0 ; i < P ; ++ i ) { scanf ( \"%d\" , & r [ i ]); } for ( int i = 0 ; i < S ; ++ i ) { scanf ( \"%d%d\" , & synapse [ i ]. s , & synapse [ i ]. t ); scanf ( \"%lf\" , & synapse [ i ]. w ); scanf ( \"%d\" , & synapse [ i ]. D ); // \u8fde\u8fb9 G [ synapse [ i ]. s ]. push_back ( i ); } // \u6309\u65f6\u95f4\u9012\u589e for ( int t = 0 ; t < T ; ++ t ) { // \u6eda\u52a8\u6570\u7ec4\u6e05\u96f6 for ( int i = 0 ; i < N ; ++ i ) { I [( t - 1 + maxD ) % maxD ][ i ] = 0 ; } // \u8109\u51b2\u6e90 for ( int i = 0 ; i < P ; ++ i ) { if ( r [ i ] > myrand ()) { // \u8109\u51b2\u6fc0\u53d1 for ( int j = 0 ; j < G [ N + i ]. size (); ++ j ) { Synapse tmps = synapse [ G [ N + i ][ j ]]; I [( t + tmps . D ) % maxD ][ tmps . t ] += tmps . w ; } } } // \u795e\u7ecf\u5143 for ( int i = 0 ; i < N ; ++ i ) { double u = neuron [ i ]. u , v = neuron [ i ]. v ; neuron [ i ]. v = v + dt * ( 0.04 * v * v + 5 * v + 140 - u ) + I [ t % maxD ][ i ]; neuron [ i ]. u = u + dt * neuron [ i ]. a * ( neuron [ i ]. b * v - u ); if ( neuron [ i ]. v >= 30 ) { // \u8109\u51b2\u6fc0\u53d1 neuron [ i ]. v = neuron [ i ]. c ; neuron [ i ]. u += neuron [ i ]. d ; ++ neuron [ i ]. activate_times ; for ( int j = 0 ; j < G [ i ]. size (); ++ j ) { Synapse tmps = synapse [ G [ i ][ j ]]; I [( t + tmps . D ) % maxD ][ tmps . t ] += tmps . w ; } } } } // \u8f93\u51fa\u7ed3\u679c double minv = 1e18 , maxv = -1e18 ; int mint = 1e9 , maxt = 0 ; for ( int i = 0 ; i < N ; ++ i ) { if ( neuron [ i ]. v < minv ) minv = neuron [ i ]. v ; if ( neuron [ i ]. v > maxv ) maxv = neuron [ i ]. v ; if ( mint > neuron [ i ]. activate_times ) mint = neuron [ i ]. activate_times ; if ( maxt < neuron [ i ]. activate_times ) maxt = neuron [ i ]. activate_times ; } printf ( \"%.3lf %.3lf \\n %d %d\" , minv , maxv , mint , maxt ); return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/23/3/1/#202109-3","text":"","title":"202109-3 \u8109\u51b2\u795e\u7ecf\u7f51\u7edc"},{"location":"problem/23/3/1/#70","text":"\u5148\u4e0d\u8003\u8651\u5177\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u601d\u8003\u6734\u7d20\u505a\u6cd5\u5e94\u8be5\u600e\u4e48\u505a\uff1a \u679a\u4e3e \\([0,T]\\) \u6bcf\u4e2a\u65f6\u523b\uff0c\u8fd9\u91cc\u5e94\u4e3a\u4e00\u4e2a\u5916\u5c42\u5faa\u73af\uff1b \u5bf9\u8109\u51b2\u6e90\u8fdb\u884c\u5904\u7406\uff1a\u901a\u8fc7 \\(r\\) \u53c2\u6570\u5224\u65ad\u662f\u5426\u4f1a\u53d1\u5c04\u8109\u51b2\uff1b \u5bf9\u795e\u7ecf\u5143\u8fdb\u884c\u5904\u7406\uff1a\u901a\u8fc7 \\(v_k\\) \u5224\u65ad\u662f\u5426\u4f1a\u53d1\u5c04\u8109\u51b2\uff1b\u5982\u679c\u53d1\u5c04\u8109\u51b2\uff0c\u5219\u66f4\u65b0 \\(u_k,v_k\\) \u3002 \u5224\u65ad\u8109\u51b2\u6e90\u662f\u5426\u53d1\u5c04\u8109\u51b2\u76f8\u5bf9\u5bb9\u6613\u3002\u4f46\u5bf9\u4e8e\u795e\u7ecf\u5143\u6765\u8bf4\uff0c\u7531\u4e8e\u4f20\u64ad\u5ef6\u8fdf\u7684\u5b58\u5728\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053 \\(I_k\\) \uff0c \u5373\u795e\u7ecf\u5143\u5728 \\(k\\) \u65f6\u523b\u63a5\u6536\u5230\u6240\u6709\u8109\u51b2\u8f93\u5165\u7684\u5f3a\u5ea6\u4e4b\u548c\u3002 \u53c8\u7531\u4e8e\u6bcf\u4e2a\u795e\u7ecf\u5143\u662f\u5426\u53d1\u5c04\u8109\u51b2\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053 \u6bcf\u4e2a\u795e\u7ecf\u5143 \u5728 \u6bcf\u4e2a\u65f6\u523b \u63a5\u6536\u5230\u7684\u8109\u51b2\u548c\u3002 \u4e00\u79cd\u601d\u8def\u662f\u5f00\u4e00\u4e2a \\(\\mathrm{O}(NT)\\) \u7684\u4e8c\u7ef4\u6570\u7ec4\u6765\u8bb0\u5f55\u3002\u7531\u4e8e\u7a7a\u95f4\u5927\u5c0f\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7 \\(70%\\) \u6570\u636e\u3002 \u518d\u6765\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u679a\u4e3e\u65f6\u523b\u662f \\(\\mathrm{O}(T)\\) \uff0c\u679a\u4e3e\u8109\u51b2\u3001\u795e\u7ecf\u5143\u53ca\u53d1\u5c04\u8109\u51b2\u9700\u8981 \\(\\mathrm{O}(N+S+P)\\) \uff0c \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(T(N+S+P))\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u6570\u636e\u3002","title":"70% \u6570\u636e\u2014\u2014\u6a21\u62df"},{"location":"problem/23/3/1/#100","text":"\u4e3a\u4e86\u5f97\u5230\u6ee1\u5206\uff0c\u76ee\u524d\u7684\u4efb\u52a1\u662f\u7f29\u5c0f\u8bb0\u5f55\u6bcf\u4e2a\u795e\u7ecf\u5143 \\(I_k\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u63d0\u793a \u9898\u76ee\u7ed9\u51fa\u7684\u91cf\u7684\u5927\u5c0f\u4e00\u822c\u90fd\u662f\u6709\u7528\u7684\u3002\u5982\u679c\u6ca1\u6709\u601d\u8def\u65f6\uff0c\u53ef\u4ee5\u4ece\u8fd9\u4e9b\u8c8c\u4f3c\u201c\u6ca1\u7528\u201d\u7684\u91cf\u4e0a\u8fdb\u884c\u7a81\u7834\uff0c\u6bd4\u5982\u672c\u9898\u7684 \\(D\\) \u3002 \u8003\u8651\u8017\u8d39\u7a7a\u95f4\u7684\u4f4d\u7f6e\uff1a\u867d\u7136\u6709\u4f20\u64ad\u5ef6\u8fdf \\(d\\) \u7684\u5b58\u5728\uff0c\u4f46\u5728\u67d0\u4e2a\u65f6\u523b \\(t\\) \uff0c \u80fd\u5f71\u54cd\u5230\u795e\u7ecf\u5143 \\(I_k\\) \u7684\u65f6\u523b\u8303\u56f4\u5728 \\([t, t+\\max\\{d\\}]\\) \u8303\u56f4\u5185\u3002 \u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e \\(k>t+\\max\\{d\\}\\) \u7684 \\(I_k\\) \u6211\u4eec\u6ca1\u5fc5\u8981\u8bb0\u5f55\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6709\u8109\u51b2\u5bf9\u5176\u9020\u6210\u5f71\u54cd\uff1b \u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e \\(k<t\\) \u7684 \\(I_k\\) \u6211\u4eec\u6ca1\u5fc5\u8981\u4fdd\u7559\u3002 \u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4 \\(k\\in [t, t+\\max\\{d\\}]\\) \u7684 \\(I_k\\) \u503c\u5c31\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u53ef\u4ee5\u5229\u7528{\\heiti{\u6eda\u52a8\u6570\u7ec4}}\u8fdb\u884c\u4f18\u5316\u3002 \u6eda\u52a8\u6570\u7ec4 \u6eda\u52a8\u6570\u7ec4\u662f\u4e00\u79cd\u601d\u60f3\uff0c\u901a\u8fc7\u5bf9\u6570\u7ec4\u201c\u53d6\u4f59\u201d\u6765\u7f29\u5c0f\u7a7a\u95f4\u3002\u8bbe\u76ee\u524d\u9700\u8981\u4fdd\u7559\u503c\u7684\u4e2a\u6570\u4e3a \\(p\\) \uff0c\u5219\u5728\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\u540e\uff0c\u539f\u6570\u7ec4\u5728 \\(i\\) \u7684\u4f4d\u7f6e\u7531 \\(i \\bmod p\\) \u66ff\u4ee3\u3002 \u4e0d\u59a8\u8bbe\u6c42\u89e3\u539f\u6570\u7ec4\u4e2d \\(i\\) \u4f4d\u7f6e\u503c\u6d89\u53ca\u7684\u4f4d\u7f6e\u6709 \\([i-p, i-1]\\) \uff0c \u5f53\u8ba1\u7b97\u51fa\u539f\u6570\u7ec4 \\(i\\) \u4f4d\u7f6e\u7684\u503c\u540e\uff0c\u76f4\u63a5\u8986\u76d6 \\(i \\bmod p\\) \u4f4d\u7f6e\u7684\u503c\u5373\u53ef\u3002 \u56e0\u4e3a\u88ab\u8986\u76d6\u7684\u503c\u4e3a \\(i-p\\) \u4f4d\u7f6e\u7684\u503c\uff0c\u5728\u4e0b\u6b21\u8ba1\u7b97 \\(i+1\\) \u4f4d\u7f6e\u7684\u503c\u65f6\uff0c \u9700\u8981\u7684\u533a\u95f4\u4e3a \\([i-p+1,i]\\) \uff0c\u5df2\u7ecf\u4e0d\u9700\u8981\u5b58\u50a8\u8be5\u4f4d\u7f6e\u7684\u503c\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u653e\u5fc3\u8986\u76d6\u3002 \u5728\u9009\u53d6\u5408\u9002\u7684 \\(p\\) \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5c3d\u91cf\u5927\u4e00\u4e9b\uff0c\u9632\u6b62\u8986\u76d6\u9700\u8981\u4fdd\u7559\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6eda\u52a8\u6570\u7ec4\u7684\u601d\u8def\uff0c\u5c06\u7a7a\u95f4\u4f18\u5316\u5230 \\(\\mathrm{O}(ND)\\) \uff0c\u5373\u53ef\u901a\u8fc7\u6b64\u9898\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 1010 ; const int maxD = 1010 ; // \u5982\u679c\u4f7f\u7528\u539f\u9898\u7684 next \u53ef\u80fd\u4f1a CE\uff0c\u8fd9\u91cc\u6539\u6210 nxt static unsigned long nxt = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { nxt = nxt * 1103515245 + 12345 ; return (( unsigned )( nxt / 65536 ) % 32768 ); } int N , S , P , T ; double dt ; // \u8109\u51b2\u6e90\u53ea\u9700\u8981 r \u53c2\u6570\u5373\u53ef int r [ maxn ]; // \u795e\u7ecf\u5143 struct Neuron { double v , u , a , b , c , d ; int activate_times ; } neuron [ maxn << 1 ]; // \u7a81\u89e6 struct Synapse { int s , t ; double w ; int D ; } synapse [ maxn << 1 ]; // \u5b58\u56fe vector < int > G [ maxn << 1 ]; // \u5b58\u50a8\u6bcf\u4e2a\u65f6\u523b\u6bcf\u4e2a\u8282\u70b9\u7684 Ik \u503c double I [ maxD ][ maxn ]; int main () { scanf ( \"%d%d%d%d\" , & N , & S , & P , & T ); scanf ( \"%lf\" , & dt ); int cur = 0 , rn ; double ru , rv , ra , rb , rc , rd ; while ( cur < N ) { scanf ( \"%d\" , & rn ); scanf ( \"%lf%lf%lf%lf%lf%lf\" , & rv , & ru , & ra , & rb , & rc , & rd ); while ( rn -- ) { neuron [ cur ]. v = rv ; neuron [ cur ]. u = ru ; neuron [ cur ]. a = ra ; neuron [ cur ]. b = rb ; neuron [ cur ]. c = rc ; neuron [ cur ]. d = rd ; neuron [ cur ]. activate_times = 0 ; ++ cur ; } } for ( int i = 0 ; i < P ; ++ i ) { scanf ( \"%d\" , & r [ i ]); } for ( int i = 0 ; i < S ; ++ i ) { scanf ( \"%d%d\" , & synapse [ i ]. s , & synapse [ i ]. t ); scanf ( \"%lf\" , & synapse [ i ]. w ); scanf ( \"%d\" , & synapse [ i ]. D ); // \u8fde\u8fb9 G [ synapse [ i ]. s ]. push_back ( i ); } // \u6309\u65f6\u95f4\u9012\u589e for ( int t = 0 ; t < T ; ++ t ) { // \u6eda\u52a8\u6570\u7ec4\u6e05\u96f6 for ( int i = 0 ; i < N ; ++ i ) { I [( t - 1 + maxD ) % maxD ][ i ] = 0 ; } // \u8109\u51b2\u6e90 for ( int i = 0 ; i < P ; ++ i ) { if ( r [ i ] > myrand ()) { // \u8109\u51b2\u6fc0\u53d1 for ( int j = 0 ; j < G [ N + i ]. size (); ++ j ) { Synapse tmps = synapse [ G [ N + i ][ j ]]; I [( t + tmps . D ) % maxD ][ tmps . t ] += tmps . w ; } } } // \u795e\u7ecf\u5143 for ( int i = 0 ; i < N ; ++ i ) { double u = neuron [ i ]. u , v = neuron [ i ]. v ; neuron [ i ]. v = v + dt * ( 0.04 * v * v + 5 * v + 140 - u ) + I [ t % maxD ][ i ]; neuron [ i ]. u = u + dt * neuron [ i ]. a * ( neuron [ i ]. b * v - u ); if ( neuron [ i ]. v >= 30 ) { // \u8109\u51b2\u6fc0\u53d1 neuron [ i ]. v = neuron [ i ]. c ; neuron [ i ]. u += neuron [ i ]. d ; ++ neuron [ i ]. activate_times ; for ( int j = 0 ; j < G [ i ]. size (); ++ j ) { Synapse tmps = synapse [ G [ i ][ j ]]; I [( t + tmps . D ) % maxD ][ tmps . t ] += tmps . w ; } } } } // \u8f93\u51fa\u7ed3\u679c double minv = 1e18 , maxv = -1e18 ; int mint = 1e9 , maxt = 0 ; for ( int i = 0 ; i < N ; ++ i ) { if ( neuron [ i ]. v < minv ) minv = neuron [ i ]. v ; if ( neuron [ i ]. v > maxv ) maxv = neuron [ i ]. v ; if ( mint > neuron [ i ]. activate_times ) mint = neuron [ i ]. activate_times ; if ( maxt < neuron [ i ]. activate_times ) maxt = neuron [ i ]. activate_times ; } printf ( \"%.3lf %.3lf \\n %d %d\" , minv , maxv , mint , maxt ); return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u6eda\u52a8\u6570\u7ec4\u4f18\u5316"},{"location":"problem/23/4/","text":"202109-4 \u6536\u96c6\u5361\u724c \u9898\u76ee\u94fe\u63a5 202109-4 \u6536\u96c6\u5361\u724c \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 20 n,k\u22645 \u641c\u7d22 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 20 p i \u76f8\u540c \u5316\u7b80\u72b6\u6001\u540e\u6253\u8868\u6216\u8bb0\u5fc6\u5316\u641c\u7d22 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u8bb0\u5fc6\u5316\u641c\u7d22 C++ \u9898\u89e3\u94fe\u63a5","title":"202109-4 \u6536\u96c6\u5361\u724c"},{"location":"problem/23/4/#202109-4","text":"","title":"202109-4 \u6536\u96c6\u5361\u724c"},{"location":"problem/23/4/#_1","text":"202109-4 \u6536\u96c6\u5361\u724c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/23/4/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 20 n,k\u22645 \u641c\u7d22 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 20 p i \u76f8\u540c \u5316\u7b80\u72b6\u6001\u540e\u6253\u8868\u6216\u8bb0\u5fc6\u5316\u641c\u7d22 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u8bb0\u5fc6\u5316\u641c\u7d22 C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/4/1/","text":"202109-4 \u6536\u96c6\u5361\u724c 20% \u6570\u636e\u2014\u2014\u641c\u7d22 \u5bf9\u4e8e\u8fd9\u79cd\u9700\u8981\u679a\u4e3e\u72b6\u6001\u7684\u671f\u671b\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6df1\u641c\u89e3\u51b3\u3002\u4e00\u822c\u800c\u8a00\uff0c\u641c\u7d22\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u6b63\u63a8\u3002\u8003\u8651\u4ece\u4e00\u4e2a\u72b6\u6001\u51fa\u53d1\u80fd\u591f\u63a8\u53ca\u5230\u7684\u72b6\u6001\uff0c\u5728\u9012\u5f52\u7ec8\u70b9\u65f6\u5bf9\u7b54\u6848\u8fdb\u884c\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5c06\u503c\u56de\u4f20\u7ed9\u4e0a\u4e2a\u72b6\u6001\u3002 \u9006\u63a8\u3002\u8003\u8651\u4e00\u4e2a\u72b6\u6001\u80fd\u4ece\u54ea\u51e0\u4e2a\u540e\u7ee7\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u5148\u9012\u5f52\u5230\u7ec8\u70b9\uff0c\u518d\u9010\u6e10\u8fd4\u56de\u66f4\u65b0\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u7b14\u8005\u8ba4\u4e3a \u9006\u63a8 \u76f8\u5bf9\u5bb9\u6613\u5b9e\u73b0\u3002 \u6b63\u63a8 \u8003\u8651\u9700\u8981\u7ef4\u62a4\u7684\u72b6\u6001\u91cf\uff1a \u76ee\u524d\u62bd\u4e86\u51e0\u6b21\u5361 \\(cost\\) \uff0c\u7528\u6765\u8ba1\u7b97\u671f\u671b\uff1b \u8f6c\u79fb\u5230\u67d0\u4e2a\u62bd\u5361\u72b6\u6001\u7684\u6982\u7387 \\(p\\) \uff0c\u7528\u6765\u8ba1\u7b97\u671f\u671b\uff1b \u76ee\u524d\u6301\u6709\u5361\u7684\u72b6\u6001 \\(state\\) \uff0c\u7528\u6765\u7edf\u8ba1\u83b7\u5f97\u5361\u7247\u8fd8\u662f\u83b7\u5f97\u91d1\u5e01\uff0c\u4ee5\u53ca\u5224\u65ad\u6e38\u620f\u7ed3\u675f\u3002\u6ce8\u610f\u8fd9\u91cc\u662f\u7edf\u8ba1\u6bcf\u5f20\u5361\u724c\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u603b\u5171\u6709\u591a\u5c11\u5f20\u724c\uff1b \u786c\u5e01\u4e2a\u6570 \\(coin\\) \uff0c\u7528\u6765\u5224\u65ad\u6e38\u620f\u7ed3\u675f\uff1b \u6ce8\uff1a\u8fd9\u6b65\u72b6\u6001\u8bbe\u8ba1\u5b58\u5728\u5197\u4f59\u7684\u91cf\uff1a\u901a\u8fc7 \\(state\\) \u548c \\(coin\\) \u53ef\u4ee5\u63a8\u7b97\u51fa\u76ee\u524d\u62bd\u4e86\u51e0\u6b21\u5361 \\(cost\\) \u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u8bb2\u89e3\uff0c\u8fd9\u91cc\u4e0d\u8fdb\u884c\u5408\u5e76\u3002 \u5047\u8bbe\u76ee\u524d\u7684\u72b6\u6001\u662f \\((cost, p, state, coin)\\) \uff0c\u8003\u8651\u4e0b\u4e00\u6b65\u8f6c\u79fb\u7684\u65b9\u5411\uff1a \u901a\u8fc7 \\(state\\) \u53ef\u4ee5\u5f97\u77e5 \u672a\u83b7\u5f97 \u7684\u724c\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u82e5 \\(coin \\ge tot * k\\) \uff0c\u5219\u8bf4\u660e\u76ee\u524d\u53ef\u4ee5\u7528\u786c\u5e01\u4e70\u5230\u6240\u6709\u7684\u5361\u724c\uff0c\u5bf9\u7b54\u6848\u8d21\u732e \\(p\\cdot cost\\) \uff1b \u5426\u5219\uff0c\u6211\u4eec\u8981\u7ee7\u7eed\u62bd\u5361\uff0c\u679a\u4e3e\u62bd\u5230\u724c\u7684\u6240\u6709\u60c5\u51b5\u3002\u5047\u8bbe\u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e3a \\(i\\) \uff0c\u7ed3\u679c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u5df2\u7ecf\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state \\not= 0\\) \u3002\u8be5\u5361\u724c\u4f1a\u8f6c\u6362\u4e3a\u4e00\u4e2a\u786c\u5e01\uff0c\u8f6c\u79fb\u5230\u7684\u4e0b\u4e2a\u72b6\u6001\u4e3a \\((cost + 1, p \\cdot p_i, state, coin + 1)\\) \uff1b \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e0d\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state = 0\\) \u3002\u9700\u8981\u66f4\u65b0\u6301\u6709\u5361\u724c\u7684\u72b6\u6001\uff0c\u8f6c\u79fb\u5230\u4e0b\u4e2a\u72b6\u6001\u4e3a \\((cost + 1, p \\cdot p_i, state\\ |\\ 2^i, coin)\\) \uff1b \u8003\u8651\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u4e00\u6b21\u4ece \\(n\\) \u79cd\u5361\u724c\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5f20\uff0c\u6700\u591a\u62bd\u5361\u6b21\u6570 \\(k(n-1)+1\\) \uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^{k(n-1)+1})\\) \uff0c\u660e\u663e\u8fc7\u4e0d\u4e86\u3002\u4f46\u4ece\u5b9e\u9645\u4e0a\u8003\u8651\uff0c\u53ef\u80fd\u7684\u72b6\u6001\u6ca1\u6709\u8fd9\u4e48\u591a\uff08\u6bd4\u5982\u62bd\u5361\u6b21\u6570\u6700\u591a\u7684\u51e0\u6b21\uff0c\u9700\u8981\u4fdd\u8bc1\u5168\u7a0b\u53ea\u80fd\u62bd\u5230\u540c\u4e00\u5f20\u5361\u724c\uff09\u3002\u7b14\u8005\u7684\u7a0b\u5e8f\u5728 \\(n=k=5\\) \u7684\u65f6\u5019\uff0c\u8fdb\u5165\u4e0d\u540c\u72b6\u6001\u7684\u6b21\u6570\u4e3a \\(46459906\\) \u3002 \u9006\u63a8 \u76f8\u6bd4\u6b63\u63a8\uff0c\u9006\u63a8\u7684\u4e3b\u8981\u601d\u8def\u662f\uff1a\u6240\u6709\u80fd\u8f6c\u79fb\u5230\u7684\u540e\u7ee7\u72b6\u6001\u7684\u671f\u671b\u548c +1\uff0c\u76f8\u6bd4\u6b63\u63a8\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u91cf\uff1a \u76ee\u524d\u6301\u6709\u5361\u7684\u72b6\u6001 \\(state\\) \uff1b \u76ee\u524d\u6301\u6709\u7684\u786c\u5e01\u6570 \\(coin\\) \u3002 \u8bbe\u76ee\u524d\u7684\u72b6\u6001\u662f \\((state, coin)\\) \uff0c\u8003\u8651\u4e0b\u4e00\u6b65\u8f6c\u79fb\u7684\u65b9\u5411\uff1a \u901a\u8fc7 \\(state\\) \u53ef\u4ee5\u5f97\u77e5 \u672a\u83b7\u5f97 \u7684\u724c\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u82e5 \\(coin \\ge tot * k\\) \uff0c\u5219\u8bf4\u660e\u76ee\u524d\u53ef\u4ee5\u7528\u786c\u5e01\u4e70\u5230\u6240\u6709\u7684\u5361\u724c\uff0c\u8fd4\u56de 0 \u5373\u53ef\uff08\u56e0\u4e3a\u4e0d\u7528\u518d\u62bd\u4e86\uff09\uff1b \u5426\u5219\uff0c\u679a\u4e3e\u62bd\u5230\u724c\u7684\u6240\u6709\u60c5\u51b5\uff0c\u7edf\u8ba1\u6240\u6709\u7684\u671f\u671b\u548c\uff0c\u6700\u540e +1\u3002\u5047\u8bbe\u62bd\u5230\u7684\u5361\u724c\u4e3a \\(i\\) \uff0c\u7ed3\u679c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u5df2\u7ecf\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state \\not= 0\\) \u3002\u8be5\u5361\u724c\u4f1a\u8f6c\u6362\u4e3a\u4e00\u4e2a\u786c\u5e01\uff0c\u6240\u4ee5\u5bf9\u5e94\u72b6\u6001\u6bd4\u76ee\u524d\u786c\u5e01\u6570\u591a\u4e00\uff0c\u5373 \\((state, coin + 1)\\) \uff1b \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e0d\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state = 0\\) \u3002\u9700\u8981\u66f4\u65b0\u6301\u6709\u5361\u724c\u7684\u72b6\u6001\uff0c\u6240\u5bf9\u5e94\u7684\u72b6\u6001\u4e3a \\((state\\ |\\ 2^i, coin)\\) \uff1b \u4ee3\u7801\u5b9e\u73b0 C++ \u6b63\u63a8 C++ \u9006\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } // \u6ce8\uff1a\u5b58\u5728\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u5199\u6cd5\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6574\u4f53 ans\uff0c\u5728\u6bcf\u4e2a\u9012\u5f52\u7ec8\u70b9\u66f4\u65b0\u3002 double dfs ( int cost , double curp , int state , int coin ) { /* cost: \u76ee\u524d\u662f\u7b2c\u51e0\u6b21\u62bd\u5361 curp: \u5230\u8fbe\u76ee\u524d\u72b6\u6001\u7684\u6982\u7387 state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return cost * curp ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state | ( 1 << i ), coin ); } } return res ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 1 , 0 , 0 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int state , int coin ) { /* state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return 0 ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state | ( 1 << i ), coin ); } } return res + 1 ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 0 )); return 0 ; } \u62bd\u5230\u6bcf\u5f20\u5361\u6982\u7387\u76f8\u540c\u2014\u2014\u5316\u7b80\u72b6\u6001\u540e\u6253\u8868\u6216\u8bb0\u5fc6\u5316\u641c\u7d22 \u8003\u8651\u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u8f6c\u79fb\u65b9\u7a0b\uff1a \u7531\u4e8e\u62bd\u5230\u6bcf\u5f20\u5361\u724c\u7684\u6982\u7387\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a \\(n\\) \u5f20\u5361\u724c\u5316\u7b80\u4e3a \\(2\\) \u79cd\uff1a \u62bd\u5230\u5df2\u6709\u7684\u5361\u724c \u548c \u62bd\u5230\u65b0\u7684\u5361\u724c \uff0c\u5c06\u8f6c\u79fb\u65b9\u5411\u4ece \\(n\\) \u79cd\u8f6c\u53d8\u4e3a \\(2\\) \u79cd\u3002 \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u5141\u8bb8\u3002\u7b14\u8005\u7684\u7a0b\u5e8f\u5728 \\(n=16,k=5\\) \u7684\u65f6\u5019\uff0c\u8fdb\u5165\u641c\u7d22 \\(1127462785\\) \u6b21\uff0c\u5728\u65f6\u95f4\u5141\u8bb8\u8303\u56f4\u5185\u65e0\u6cd5\u5f97\u51fa\u7ed3\u679c\u3002\u9700\u8981\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u8fdb\u884c\u4e00\u5b9a\u4f18\u5316\u3002 \u6253\u8868 \u56e0\u4e3a\u62bd\u5230\u6bcf\u5f20\u5361\u724c\u7684\u6982\u7387\u90fd\u662f \\(\\frac{1}{n}\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u6709\u6548\u7684\u503c\u4e3a \\(n, k\\) \uff0c\u800c \\(n,k\\) \u7ec4\u5408\u7684\u6709\u6548\u53d6\u503c\u53ea\u6709 \\(16\\times 5 = 80\\) \u79cd\u3002 \u5728 \\(n=16,k=5\\) \u7684\u65f6\u5019\u8fdb\u5165\u641c\u7d22 \\(1127462785\\) \u6b21\uff0c\u6309\u7167\u4e00\u79d2 \\(10^7\\) \u6b21\u8fd0\u7b97\u7684\u8bdd\u5927\u6982\u9700\u8981\u4e0d\u5230 2min \u5c31\u53ef\u4ee5\u5f97\u51fa\u7ed3\u679c\uff0c\u5728\u6bd4\u8d5b\u65f6\u662f\u6709\u65f6\u95f4\u6253\u5b8c\u7684\uff08\u5f53\u7136\uff0c\u524d\u63d0\u662f\u8bfb\u5230\u8fd9\u9053\u9898\u65f6\u6bd4\u8d5b\u65f6\u95f4\u5269\u7684\u4e0d\u662f\u592a\u5c11\uff09\u3002 \u8bb0\u5fc6\u5316\u641c\u7d22 \u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u6570\u91cf \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5728 \u6d88\u9664\u5230\u8fd9\u4e00\u6b65\u7684\u6982\u7387 \u7684\u5f71\u54cd\u540e\uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u5b9a\u7684\u3002 \u5982\u679c\u60f3\u5230\u8bb0\u5fc6\u5316\u641c\u7d22\u4e86\uff0c\u57fa\u672c\u4e0a\u5c31\u80fd\u60f3\u51fa\u6b63\u89e3\u4e86\u3002 100% \u6570\u636e\u2014\u2014\u8bb0\u5fc6\u5316\u641c\u7d22 \u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u65f6\uff0c\u91c7\u7528 \u9006\u63a8 \u7684\u65b9\u6cd5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002 \u6b63\u63a8 \u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u60c5\u51b5 \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5728 \u6d88\u9664\u5230\u8fd9\u4e00\u6b65\u7684\u6982\u7387 \u7684\u5f71\u54cd\u540e\uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u5b9a\u7684\u3002 \u4e00\u4e2a\u4f8b\u5b50 \u8bbe \\(n=3,k=5\\) \u3002\u5047\u8bbe\u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u5361\u7247 \\(A,B\\) \u4e14\u6301\u6709\u786c\u5e01 \\(3\\) \u679a\uff08\u7531\u6b64\u53ef\u4ee5\u5f97\u77e5\u6211\u4eec\u5df2\u7ecf\u62bd\u4e86 5 \u6b21\u5361\uff09\uff0c\u8f6c\u79fb\u5230\u8be5\u72b6\u6001\u7684\u6982\u7387\u4e3a \\(p_{cur}\\) \uff0c\u90a3\u4e48\u6211\u4eec\u4e0b\u4e00\u6b65\u62bd\u5361\u5219\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u4ee5 \\(p_c\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(C\\) \uff0c\u5219\u7ed3\u675f\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (6p_c)\\) \uff1b \u4ee5 \\(p_a\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(A\\) \uff0c\u5219\u72b6\u6001\u8f6c\u53d8\u4e3a\u6301\u6709 4 \u679a\u786c\u5e01\u3002\u63a5\u4e0b\u6765\u65e0\u8bba\u62bd\u5230\u54ea\u5f20\u5361\u724c\u90fd\u4f1a\u7ed3\u675f\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (7p_a)\\) \uff1b \u4ee5 \\(p_b\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(B\\) \uff0c\u4e0e\u4e0a\u4e00\u6761\u76f8\u4f3c\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (7p_b)\\) \uff1b \u7efc\u5408\u4e0b\u6765\uff0c\u8be5\u90e8\u5206\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (6p_c+7p_a+7p_b)\\) \u3002\u53ef\u4ee5\u53d1\u73b0\u5728\u6d88\u53bb \\(p_{cur}\\) \u7684\u5f71\u54cd\u540e\uff0c\u8be5\u90e8\u5206\u7684\u503c\u662f\u4e00\u5b9a\u7684\u3002 \u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u72b6\u6001\uff0c\u4e0d\u53bb\u91cd\u590d\u8ba1\u7b97\u7ed3\u679c\u5373\u53ef\u3002 \u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6301\u6709\u5361\u724c\u60c5\u51b5\u4e3a \\(\\mathrm{O}(2^n)\\) \uff0c\u6301\u6709\u786c\u5e01\u7684\u6570\u91cf\u4e3a \\(\\mathrm{O}(nk)\\) \uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(2^n\\cdot nk)\\) \u3002 \u9006\u63a8 \u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u60c5\u51b5 \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u671f\u671b\u6b65\u6570\u662f\u786e\u5b9a\u7684\u3002 \u6211\u4eec\u5728\u641c\u7d22\u65f6\u8bb0\u5f55\u72b6\u6001\uff0c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(2^n\\cdot nk)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ \u6b63\u63a8 C++ \u9006\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; double f [ 66000 ][ 90 ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int cost , double curp , int state , int coin ) { /* cost: \u76ee\u524d\u662f\u7b2c\u51e0\u6b21\u62bd\u5361 curp: \u5230\u8fbe\u76ee\u524d\u72b6\u6001\u7684\u6982\u7387 state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ if ( f [ state ][ coin ] != 0 ) { // \u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u76f4\u63a5\u8fd4\u56de\u5373\u53ef return f [ state ][ coin ] * curp ; } int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f f [ state ][ coin ] = cost ; return cost * curp ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state | ( 1 << i ), coin ); } } // \u8bb0\u5f55\u6d88\u9664 curp \u5f71\u54cd\u540e\u7684\u503c f [ state ][ coin ] = res / curp ; return res ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 1 , 0 , 0 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; double f [ 66000 ][ 90 ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int state , int coin ) { /* state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ if ( f [ state ][ coin ] >= 0 ) { // \u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u76f4\u63a5\u8fd4\u56de\u5373\u53ef return f [ state ][ coin ]; } int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return f [ state ][ coin ] = 0 ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state | ( 1 << i ), coin ); } } // \u8bb0\u5f55\u5e76\u8fd4\u56de return f [ state ][ coin ] = res + 1 ; } int main () { memset ( f , 0xfe , sizeof ( f )); // \u521d\u59cb\u5316 f \u6570\u7ec4\u4e3a\u8d1f\u6570 scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 0 )); return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/23/4/1/#202109-4","text":"","title":"202109-4 \u6536\u96c6\u5361\u724c"},{"location":"problem/23/4/1/#20","text":"\u5bf9\u4e8e\u8fd9\u79cd\u9700\u8981\u679a\u4e3e\u72b6\u6001\u7684\u671f\u671b\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6df1\u641c\u89e3\u51b3\u3002\u4e00\u822c\u800c\u8a00\uff0c\u641c\u7d22\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u6b63\u63a8\u3002\u8003\u8651\u4ece\u4e00\u4e2a\u72b6\u6001\u51fa\u53d1\u80fd\u591f\u63a8\u53ca\u5230\u7684\u72b6\u6001\uff0c\u5728\u9012\u5f52\u7ec8\u70b9\u65f6\u5bf9\u7b54\u6848\u8fdb\u884c\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u5c06\u503c\u56de\u4f20\u7ed9\u4e0a\u4e2a\u72b6\u6001\u3002 \u9006\u63a8\u3002\u8003\u8651\u4e00\u4e2a\u72b6\u6001\u80fd\u4ece\u54ea\u51e0\u4e2a\u540e\u7ee7\u72b6\u6001\u8f6c\u79fb\u800c\u6765\uff0c\u5148\u9012\u5f52\u5230\u7ec8\u70b9\uff0c\u518d\u9010\u6e10\u8fd4\u56de\u66f4\u65b0\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u7b14\u8005\u8ba4\u4e3a \u9006\u63a8 \u76f8\u5bf9\u5bb9\u6613\u5b9e\u73b0\u3002","title":"20% \u6570\u636e\u2014\u2014\u641c\u7d22"},{"location":"problem/23/4/1/#_1","text":"\u8003\u8651\u9700\u8981\u7ef4\u62a4\u7684\u72b6\u6001\u91cf\uff1a \u76ee\u524d\u62bd\u4e86\u51e0\u6b21\u5361 \\(cost\\) \uff0c\u7528\u6765\u8ba1\u7b97\u671f\u671b\uff1b \u8f6c\u79fb\u5230\u67d0\u4e2a\u62bd\u5361\u72b6\u6001\u7684\u6982\u7387 \\(p\\) \uff0c\u7528\u6765\u8ba1\u7b97\u671f\u671b\uff1b \u76ee\u524d\u6301\u6709\u5361\u7684\u72b6\u6001 \\(state\\) \uff0c\u7528\u6765\u7edf\u8ba1\u83b7\u5f97\u5361\u7247\u8fd8\u662f\u83b7\u5f97\u91d1\u5e01\uff0c\u4ee5\u53ca\u5224\u65ad\u6e38\u620f\u7ed3\u675f\u3002\u6ce8\u610f\u8fd9\u91cc\u662f\u7edf\u8ba1\u6bcf\u5f20\u5361\u724c\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u603b\u5171\u6709\u591a\u5c11\u5f20\u724c\uff1b \u786c\u5e01\u4e2a\u6570 \\(coin\\) \uff0c\u7528\u6765\u5224\u65ad\u6e38\u620f\u7ed3\u675f\uff1b \u6ce8\uff1a\u8fd9\u6b65\u72b6\u6001\u8bbe\u8ba1\u5b58\u5728\u5197\u4f59\u7684\u91cf\uff1a\u901a\u8fc7 \\(state\\) \u548c \\(coin\\) \u53ef\u4ee5\u63a8\u7b97\u51fa\u76ee\u524d\u62bd\u4e86\u51e0\u6b21\u5361 \\(cost\\) \u3002\u4f46\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u8bb2\u89e3\uff0c\u8fd9\u91cc\u4e0d\u8fdb\u884c\u5408\u5e76\u3002 \u5047\u8bbe\u76ee\u524d\u7684\u72b6\u6001\u662f \\((cost, p, state, coin)\\) \uff0c\u8003\u8651\u4e0b\u4e00\u6b65\u8f6c\u79fb\u7684\u65b9\u5411\uff1a \u901a\u8fc7 \\(state\\) \u53ef\u4ee5\u5f97\u77e5 \u672a\u83b7\u5f97 \u7684\u724c\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u82e5 \\(coin \\ge tot * k\\) \uff0c\u5219\u8bf4\u660e\u76ee\u524d\u53ef\u4ee5\u7528\u786c\u5e01\u4e70\u5230\u6240\u6709\u7684\u5361\u724c\uff0c\u5bf9\u7b54\u6848\u8d21\u732e \\(p\\cdot cost\\) \uff1b \u5426\u5219\uff0c\u6211\u4eec\u8981\u7ee7\u7eed\u62bd\u5361\uff0c\u679a\u4e3e\u62bd\u5230\u724c\u7684\u6240\u6709\u60c5\u51b5\u3002\u5047\u8bbe\u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e3a \\(i\\) \uff0c\u7ed3\u679c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u5df2\u7ecf\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state \\not= 0\\) \u3002\u8be5\u5361\u724c\u4f1a\u8f6c\u6362\u4e3a\u4e00\u4e2a\u786c\u5e01\uff0c\u8f6c\u79fb\u5230\u7684\u4e0b\u4e2a\u72b6\u6001\u4e3a \\((cost + 1, p \\cdot p_i, state, coin + 1)\\) \uff1b \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e0d\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state = 0\\) \u3002\u9700\u8981\u66f4\u65b0\u6301\u6709\u5361\u724c\u7684\u72b6\u6001\uff0c\u8f6c\u79fb\u5230\u4e0b\u4e2a\u72b6\u6001\u4e3a \\((cost + 1, p \\cdot p_i, state\\ |\\ 2^i, coin)\\) \uff1b \u8003\u8651\u4e00\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6bcf\u4e00\u6b21\u4ece \\(n\\) \u79cd\u5361\u724c\u4e2d\u968f\u673a\u9009\u62e9\u4e00\u5f20\uff0c\u6700\u591a\u62bd\u5361\u6b21\u6570 \\(k(n-1)+1\\) \uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(n^{k(n-1)+1})\\) \uff0c\u660e\u663e\u8fc7\u4e0d\u4e86\u3002\u4f46\u4ece\u5b9e\u9645\u4e0a\u8003\u8651\uff0c\u53ef\u80fd\u7684\u72b6\u6001\u6ca1\u6709\u8fd9\u4e48\u591a\uff08\u6bd4\u5982\u62bd\u5361\u6b21\u6570\u6700\u591a\u7684\u51e0\u6b21\uff0c\u9700\u8981\u4fdd\u8bc1\u5168\u7a0b\u53ea\u80fd\u62bd\u5230\u540c\u4e00\u5f20\u5361\u724c\uff09\u3002\u7b14\u8005\u7684\u7a0b\u5e8f\u5728 \\(n=k=5\\) \u7684\u65f6\u5019\uff0c\u8fdb\u5165\u4e0d\u540c\u72b6\u6001\u7684\u6b21\u6570\u4e3a \\(46459906\\) \u3002","title":"\u6b63\u63a8"},{"location":"problem/23/4/1/#_2","text":"\u76f8\u6bd4\u6b63\u63a8\uff0c\u9006\u63a8\u7684\u4e3b\u8981\u601d\u8def\u662f\uff1a\u6240\u6709\u80fd\u8f6c\u79fb\u5230\u7684\u540e\u7ee7\u72b6\u6001\u7684\u671f\u671b\u548c +1\uff0c\u76f8\u6bd4\u6b63\u63a8\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u91cf\uff1a \u76ee\u524d\u6301\u6709\u5361\u7684\u72b6\u6001 \\(state\\) \uff1b \u76ee\u524d\u6301\u6709\u7684\u786c\u5e01\u6570 \\(coin\\) \u3002 \u8bbe\u76ee\u524d\u7684\u72b6\u6001\u662f \\((state, coin)\\) \uff0c\u8003\u8651\u4e0b\u4e00\u6b65\u8f6c\u79fb\u7684\u65b9\u5411\uff1a \u901a\u8fc7 \\(state\\) \u53ef\u4ee5\u5f97\u77e5 \u672a\u83b7\u5f97 \u7684\u724c\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u82e5 \\(coin \\ge tot * k\\) \uff0c\u5219\u8bf4\u660e\u76ee\u524d\u53ef\u4ee5\u7528\u786c\u5e01\u4e70\u5230\u6240\u6709\u7684\u5361\u724c\uff0c\u8fd4\u56de 0 \u5373\u53ef\uff08\u56e0\u4e3a\u4e0d\u7528\u518d\u62bd\u4e86\uff09\uff1b \u5426\u5219\uff0c\u679a\u4e3e\u62bd\u5230\u724c\u7684\u6240\u6709\u60c5\u51b5\uff0c\u7edf\u8ba1\u6240\u6709\u7684\u671f\u671b\u548c\uff0c\u6700\u540e +1\u3002\u5047\u8bbe\u62bd\u5230\u7684\u5361\u724c\u4e3a \\(i\\) \uff0c\u7ed3\u679c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u5df2\u7ecf\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state \\not= 0\\) \u3002\u8be5\u5361\u724c\u4f1a\u8f6c\u6362\u4e3a\u4e00\u4e2a\u786c\u5e01\uff0c\u6240\u4ee5\u5bf9\u5e94\u72b6\u6001\u6bd4\u76ee\u524d\u786c\u5e01\u6570\u591a\u4e00\uff0c\u5373 \\((state, coin + 1)\\) \uff1b \u76ee\u524d\u62bd\u5230\u7684\u5361\u724c\u4e0d\u5b58\u5728\uff0c\u5373 \\(2^i\\ \\&\\ state = 0\\) \u3002\u9700\u8981\u66f4\u65b0\u6301\u6709\u5361\u724c\u7684\u72b6\u6001\uff0c\u6240\u5bf9\u5e94\u7684\u72b6\u6001\u4e3a \\((state\\ |\\ 2^i, coin)\\) \uff1b \u4ee3\u7801\u5b9e\u73b0 C++ \u6b63\u63a8 C++ \u9006\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } // \u6ce8\uff1a\u5b58\u5728\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u5199\u6cd5\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6574\u4f53 ans\uff0c\u5728\u6bcf\u4e2a\u9012\u5f52\u7ec8\u70b9\u66f4\u65b0\u3002 double dfs ( int cost , double curp , int state , int coin ) { /* cost: \u76ee\u524d\u662f\u7b2c\u51e0\u6b21\u62bd\u5361 curp: \u5230\u8fbe\u76ee\u524d\u72b6\u6001\u7684\u6982\u7387 state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return cost * curp ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state | ( 1 << i ), coin ); } } return res ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 1 , 0 , 0 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int state , int coin ) { /* state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return 0 ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state | ( 1 << i ), coin ); } } return res + 1 ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 0 )); return 0 ; }","title":"\u9006\u63a8"},{"location":"problem/23/4/1/#_3","text":"\u8003\u8651\u5728\u539f\u672c\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u8f6c\u79fb\u65b9\u7a0b\uff1a \u7531\u4e8e\u62bd\u5230\u6bcf\u5f20\u5361\u724c\u7684\u6982\u7387\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a \\(n\\) \u5f20\u5361\u724c\u5316\u7b80\u4e3a \\(2\\) \u79cd\uff1a \u62bd\u5230\u5df2\u6709\u7684\u5361\u724c \u548c \u62bd\u5230\u65b0\u7684\u5361\u724c \uff0c\u5c06\u8f6c\u79fb\u65b9\u5411\u4ece \\(n\\) \u79cd\u8f6c\u53d8\u4e3a \\(2\\) \u79cd\u3002 \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u5141\u8bb8\u3002\u7b14\u8005\u7684\u7a0b\u5e8f\u5728 \\(n=16,k=5\\) \u7684\u65f6\u5019\uff0c\u8fdb\u5165\u641c\u7d22 \\(1127462785\\) \u6b21\uff0c\u5728\u65f6\u95f4\u5141\u8bb8\u8303\u56f4\u5185\u65e0\u6cd5\u5f97\u51fa\u7ed3\u679c\u3002\u9700\u8981\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u8fdb\u884c\u4e00\u5b9a\u4f18\u5316\u3002","title":"\u62bd\u5230\u6bcf\u5f20\u5361\u6982\u7387\u76f8\u540c\u2014\u2014\u5316\u7b80\u72b6\u6001\u540e\u6253\u8868\u6216\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"problem/23/4/1/#_4","text":"\u56e0\u4e3a\u62bd\u5230\u6bcf\u5f20\u5361\u724c\u7684\u6982\u7387\u90fd\u662f \\(\\frac{1}{n}\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u6709\u6548\u7684\u503c\u4e3a \\(n, k\\) \uff0c\u800c \\(n,k\\) \u7ec4\u5408\u7684\u6709\u6548\u53d6\u503c\u53ea\u6709 \\(16\\times 5 = 80\\) \u79cd\u3002 \u5728 \\(n=16,k=5\\) \u7684\u65f6\u5019\u8fdb\u5165\u641c\u7d22 \\(1127462785\\) \u6b21\uff0c\u6309\u7167\u4e00\u79d2 \\(10^7\\) \u6b21\u8fd0\u7b97\u7684\u8bdd\u5927\u6982\u9700\u8981\u4e0d\u5230 2min \u5c31\u53ef\u4ee5\u5f97\u51fa\u7ed3\u679c\uff0c\u5728\u6bd4\u8d5b\u65f6\u662f\u6709\u65f6\u95f4\u6253\u5b8c\u7684\uff08\u5f53\u7136\uff0c\u524d\u63d0\u662f\u8bfb\u5230\u8fd9\u9053\u9898\u65f6\u6bd4\u8d5b\u65f6\u95f4\u5269\u7684\u4e0d\u662f\u592a\u5c11\uff09\u3002","title":"\u6253\u8868"},{"location":"problem/23/4/1/#_5","text":"\u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u6570\u91cf \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5728 \u6d88\u9664\u5230\u8fd9\u4e00\u6b65\u7684\u6982\u7387 \u7684\u5f71\u54cd\u540e\uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u5b9a\u7684\u3002 \u5982\u679c\u60f3\u5230\u8bb0\u5fc6\u5316\u641c\u7d22\u4e86\uff0c\u57fa\u672c\u4e0a\u5c31\u80fd\u60f3\u51fa\u6b63\u89e3\u4e86\u3002","title":"\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"problem/23/4/1/#100","text":"\u4f7f\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u65f6\uff0c\u91c7\u7528 \u9006\u63a8 \u7684\u65b9\u6cd5\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u3002","title":"100% \u6570\u636e\u2014\u2014\u8bb0\u5fc6\u5316\u641c\u7d22"},{"location":"problem/23/4/1/#_6","text":"\u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u60c5\u51b5 \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u5728 \u6d88\u9664\u5230\u8fd9\u4e00\u6b65\u7684\u6982\u7387 \u7684\u5f71\u54cd\u540e\uff0c\u5bf9\u6700\u7ec8\u7b54\u6848\u7684\u8d21\u732e\u662f\u4e00\u5b9a\u7684\u3002 \u4e00\u4e2a\u4f8b\u5b50 \u8bbe \\(n=3,k=5\\) \u3002\u5047\u8bbe\u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u5361\u7247 \\(A,B\\) \u4e14\u6301\u6709\u786c\u5e01 \\(3\\) \u679a\uff08\u7531\u6b64\u53ef\u4ee5\u5f97\u77e5\u6211\u4eec\u5df2\u7ecf\u62bd\u4e86 5 \u6b21\u5361\uff09\uff0c\u8f6c\u79fb\u5230\u8be5\u72b6\u6001\u7684\u6982\u7387\u4e3a \\(p_{cur}\\) \uff0c\u90a3\u4e48\u6211\u4eec\u4e0b\u4e00\u6b65\u62bd\u5361\u5219\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u4ee5 \\(p_c\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(C\\) \uff0c\u5219\u7ed3\u675f\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (6p_c)\\) \uff1b \u4ee5 \\(p_a\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(A\\) \uff0c\u5219\u72b6\u6001\u8f6c\u53d8\u4e3a\u6301\u6709 4 \u679a\u786c\u5e01\u3002\u63a5\u4e0b\u6765\u65e0\u8bba\u62bd\u5230\u54ea\u5f20\u5361\u724c\u90fd\u4f1a\u7ed3\u675f\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (7p_a)\\) \uff1b \u4ee5 \\(p_b\\) \u7684\u6982\u7387\u62bd\u5230\u5361\u7247 \\(B\\) \uff0c\u4e0e\u4e0a\u4e00\u6761\u76f8\u4f3c\u3002\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (7p_b)\\) \uff1b \u7efc\u5408\u4e0b\u6765\uff0c\u8be5\u90e8\u5206\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(p_{cur}\\cdot (6p_c+7p_a+7p_b)\\) \u3002\u53ef\u4ee5\u53d1\u73b0\u5728\u6d88\u53bb \\(p_{cur}\\) \u7684\u5f71\u54cd\u540e\uff0c\u8be5\u90e8\u5206\u7684\u503c\u662f\u4e00\u5b9a\u7684\u3002 \u6211\u4eec\u5728\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u72b6\u6001\uff0c\u4e0d\u53bb\u91cd\u590d\u8ba1\u7b97\u7ed3\u679c\u5373\u53ef\u3002 \u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6301\u6709\u5361\u724c\u60c5\u51b5\u4e3a \\(\\mathrm{O}(2^n)\\) \uff0c\u6301\u6709\u786c\u5e01\u7684\u6570\u91cf\u4e3a \\(\\mathrm{O}(nk)\\) \uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u4e3a \\(\\mathrm{O}(2^n\\cdot nk)\\) \u3002","title":"\u6b63\u63a8"},{"location":"problem/23/4/1/#_7","text":"\u8003\u8651\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\uff1a\u5f53\u76ee\u524d \u6301\u6709\u5361\u724c\u60c5\u51b5 \u548c \u6301\u6709\u91d1\u5e01\u6570\u91cf \u786e\u5b9a\u7684\u65f6\u5019\uff0c\u671f\u671b\u6b65\u6570\u662f\u786e\u5b9a\u7684\u3002 \u6211\u4eec\u5728\u641c\u7d22\u65f6\u8bb0\u5f55\u72b6\u6001\uff0c\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(2^n\\cdot nk)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ \u6b63\u63a8 C++ \u9006\u63a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; double f [ 66000 ][ 90 ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int cost , double curp , int state , int coin ) { /* cost: \u76ee\u524d\u662f\u7b2c\u51e0\u6b21\u62bd\u5361 curp: \u5230\u8fbe\u76ee\u524d\u72b6\u6001\u7684\u6982\u7387 state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ if ( f [ state ][ coin ] != 0 ) { // \u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u76f4\u63a5\u8fd4\u56de\u5373\u53ef return f [ state ][ coin ] * curp ; } int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f f [ state ][ coin ] = cost ; return cost * curp ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += dfs ( cost + 1 , curp * p [ i ], state | ( 1 << i ), coin ); } } // \u8bb0\u5f55\u6d88\u9664 curp \u5f71\u54cd\u540e\u7684\u503c f [ state ][ coin ] = res / curp ; return res ; } int main () { scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 1 , 0 , 0 )); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; const int maxn = 20 ; int n , k ; double p [ maxn ]; double f [ 66000 ][ 90 ]; inline int calc ( int state ) { // \u8fd4\u56de\u76ee\u524d\u5df2\u7ecf\u62bd\u5230\u4e86\u51e0\u5f20\u5361 int cur = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) ++ cur ; } return cur ; } double dfs ( int state , int coin ) { /* state: \u76ee\u524d\u6301\u6709\u5361\u724c\u72b6\u6001 coin: \u76ee\u524d\u6301\u6709\u786c\u5e01\u4e2a\u6570 */ if ( f [ state ][ coin ] >= 0 ) { // \u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u76f4\u63a5\u8fd4\u56de\u5373\u53ef return f [ state ][ coin ]; } int cur = calc ( state ); if (( n - cur ) * k <= coin ) { // \u5f53\u524d\u786c\u5e01\u8db3\u4ee5\u5151\u6362\u6240\u6709\u672a\u83b7\u5f97\u5361\u724c\uff0c\u7ed3\u675f return f [ state ][ coin ] = 0 ; } double res = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( state & ( 1 << i )) { // \u62bd\u5230\u5df2\u7ecf\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state , coin + 1 ); } else { // \u62bd\u5230\u672a\u83b7\u5f97\u7684\u5361\u724c res += p [ i ] * dfs ( state | ( 1 << i ), coin ); } } // \u8bb0\u5f55\u5e76\u8fd4\u56de return f [ state ][ coin ] = res + 1 ; } int main () { memset ( f , 0xfe , sizeof ( f )); // \u521d\u59cb\u5316 f \u6570\u7ec4\u4e3a\u8d1f\u6570 scanf ( \"%d%d\" , & n , & k ); for ( int i = 0 ; i < n ; ++ i ) { scanf ( \"%lf\" , & p [ i ]); } printf ( \"%.10lf \\n \" , dfs ( 0 , 0 )); return 0 ; }","title":"\u9006\u63a8"},{"location":"problem/23/5/","text":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b \u9898\u76ee\u94fe\u63a5 202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 \u5efa\u7acb\u6811\u6a21\u578b \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 10 m\u22645000 \u641c\u7d22\u786e\u5b9a\u8def\u5f84 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 10 \u4e8b\u4ef6 1 \u4e2d x>0 \u7ebf\u6bb5\u6811 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 40 mode=0\uff08\u79bb\u7ebf\uff09 \u6811\u94fe\u5256\u5206 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 Link Cut Tree C++ \u9898\u89e3\u94fe\u63a5","title":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b"},{"location":"problem/23/5/#202109-5","text":"","title":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b"},{"location":"problem/23/5/#_1","text":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/23/5/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 \u5efa\u7acb\u6811\u6a21\u578b \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 10 m\u22645000 \u641c\u7d22\u786e\u5b9a\u8def\u5f84 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 10 \u4e8b\u4ef6 1 \u4e2d x>0 \u7ebf\u6bb5\u6811 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 40 mode=0\uff08\u79bb\u7ebf\uff09 \u6811\u94fe\u5256\u5206 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 Link Cut Tree C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/23/5/1/","text":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b \u524d\u8a00\u2014\u2014\u5efa\u7acb\u6811\u6a21\u578b \u9898\u76ee\u8981\u6c42\u5bf9\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c\uff0c \u5f3a\u5236\u5728\u7ebf \uff1a \u5220\u9664\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u5728\u6570\u7ec4\u672b\u5c3e\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u6ce8\u610f\u5220\u6389\u540e\u53c8\u52a0\u5165\u7684\u5143\u7d20\u4e0e\u4e4b\u524d\u5143\u7d20\u4e0d\u80fd\u89c6\u4e3a\u76f8\u540c\u7684\u5143\u7d20\uff1b \u5728\u7b2c \\(s\\) \u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u4e2d\uff0c\u5c06 \\([l,r]\\) \u4f4d\u7f6e\u7684\u6240\u6709\u5143\u7d20\u4e58\u4ee5 \\(y\\) \uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u6c38\u4e45\u6027\u7684\uff1b \u67e5\u8be2\u5728\u7b2c \\(s\\) \u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u4e2d \\([l,r]\\) \u4f4d\u7f6e\u6240\u6709\u5143\u7d20 \u76ee\u524d \u503c\u7684\u548c\u3002 \u5982\u679c\u77e5\u9053\u4e3b\u5e2d\u6811\uff1f \u5bf9\u4e8e\u5386\u53f2\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u60f3\u5230\u4e3b\u5e2d\u6811\u3002\u4f46\u4f7f\u7528\u4e3b\u5e2d\u6811\u65f6\u4f1a\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff1a \u5f3a\u5236\u5728\u7ebf\uff0c\u4e14\u64cd\u4f5c\u4e2d\u5b58\u5728\u6dfb\u52a0\u5220\u9664\u5143\u7d20\u3002\u4e3b\u5e2d\u6811\u4e0d\u592a\u65b9\u4fbf\u5b9e\u73b0\u3002 \u4e3b\u5e2d\u6811\u4e00\u822c\u53ea\u9488\u5bf9\u6700\u540e\u7684\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ea\u4f1a\u5f71\u54cd\u5230 \\(\\mathrm{O}(\\log n)\\) \u5143\u7d20\uff0c\u51cf\u5c0f\u7a7a\u95f4\u5360\u7528\u3002\u4f46\u8fd9\u91cc\u7684\u533a\u95f4\u4e58\u4e0d\u662f\u9488\u5bf9\u6700\u7ec8\u72b6\u6001\uff0c\u5f71\u54cd\u8303\u56f4\u5f88\u5927\uff0c\u7a7a\u95f4\u5360\u7528\u4f1a\u5f88\u591a\u3002 \u8003\u8651\u7528\u4ec0\u4e48\u6837\u7684\u7ed3\u6784\u53bb\u5b58\u50a8\u4fe1\u606f\u3002 \u7ef4\u62a4\u6bcf\u4e2a\u64cd\u4f5c\u540e\u7684\u6570\u7ec4 \u4e00\u79cd\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u7ef4\u62a4\u6bcf\u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u3002 \u8fd9\u79cd\u505a\u6cd5\u5b58\u5728\u65f6\u95f4\u95ee\u9898\uff1a\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5b83\u5f71\u54cd\u5230\u7684\u8303\u56f4\u662f \\(\\mathrm{O}(m^2)\\) \u7684\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^3)\\) \u3002 \u5408\u5e76\u5143\u7d20 \u601d\u8003\u6d6a\u8d39\u65f6\u95f4\u7684\u5730\u65b9\uff1a \u8bbe \\(t\\) \u65f6\u523b \\(x\\) \u4f4d\u7f6e\u7684\u503c\u4e3a \\(A_{x,t}\\) \u3002\u5047\u8bbe\u76ee\u524d\u65f6\u523b\u662f \\(t_{cur}\\) \uff0c\u5982\u679c\u5728 \\(s\\) \u65f6\u523b\u4fee\u6539\u4e86 \\(x\\) \u4f4d\u7f6e\u7684\u503c\u4e14\u76f4\u5230 \\(t_{cur}\\) \u65f6\u523b\u8be5\u5143\u7d20\u4e00\u76f4\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u5f71\u54cd\u5230\u7684\u8303\u56f4\u662f \\(A_{x,s}, A_{x,s+1},\\cdots,A_{x, t_{cur}}\\) \u4e14\u64cd\u4f5c\u90fd\u662f\u76f8\u540c\u7684\u3002\u800c\u9898\u76ee\u4e2d\u6240\u6709\u7684\u67e5\u8be2\u53ea\u9488\u5bf9\u76ee\u524d\u800c\u8a00\uff0c\u5373\u53ea\u9700\u8981 \\(A_{x, t_{cur}}\\) \u3002 \u6211\u4eec\u4e0d\u9700\u8981\u7ef4\u62a4\u4e2d\u95f4\u72b6\u6001\u7684\u5177\u4f53\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u4e2d\u95f4\u72b6\u6001\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff08\u6392\u540d\uff09 \u3002 \u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5 \u53ea\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u76ee\u524d\u65f6\u523b\u7684\u72b6\u6001 \uff0c\u5728\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u53ea\u9488\u5bf9\u5f53\u524d\u60c5\u51b5\u4fee\u6539\u5373\u53ef\u3002 \u67e5\u627e\u4f4d\u7f6e\u5bf9\u5e94\u5143\u7d20 \u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u4fdd\u7559\u4e86\u6700\u7ec8\u72b6\u6001\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u786e\u5b9a\u67d0\u65f6\u523b\u67d0\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u5047\u8bbe\u8981\u786e\u5b9a\u5728 \\(s\\) \u65f6\u523b\u4f4d\u7f6e\u5728 \\(x\\) \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u4e0d\u53d8\u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5143\u7d20\u7f16\u53f7\u4e0e\u52a0\u5165\u65f6\u95f4\uff0c\u90a3\u4e48\u5728 \\(s\\) \u65f6\u523b\u4f4d\u7f6e\u5b50 \\(x\\) \u7684\u5143\u7d20\u5bf9\u5e94\u4f4d\u7f6e\u5728 \\(x\\) \u6570\u7ec4\u5185\u6700\u540e\u4e00\u4e2a\u52a0\u5165\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e \\(s\\) \u7684\u5143\u7d20\u3002 \u4f46\u662f\u8fd9\u6837\u4e5f\u5b58\u5728\u95ee\u9898\uff1a\u8981\u627e\u5230\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u6240\u6709\u5143\u7d20\u7684\u590d\u6742\u5ea6\u662f \\(\\mathrm{O}(m\\log m)\\) \u7684\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^2\\log m)\\) \uff0c\u4e0d\u592a\u80fd\u63a5\u53d7\u3002 \u8f6c\u53d8\u4e00\u4e0b\u601d\u8def\uff0c\u56e0\u4e3a\u589e\u52a0\u548c\u5220\u9664\u90fd\u662f\u5728\u672b\u7aef\u8fdb\u884c\uff0c\u6240\u4ee5\u5728\u67d0\u4e2a\u5143\u7d20\u88ab\u5220\u9664\u4e4b\u524d\uff0c\u5b83\u524d\u9762\u7684\u5143\u7d20\u90fd\u662f\u4e0d\u53d8\u7684\uff08\u7c7b\u4f3c\u4e8e\u6808\u9876\u5143\u7d20\u5148\u53d8\u5316\u3001\u6808\u5e95\u5143\u7d20\u540e\u53d8\u5316\uff09\u3002\u6211\u4eec\u4e0d\u59a8\u5c06\u6570\u7ec4\u89c6\u4e3a\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u5bf9\u5e94\u64cd\u4f5c\uff1a \u589e\u52a0\u4e00\u4e2a\u5143\u7d20\uff1a\u5728\u94fe\u7684\u672b\u7aef\u52a0\u5165\u5143\u7d20\u3002 \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff1a\u65ad\u5f00\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0e\u94fe\u7684\u8fde\u8fb9\uff0c\u7531\u4e8e\u9700\u8981\u64cd\u4f5c\u4e0d\u80fd\u5b9e\u9645\u65ad\u5f00\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\u7ecf\u8fc7\u8be5\u64cd\u4f5c\u540e\uff0c\u65b0\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u4e00\u68f5\u6811\uff08\u51c6\u786e\u6765\u8bf4\u662f\u68ee\u6797\uff0c\u4f46\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u7f6e\u4e3a \\(0\\) \u7684\u5143\u7d20\u6307\u5411\u6240\u6709\u4f4d\u7f6e\u4e3a \\(1\\) \u7684\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u5904\u7406\u6210\u4e86\u4e00\u68f5\u6811\uff09\uff0c\u90a3\u4e48\u8981\u67e5\u627e\u4e00\u6bb5\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e24\u7aef\uff0c\u5728\u6811\u4e0a\u786e\u5b9a\u4e86\u4e24\u7aef\u4e5f\u5c31\u786e\u5b9a\u4e86\u6574\u6761\u8def\u5f84\u3002\u67e5\u627e\u4e24\u70b9\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff0c\u786e\u5b9a\u8def\u5f84\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff0c\u6574\u4f53 \\(\\mathrm{O}(m)\\) \u3002 \u6700\u7ec8\u6a21\u578b \u7528\u4e00\u68f5\u6811\u6765\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u7684\u5f3a\u5ea6\uff0c\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u6570\u7ec4\u7684\u672b\u7aef\u5143\u7d20\u4f4d\u7f6e\uff1b\u7528\u6570\u7ec4\u7ef4\u62a4\u67d0\u4f4d\u7f6e\u4e2d\u6240\u6709\u5143\u7d20\u7684\u52a0\u5165\u65f6\u523b\u4e0e\u7f16\u53f7\uff0c\u4e0d\u59a8\u79f0\u5176\u4e3a\u6392\u540d\u6570\u7ec4\u3002 \u589e\u52a0\u5143\u7d20\uff1a\u5728\u5f53\u524d\u6570\u7ec4\u672b\u7aef\u5143\u7d20\u7684\u8282\u70b9\u5904\u589e\u52a0\u65b0\u7684\u5b50\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u8bbe\u4e3a\u672b\u7aef\u5143\u7d20\uff0c\u540c\u65f6\u66f4\u65b0\u6392\u540d\u6570\u7ec4\u3002 \u5220\u9664\u5143\u7d20\uff1a\u5f53\u524d\u6570\u7ec4\u672b\u7aef\u5143\u7d20\u53d8\u66f4\u4e3a\u5176\u7236\u4eb2\u8282\u70b9\u3002 \u4fee\u6539\u5143\u7d20\uff1a\u627e\u5230\u5bf9\u5e94\u5143\u7d20\u4f4d\u7f6e\uff0c\u8fdb\u884c\u94fe\u4e0a\u4fee\u6539\u3002 \u67e5\u8be2\u5143\u7d20\uff1a\u627e\u5230\u5bf9\u5e94\u5143\u7d20\u4f4d\u7f6e\uff0c\u8fdb\u884c\u94fe\u4e0a\u67e5\u8be2\u3002 \u6d4b\u8bd5\u70b9 1\u2014\u2014\u641c\u7d22\u786e\u5b9a\u8def\u5f84 \u5728\u5efa\u7acb\u6811\u6a21\u578b\u540e\uff0c\u6211\u4eec\u66b4\u529b\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\uff1a \u589e\u52a0\u5143\u7d20\uff1a\u590d\u6742\u5ea6 \\(\\mathrm{O}(1)\\) \uff1b \u5220\u9664\u5143\u7d20\uff1a\u590d\u6742\u5ea6 \\(\\mathrm{O}(1)\\) \uff1b \u4fee\u6539\u5143\u7d20\uff1a\u786e\u5b9a\u8def\u5f84\u5e76\u4fee\u6539\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff1b \u67e5\u8be2\u5143\u7d20\uff1a\u786e\u5b9a\u8def\u5f84\u5e76\u67e5\u8be2\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff1b \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^2)\\) \u3002 \u6d4b\u8bd5\u70b9 2\u2014\u2014\u7ebf\u6bb5\u6811 \u7531\u4e8e\u53ea\u6709\u589e\u52a0\u6ca1\u6709\u5220\u9664\uff0c\u6240\u4ee5\u6700\u7ec8\u5f62\u6001\u662f\u4e00\u6761\u94fe\u3002\u6211\u4eec\u7ef4\u62a4\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u521d\u59cb\u503c\u4e3a \\(0\\) \u3002 \u589e\u52a0\u5143\u7d20\uff1a\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u4fee\u6539\u5143\u7d20\uff1a\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u67e5\u8be2\u5143\u7d20\uff1a\u70b9\u6bb5\u6570\u533a\u95f4\u67e5\u8be2\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \uff1b \u4e0d\u8981\u6c42\u5728\u7ebf\u2014\u2014\u6811\u94fe\u5256\u5206 \u5173\u4e8e\u6811\u4e0a\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u4e00\u822c\u90fd\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u5b8c\u6210\uff0c\u4f46\u6811\u94fe\u5256\u5206\u9700\u8981\u9884\u5148\u77e5\u9053\u6811\u7684\u5f62\u72b6\uff0c\u800c\u672c\u9898\u4e2d\u70b9\u90fd\u662f\u52a8\u6001\u7684\uff0c\u65e0\u6cd5\u4e00\u5f00\u59cb\u5c31\u5f97\u77e5\u3002\u5982\u679c\u662f\u79bb\u7ebf\u7684\u8bdd\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6811\u7684\u5f62\u6001\uff0c\u8fdb\u884c\u5256\u5206\u3002 \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \uff1b 100% \u6570\u636e\u2014\u2014Link Cut Tree \u56e0\u4e3a\u6709\u5bf9\u6811\u7684\u52a8\u6001\u52a0\u70b9\uff0c\u6240\u4ee5\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a \u52a8\u6001\u6811\u95ee\u9898 \u3002\u89e3\u51b3\u52a8\u6001\u6811\u95ee\u9898\u7684\u7ed3\u6784\u4e4b\u4e00\u5c31\u662f LCT\u3002 \u672c\u9898\u7b97\u662f LCT \u7684\u677f\u5b50\u9898\uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; #define ll long long #define il inline const int maxn = 300010 ; int m , T ; ll mod ; // LCT \u90e8\u5206\u5f00\u59cb #define ls ch[x][0] #define rs ch[x][1] int ch [ maxn ][ 2 ], fa [ maxn ]; ll val [ maxn ], sum [ maxn ]; int lazy_rev [ maxn ]; ll lazy_mul [ maxn ]; #define getch(x) (ch[fa[x]][1] == x) #define isRoot(x) (ch[fa[x]][0] != x && ch[fa[x]][1] != x) void pushdownRev ( int x ) { // \u6267\u884c\u7ffb\u8f6c\u64cd\u4f5c swap ( ls , rs ); lazy_rev [ x ] ^= 1 ; } void pushdownMul ( int x , ll v ) { // \u6267\u884c\u533a\u95f4\u4e58\u64cd\u4f5c val [ x ] = ( val [ x ] * v ) % mod ; sum [ x ] = ( sum [ x ] * v ) % mod ; lazy_mul [ x ] = ( lazy_mul [ x ] * v ) % mod ; } void pushdown ( int x ) { // \u4e0b\u4f20\u61d2\u60f0\u6807\u8bb0 if ( lazy_rev [ x ]) { if ( ls ) pushdownRev ( ls ); if ( rs ) pushdownRev ( rs ); lazy_rev [ x ] ^= 1 ; } if ( lazy_mul [ x ] != 1 ) { if ( ls ) pushdownMul ( ls , lazy_mul [ x ]); if ( rs ) pushdownMul ( rs , lazy_mul [ x ]); lazy_mul [ x ] = 1 ; } } void pushup ( int x ) { // \u66f4\u65b0\u72b6\u6001 (maintain) sum [ x ] = ( sum [ ls ] + sum [ rs ] + val [ x ]) % mod ; } int st [ maxn ]; void rotate ( int x ) { // splay \u65cb\u8f6c\u64cd\u4f5c int y = fa [ x ], z = fa [ y ], chk = getch ( x ), w = ch [ x ][ chk ^ 1 ]; if ( ! isRoot ( y )) ch [ z ][ getch ( y )] = x ; ch [ x ][ chk ^ 1 ] = y ; ch [ y ][ chk ] = w ; if ( w ) fa [ w ] = y ; fa [ y ] = x , fa [ x ] = z ; pushup ( y ); } void splay ( int x ) { // \u5c06\u76ee\u524d\u7ed3\u70b9\u65cb\u8f6c\u5230\u6240\u5728 splay \u7684\u6839 int top = 0 , y = x ; st [ ++ top ] = y ; while ( ! isRoot ( y )) { y = fa [ y ]; st [ ++ top ] = y ; } while ( top ) pushdown ( st [ top -- ]); while ( ! isRoot ( x )) { y = fa [ x ]; if ( ! isRoot ( y )) rotate ( getch ( x ) == getch ( y ) ? y : x ); rotate ( x ); } pushup ( x ); } void access ( int x ) { // \u5f00\u8f9f\u4e00\u6761\u53ea\u542b\u6709\u539f\u6811\u7684\u6839\u5230 x \u7684\u8def\u5f84\u7ed3\u70b9\u7684\u5b9e\u94fe for ( int y = 0 ; x ; x = fa [ y = x ]) { splay ( x ); rs = y ; pushup ( x ); } } void makeRoot ( int x ) { // \u8ba9 x \u79f0\u4e3a\u539f\u6811\u7684\u6839 access ( x ); splay ( x ); pushdownRev ( x ); } void split ( int x , int y ) { // \u5f00\u8f9f\u4e00\u6761\u53ea\u542b\u6709 x \u5230 y \u8def\u5f84\u7ed3\u70b9\u7684\u5b9e\u94fe\uff0cy \u4e3a splay \u7684\u6839 makeRoot ( x ); access ( y ); splay ( y ); } void link ( int x , int y ) { // \u8fde\u63a5\u4e24\u4e2a\u90e8\u5206 makeRoot ( x ); fa [ x ] = y ; } // LCT \u90e8\u5206\u7ed3\u675f struct Player { /* \u961f\u5458\u7c7b\u3002 day: \u6210\u4e3a\u6b63\u5f0f\u961f\u5458\u7684\u65f6\u523b fa : \u524d\u4e00\u540d\u961f\u5458\u5bf9\u5e94\u7f16\u53f7 */ int day , fa ; Player ( int _d = 0 , int _f = 0 ) { day = _d , fa = _f ; } } player [ maxn ]; vector < int > ranklist [ maxn ]; // \u5b58\u50a8\u961f\u5458\u7f16\u53f7 int cur , cur_rank , tot ; void insertPlayer ( int day , ll v ) { // \u52a0\u5165\u65b0\u961f\u5458 ++ tot ; // \u5bf9\u539f\u6811\u8fdb\u884c\u64cd\u4f5c player [ tot ] = Player ( day , cur ); ++ cur_rank ; ranklist [ cur_rank ]. push_back ( tot ); // \u5bf9\u8f85\u52a9\u6811\u8fdb\u884c\u64cd\u4f5c val [ tot ] = sum [ tot ] = v ; lazy_mul [ tot ] = 1 ; lazy_rev [ tot ] = 0 ; // \u5982\u679c\u76ee\u524d\u961f\u4f0d\u6709\u4eba\uff0c\u5219\u52a0\u5165\u961f\u4f0d if ( cur ) link ( tot , cur ); cur = tot ; } int findPlayer ( int day , int rk ) { // \u67e5\u627e\u5728\u7b2c day \u5929\u6392\u540d rk \u7684\u961f\u5458\u7f16\u53f7 int l = 0 , r = ranklist [ rk ]. size () - 1 , mid , ans = 0 ; while ( l <= r ) { mid = ( l + r ) >> 1 ; if ( player [ ranklist [ rk ][ mid ]]. day <= day ) { ans = mid ; l = mid + 1 ; } else { r = mid - 1 ; } } return ranklist [ rk ][ ans ]; } int main () { scanf ( \"%d%lld%d\" , & m , & mod , & T ); int opt , s , l , r , x , y , A = 0 ; for ( int day = 1 ; day <= m ; ++ day ) { scanf ( \"%d\" , & opt ); if ( opt == 1 ) { scanf ( \"%d\" , & x ); if ( T == 1 ) x ^= A ; if ( x == 0 ) { // \u5220\u9664\u961f\u5458 cur = player [ cur ]. fa ; -- cur_rank ; } else { // \u52a0\u5165\u65b0\u961f\u5458 insertPlayer ( day , x ); } } else if ( opt == 2 ) { scanf ( \"%d%d%d%d\" , & s , & l , & r , & y ); if ( T == 1 ) y ^= A ; l = findPlayer ( s , l ); r = findPlayer ( s , r ); // \u627e\u5230 l \u5230 r \u7684\u5b9e\u94fe\uff0c\u6807\u8bb0\u4e58\u4ee5 y split ( l , r ); pushdownMul ( r , y ); } else { scanf ( \"%d%d%d\" , & s , & l , & r ); l = findPlayer ( s , l ); r = findPlayer ( s , r ); // \u627e\u5230 l \u5230 r \u7684\u5b9e\u94fe\uff0c\u6c42\u548c\u5373\u53ef split ( l , r ); A = sum [ r ]; printf ( \"%d \\n \" , A ); } } return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/23/5/1/#202109-5","text":"","title":"202109-5 \u7bb1\u6839\u5c71\u5cb3\u9669\u5929\u4e0b"},{"location":"problem/23/5/1/#_1","text":"\u9898\u76ee\u8981\u6c42\u5bf9\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c\u4ee5\u4e0b\u51e0\u4e2a\u64cd\u4f5c\uff0c \u5f3a\u5236\u5728\u7ebf \uff1a \u5220\u9664\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u5728\u6570\u7ec4\u672b\u5c3e\u52a0\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u6ce8\u610f\u5220\u6389\u540e\u53c8\u52a0\u5165\u7684\u5143\u7d20\u4e0e\u4e4b\u524d\u5143\u7d20\u4e0d\u80fd\u89c6\u4e3a\u76f8\u540c\u7684\u5143\u7d20\uff1b \u5728\u7b2c \\(s\\) \u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u4e2d\uff0c\u5c06 \\([l,r]\\) \u4f4d\u7f6e\u7684\u6240\u6709\u5143\u7d20\u4e58\u4ee5 \\(y\\) \uff0c\u8fd9\u4e2a\u64cd\u4f5c\u662f\u6c38\u4e45\u6027\u7684\uff1b \u67e5\u8be2\u5728\u7b2c \\(s\\) \u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u4e2d \\([l,r]\\) \u4f4d\u7f6e\u6240\u6709\u5143\u7d20 \u76ee\u524d \u503c\u7684\u548c\u3002 \u5982\u679c\u77e5\u9053\u4e3b\u5e2d\u6811\uff1f \u5bf9\u4e8e\u5386\u53f2\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u60f3\u5230\u4e3b\u5e2d\u6811\u3002\u4f46\u4f7f\u7528\u4e3b\u5e2d\u6811\u65f6\u4f1a\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff1a \u5f3a\u5236\u5728\u7ebf\uff0c\u4e14\u64cd\u4f5c\u4e2d\u5b58\u5728\u6dfb\u52a0\u5220\u9664\u5143\u7d20\u3002\u4e3b\u5e2d\u6811\u4e0d\u592a\u65b9\u4fbf\u5b9e\u73b0\u3002 \u4e3b\u5e2d\u6811\u4e00\u822c\u53ea\u9488\u5bf9\u6700\u540e\u7684\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ea\u4f1a\u5f71\u54cd\u5230 \\(\\mathrm{O}(\\log n)\\) \u5143\u7d20\uff0c\u51cf\u5c0f\u7a7a\u95f4\u5360\u7528\u3002\u4f46\u8fd9\u91cc\u7684\u533a\u95f4\u4e58\u4e0d\u662f\u9488\u5bf9\u6700\u7ec8\u72b6\u6001\uff0c\u5f71\u54cd\u8303\u56f4\u5f88\u5927\uff0c\u7a7a\u95f4\u5360\u7528\u4f1a\u5f88\u591a\u3002 \u8003\u8651\u7528\u4ec0\u4e48\u6837\u7684\u7ed3\u6784\u53bb\u5b58\u50a8\u4fe1\u606f\u3002","title":"\u524d\u8a00\u2014\u2014\u5efa\u7acb\u6811\u6a21\u578b"},{"location":"problem/23/5/1/#_2","text":"\u4e00\u79cd\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u7ef4\u62a4\u6bcf\u6b21\u64cd\u4f5c\u540e\u7684\u6570\u7ec4\u3002 \u8fd9\u79cd\u505a\u6cd5\u5b58\u5728\u65f6\u95f4\u95ee\u9898\uff1a\u5bf9\u4e8e\u4fee\u6539\u64cd\u4f5c\uff0c\u5b83\u5f71\u54cd\u5230\u7684\u8303\u56f4\u662f \\(\\mathrm{O}(m^2)\\) \u7684\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^3)\\) \u3002","title":"\u7ef4\u62a4\u6bcf\u4e2a\u64cd\u4f5c\u540e\u7684\u6570\u7ec4"},{"location":"problem/23/5/1/#_3","text":"\u601d\u8003\u6d6a\u8d39\u65f6\u95f4\u7684\u5730\u65b9\uff1a \u8bbe \\(t\\) \u65f6\u523b \\(x\\) \u4f4d\u7f6e\u7684\u503c\u4e3a \\(A_{x,t}\\) \u3002\u5047\u8bbe\u76ee\u524d\u65f6\u523b\u662f \\(t_{cur}\\) \uff0c\u5982\u679c\u5728 \\(s\\) \u65f6\u523b\u4fee\u6539\u4e86 \\(x\\) \u4f4d\u7f6e\u7684\u503c\u4e14\u76f4\u5230 \\(t_{cur}\\) \u65f6\u523b\u8be5\u5143\u7d20\u4e00\u76f4\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u90a3\u4e48\u5f71\u54cd\u5230\u7684\u8303\u56f4\u662f \\(A_{x,s}, A_{x,s+1},\\cdots,A_{x, t_{cur}}\\) \u4e14\u64cd\u4f5c\u90fd\u662f\u76f8\u540c\u7684\u3002\u800c\u9898\u76ee\u4e2d\u6240\u6709\u7684\u67e5\u8be2\u53ea\u9488\u5bf9\u76ee\u524d\u800c\u8a00\uff0c\u5373\u53ea\u9700\u8981 \\(A_{x, t_{cur}}\\) \u3002 \u6211\u4eec\u4e0d\u9700\u8981\u7ef4\u62a4\u4e2d\u95f4\u72b6\u6001\u7684\u5177\u4f53\u503c\uff0c\u53ea\u9700\u8981\u77e5\u9053\u4e2d\u95f4\u72b6\u6001\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\uff08\u6392\u540d\uff09 \u3002 \u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5 \u53ea\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u76ee\u524d\u65f6\u523b\u7684\u72b6\u6001 \uff0c\u5728\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u53ea\u9488\u5bf9\u5f53\u524d\u60c5\u51b5\u4fee\u6539\u5373\u53ef\u3002","title":"\u5408\u5e76\u5143\u7d20"},{"location":"problem/23/5/1/#_4","text":"\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u4fdd\u7559\u4e86\u6700\u7ec8\u72b6\u6001\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u786e\u5b9a\u67d0\u65f6\u523b\u67d0\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u5047\u8bbe\u8981\u786e\u5b9a\u5728 \\(s\\) \u65f6\u523b\u4f4d\u7f6e\u5728 \\(x\\) \u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u662f\u4e0d\u53d8\u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5143\u7d20\u7f16\u53f7\u4e0e\u52a0\u5165\u65f6\u95f4\uff0c\u90a3\u4e48\u5728 \\(s\\) \u65f6\u523b\u4f4d\u7f6e\u5b50 \\(x\\) \u7684\u5143\u7d20\u5bf9\u5e94\u4f4d\u7f6e\u5728 \\(x\\) \u6570\u7ec4\u5185\u6700\u540e\u4e00\u4e2a\u52a0\u5165\u65f6\u95f4\u5c0f\u4e8e\u7b49\u4e8e \\(s\\) \u7684\u5143\u7d20\u3002 \u4f46\u662f\u8fd9\u6837\u4e5f\u5b58\u5728\u95ee\u9898\uff1a\u8981\u627e\u5230\u4e00\u6bb5\u533a\u95f4\u4e0a\u7684\u6240\u6709\u5143\u7d20\u7684\u590d\u6742\u5ea6\u662f \\(\\mathrm{O}(m\\log m)\\) \u7684\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^2\\log m)\\) \uff0c\u4e0d\u592a\u80fd\u63a5\u53d7\u3002 \u8f6c\u53d8\u4e00\u4e0b\u601d\u8def\uff0c\u56e0\u4e3a\u589e\u52a0\u548c\u5220\u9664\u90fd\u662f\u5728\u672b\u7aef\u8fdb\u884c\uff0c\u6240\u4ee5\u5728\u67d0\u4e2a\u5143\u7d20\u88ab\u5220\u9664\u4e4b\u524d\uff0c\u5b83\u524d\u9762\u7684\u5143\u7d20\u90fd\u662f\u4e0d\u53d8\u7684\uff08\u7c7b\u4f3c\u4e8e\u6808\u9876\u5143\u7d20\u5148\u53d8\u5316\u3001\u6808\u5e95\u5143\u7d20\u540e\u53d8\u5316\uff09\u3002\u6211\u4eec\u4e0d\u59a8\u5c06\u6570\u7ec4\u89c6\u4e3a\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u5bf9\u5e94\u64cd\u4f5c\uff1a \u589e\u52a0\u4e00\u4e2a\u5143\u7d20\uff1a\u5728\u94fe\u7684\u672b\u7aef\u52a0\u5165\u5143\u7d20\u3002 \u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff1a\u65ad\u5f00\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0e\u94fe\u7684\u8fde\u8fb9\uff0c\u7531\u4e8e\u9700\u8981\u64cd\u4f5c\u4e0d\u80fd\u5b9e\u9645\u65ad\u5f00\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6765\u5b9e\u73b0\u3002\u90a3\u4e48\u7ecf\u8fc7\u8be5\u64cd\u4f5c\u540e\uff0c\u65b0\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53ef\u4ee5\u770b\u51fa\u8fd9\u662f\u4e00\u68f5\u6811\uff08\u51c6\u786e\u6765\u8bf4\u662f\u68ee\u6797\uff0c\u4f46\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u4f4d\u7f6e\u4e3a \\(0\\) \u7684\u5143\u7d20\u6307\u5411\u6240\u6709\u4f4d\u7f6e\u4e3a \\(1\\) \u7684\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u5904\u7406\u6210\u4e86\u4e00\u68f5\u6811\uff09\uff0c\u90a3\u4e48\u8981\u67e5\u627e\u4e00\u6bb5\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e24\u7aef\uff0c\u5728\u6811\u4e0a\u786e\u5b9a\u4e86\u4e24\u7aef\u4e5f\u5c31\u786e\u5b9a\u4e86\u6574\u6761\u8def\u5f84\u3002\u67e5\u627e\u4e24\u70b9\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff0c\u786e\u5b9a\u8def\u5f84\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff0c\u6574\u4f53 \\(\\mathrm{O}(m)\\) \u3002","title":"\u67e5\u627e\u4f4d\u7f6e\u5bf9\u5e94\u5143\u7d20"},{"location":"problem/23/5/1/#_5","text":"\u7528\u4e00\u68f5\u6811\u6765\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u7684\u5f3a\u5ea6\uff0c\u540c\u65f6\u8bb0\u5f55\u5f53\u524d\u6570\u7ec4\u7684\u672b\u7aef\u5143\u7d20\u4f4d\u7f6e\uff1b\u7528\u6570\u7ec4\u7ef4\u62a4\u67d0\u4f4d\u7f6e\u4e2d\u6240\u6709\u5143\u7d20\u7684\u52a0\u5165\u65f6\u523b\u4e0e\u7f16\u53f7\uff0c\u4e0d\u59a8\u79f0\u5176\u4e3a\u6392\u540d\u6570\u7ec4\u3002 \u589e\u52a0\u5143\u7d20\uff1a\u5728\u5f53\u524d\u6570\u7ec4\u672b\u7aef\u5143\u7d20\u7684\u8282\u70b9\u5904\u589e\u52a0\u65b0\u7684\u5b50\u8282\u70b9\uff0c\u5e76\u5c06\u5176\u8bbe\u4e3a\u672b\u7aef\u5143\u7d20\uff0c\u540c\u65f6\u66f4\u65b0\u6392\u540d\u6570\u7ec4\u3002 \u5220\u9664\u5143\u7d20\uff1a\u5f53\u524d\u6570\u7ec4\u672b\u7aef\u5143\u7d20\u53d8\u66f4\u4e3a\u5176\u7236\u4eb2\u8282\u70b9\u3002 \u4fee\u6539\u5143\u7d20\uff1a\u627e\u5230\u5bf9\u5e94\u5143\u7d20\u4f4d\u7f6e\uff0c\u8fdb\u884c\u94fe\u4e0a\u4fee\u6539\u3002 \u67e5\u8be2\u5143\u7d20\uff1a\u627e\u5230\u5bf9\u5e94\u5143\u7d20\u4f4d\u7f6e\uff0c\u8fdb\u884c\u94fe\u4e0a\u67e5\u8be2\u3002","title":"\u6700\u7ec8\u6a21\u578b"},{"location":"problem/23/5/1/#1","text":"\u5728\u5efa\u7acb\u6811\u6a21\u578b\u540e\uff0c\u6211\u4eec\u66b4\u529b\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\uff1a \u589e\u52a0\u5143\u7d20\uff1a\u590d\u6742\u5ea6 \\(\\mathrm{O}(1)\\) \uff1b \u5220\u9664\u5143\u7d20\uff1a\u590d\u6742\u5ea6 \\(\\mathrm{O}(1)\\) \uff1b \u4fee\u6539\u5143\u7d20\uff1a\u786e\u5b9a\u8def\u5f84\u5e76\u4fee\u6539\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff1b \u67e5\u8be2\u5143\u7d20\uff1a\u786e\u5b9a\u8def\u5f84\u5e76\u67e5\u8be2\u590d\u6742\u5ea6 \\(\\mathrm{O}(m)\\) \uff1b \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m^2)\\) \u3002","title":"\u6d4b\u8bd5\u70b9 1\u2014\u2014\u641c\u7d22\u786e\u5b9a\u8def\u5f84"},{"location":"problem/23/5/1/#2","text":"\u7531\u4e8e\u53ea\u6709\u589e\u52a0\u6ca1\u6709\u5220\u9664\uff0c\u6240\u4ee5\u6700\u7ec8\u5f62\u6001\u662f\u4e00\u6761\u94fe\u3002\u6211\u4eec\u7ef4\u62a4\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u521d\u59cb\u503c\u4e3a \\(0\\) \u3002 \u589e\u52a0\u5143\u7d20\uff1a\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u4fee\u6539\u5143\u7d20\uff1a\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u67e5\u8be2\u5143\u7d20\uff1a\u70b9\u6bb5\u6570\u533a\u95f4\u67e5\u8be2\uff0c\u590d\u6742\u5ea6 \\(\\mathrm{O}(\\log m)\\) \uff1b \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \uff1b","title":"\u6d4b\u8bd5\u70b9 2\u2014\u2014\u7ebf\u6bb5\u6811"},{"location":"problem/23/5/1/#_6","text":"\u5173\u4e8e\u6811\u4e0a\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u4e00\u822c\u90fd\u53ef\u4ee5\u7528\u6811\u94fe\u5256\u5206\u5b8c\u6210\uff0c\u4f46\u6811\u94fe\u5256\u5206\u9700\u8981\u9884\u5148\u77e5\u9053\u6811\u7684\u5f62\u72b6\uff0c\u800c\u672c\u9898\u4e2d\u70b9\u90fd\u662f\u52a8\u6001\u7684\uff0c\u65e0\u6cd5\u4e00\u5f00\u59cb\u5c31\u5f97\u77e5\u3002\u5982\u679c\u662f\u79bb\u7ebf\u7684\u8bdd\uff0c\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6811\u7684\u5f62\u6001\uff0c\u8fdb\u884c\u5256\u5206\u3002 \u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \uff1b","title":"\u4e0d\u8981\u6c42\u5728\u7ebf\u2014\u2014\u6811\u94fe\u5256\u5206"},{"location":"problem/23/5/1/#100-link-cut-tree","text":"\u56e0\u4e3a\u6709\u5bf9\u6811\u7684\u52a8\u6001\u52a0\u70b9\uff0c\u6240\u4ee5\u80fd\u770b\u51fa\u8fd9\u662f\u4e00\u4e2a \u52a8\u6001\u6811\u95ee\u9898 \u3002\u89e3\u51b3\u52a8\u6001\u6811\u95ee\u9898\u7684\u7ed3\u6784\u4e4b\u4e00\u5c31\u662f LCT\u3002 \u672c\u9898\u7b97\u662f LCT \u7684\u677f\u5b50\u9898\uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathrm{O}(m\\log m)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; #define ll long long #define il inline const int maxn = 300010 ; int m , T ; ll mod ; // LCT \u90e8\u5206\u5f00\u59cb #define ls ch[x][0] #define rs ch[x][1] int ch [ maxn ][ 2 ], fa [ maxn ]; ll val [ maxn ], sum [ maxn ]; int lazy_rev [ maxn ]; ll lazy_mul [ maxn ]; #define getch(x) (ch[fa[x]][1] == x) #define isRoot(x) (ch[fa[x]][0] != x && ch[fa[x]][1] != x) void pushdownRev ( int x ) { // \u6267\u884c\u7ffb\u8f6c\u64cd\u4f5c swap ( ls , rs ); lazy_rev [ x ] ^= 1 ; } void pushdownMul ( int x , ll v ) { // \u6267\u884c\u533a\u95f4\u4e58\u64cd\u4f5c val [ x ] = ( val [ x ] * v ) % mod ; sum [ x ] = ( sum [ x ] * v ) % mod ; lazy_mul [ x ] = ( lazy_mul [ x ] * v ) % mod ; } void pushdown ( int x ) { // \u4e0b\u4f20\u61d2\u60f0\u6807\u8bb0 if ( lazy_rev [ x ]) { if ( ls ) pushdownRev ( ls ); if ( rs ) pushdownRev ( rs ); lazy_rev [ x ] ^= 1 ; } if ( lazy_mul [ x ] != 1 ) { if ( ls ) pushdownMul ( ls , lazy_mul [ x ]); if ( rs ) pushdownMul ( rs , lazy_mul [ x ]); lazy_mul [ x ] = 1 ; } } void pushup ( int x ) { // \u66f4\u65b0\u72b6\u6001 (maintain) sum [ x ] = ( sum [ ls ] + sum [ rs ] + val [ x ]) % mod ; } int st [ maxn ]; void rotate ( int x ) { // splay \u65cb\u8f6c\u64cd\u4f5c int y = fa [ x ], z = fa [ y ], chk = getch ( x ), w = ch [ x ][ chk ^ 1 ]; if ( ! isRoot ( y )) ch [ z ][ getch ( y )] = x ; ch [ x ][ chk ^ 1 ] = y ; ch [ y ][ chk ] = w ; if ( w ) fa [ w ] = y ; fa [ y ] = x , fa [ x ] = z ; pushup ( y ); } void splay ( int x ) { // \u5c06\u76ee\u524d\u7ed3\u70b9\u65cb\u8f6c\u5230\u6240\u5728 splay \u7684\u6839 int top = 0 , y = x ; st [ ++ top ] = y ; while ( ! isRoot ( y )) { y = fa [ y ]; st [ ++ top ] = y ; } while ( top ) pushdown ( st [ top -- ]); while ( ! isRoot ( x )) { y = fa [ x ]; if ( ! isRoot ( y )) rotate ( getch ( x ) == getch ( y ) ? y : x ); rotate ( x ); } pushup ( x ); } void access ( int x ) { // \u5f00\u8f9f\u4e00\u6761\u53ea\u542b\u6709\u539f\u6811\u7684\u6839\u5230 x \u7684\u8def\u5f84\u7ed3\u70b9\u7684\u5b9e\u94fe for ( int y = 0 ; x ; x = fa [ y = x ]) { splay ( x ); rs = y ; pushup ( x ); } } void makeRoot ( int x ) { // \u8ba9 x \u79f0\u4e3a\u539f\u6811\u7684\u6839 access ( x ); splay ( x ); pushdownRev ( x ); } void split ( int x , int y ) { // \u5f00\u8f9f\u4e00\u6761\u53ea\u542b\u6709 x \u5230 y \u8def\u5f84\u7ed3\u70b9\u7684\u5b9e\u94fe\uff0cy \u4e3a splay \u7684\u6839 makeRoot ( x ); access ( y ); splay ( y ); } void link ( int x , int y ) { // \u8fde\u63a5\u4e24\u4e2a\u90e8\u5206 makeRoot ( x ); fa [ x ] = y ; } // LCT \u90e8\u5206\u7ed3\u675f struct Player { /* \u961f\u5458\u7c7b\u3002 day: \u6210\u4e3a\u6b63\u5f0f\u961f\u5458\u7684\u65f6\u523b fa : \u524d\u4e00\u540d\u961f\u5458\u5bf9\u5e94\u7f16\u53f7 */ int day , fa ; Player ( int _d = 0 , int _f = 0 ) { day = _d , fa = _f ; } } player [ maxn ]; vector < int > ranklist [ maxn ]; // \u5b58\u50a8\u961f\u5458\u7f16\u53f7 int cur , cur_rank , tot ; void insertPlayer ( int day , ll v ) { // \u52a0\u5165\u65b0\u961f\u5458 ++ tot ; // \u5bf9\u539f\u6811\u8fdb\u884c\u64cd\u4f5c player [ tot ] = Player ( day , cur ); ++ cur_rank ; ranklist [ cur_rank ]. push_back ( tot ); // \u5bf9\u8f85\u52a9\u6811\u8fdb\u884c\u64cd\u4f5c val [ tot ] = sum [ tot ] = v ; lazy_mul [ tot ] = 1 ; lazy_rev [ tot ] = 0 ; // \u5982\u679c\u76ee\u524d\u961f\u4f0d\u6709\u4eba\uff0c\u5219\u52a0\u5165\u961f\u4f0d if ( cur ) link ( tot , cur ); cur = tot ; } int findPlayer ( int day , int rk ) { // \u67e5\u627e\u5728\u7b2c day \u5929\u6392\u540d rk \u7684\u961f\u5458\u7f16\u53f7 int l = 0 , r = ranklist [ rk ]. size () - 1 , mid , ans = 0 ; while ( l <= r ) { mid = ( l + r ) >> 1 ; if ( player [ ranklist [ rk ][ mid ]]. day <= day ) { ans = mid ; l = mid + 1 ; } else { r = mid - 1 ; } } return ranklist [ rk ][ ans ]; } int main () { scanf ( \"%d%lld%d\" , & m , & mod , & T ); int opt , s , l , r , x , y , A = 0 ; for ( int day = 1 ; day <= m ; ++ day ) { scanf ( \"%d\" , & opt ); if ( opt == 1 ) { scanf ( \"%d\" , & x ); if ( T == 1 ) x ^= A ; if ( x == 0 ) { // \u5220\u9664\u961f\u5458 cur = player [ cur ]. fa ; -- cur_rank ; } else { // \u52a0\u5165\u65b0\u961f\u5458 insertPlayer ( day , x ); } } else if ( opt == 2 ) { scanf ( \"%d%d%d%d\" , & s , & l , & r , & y ); if ( T == 1 ) y ^= A ; l = findPlayer ( s , l ); r = findPlayer ( s , r ); // \u627e\u5230 l \u5230 r \u7684\u5b9e\u94fe\uff0c\u6807\u8bb0\u4e58\u4ee5 y split ( l , r ); pushdownMul ( r , y ); } else { scanf ( \"%d%d%d\" , & s , & l , & r ); l = findPlayer ( s , l ); r = findPlayer ( s , r ); // \u627e\u5230 l \u5230 r \u7684\u5b9e\u94fe\uff0c\u6c42\u548c\u5373\u53ef split ( l , r ); A = sum [ r ]; printf ( \"%d \\n \" , A ); } } return 0 ; }","title":"100% \u6570\u636e\u2014\u2014Link Cut Tree"},{"location":"problem/24/","text":"\u7b2c 24 \u6b21\uff082021 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202112-1 \u5e8f\u5217\u67e5\u8be2 \u6a21\u62df 100 C++\u3001Java\u3001Python 3 \u94fe\u63a5 202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u6a21\u62df\u3001\u6570\u5b66 100 C++ \u94fe\u63a5 202112-3 \u767b\u673a\u724c\u53f7\u7801 \u6a21\u62df 100 C++ \u94fe\u63a5 202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u7ebf\u6bb5\u6811 100 C++ \u94fe\u63a5 202112-5 \u6781\u5dee\u8def\u5f84 \u94fe\u63a5","title":"\u7b2c 24 \u6b21\uff082021 \u5e74 12 \u6708\uff09"},{"location":"problem/24/#24-2021-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 202112-1 \u5e8f\u5217\u67e5\u8be2 \u6a21\u62df 100 C++\u3001Java\u3001Python 3 \u94fe\u63a5 202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u6a21\u62df\u3001\u6570\u5b66 100 C++ \u94fe\u63a5 202112-3 \u767b\u673a\u724c\u53f7\u7801 \u6a21\u62df 100 C++ \u94fe\u63a5 202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u7ebf\u6bb5\u6811 100 C++ \u94fe\u63a5 202112-5 \u6781\u5dee\u8def\u5f84 \u94fe\u63a5","title":"\u7b2c 24 \u6b21\uff082021 \u5e74 12 \u6708\uff09"},{"location":"problem/24/1/","text":"202112-1 \u5e8f\u5217\u67e5\u8be2 \u9898\u76ee\u94fe\u63a5 202112-1 \u5e8f\u5217\u67e5\u8be2 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 50 n<N\u22641000 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u5229\u7528 f(x) \u5355\u8c03\u6027 C++\u3001Java\u3001Python 3 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u9636\u6bb5\u6c42\u548c C++\u3001Java\u3001Python 3 \u9898\u89e3\u94fe\u63a5","title":"202112-1 \u5e8f\u5217\u67e5\u8be2"},{"location":"problem/24/1/#202112-1","text":"","title":"202112-1 \u5e8f\u5217\u67e5\u8be2"},{"location":"problem/24/1/#_1","text":"202112-1 \u5e8f\u5217\u67e5\u8be2","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/24/1/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 50 n<N\u22641000 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u5229\u7528 f(x) \u5355\u8c03\u6027 C++\u3001Java\u3001Python 3 \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u9636\u6bb5\u6c42\u548c C++\u3001Java\u3001Python 3 \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/24/1/1/","text":"202112-1 \u5e8f\u5217\u67e5\u8be2 50% \u6570\u636e\u2014\u2014\u6a21\u62df \u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a \\(f(i)\\) \u540e\u52a0\u8d77\u6765\u5373\u53ef\u3002 \u8003\u8651\u9488\u5bf9\u786e\u5b9a\u7684 \\(x\\) \uff0c\u5982\u4f55\u6c42\u89e3 \\(f(x)\\) \u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \\(A\\) \u4e2d\u7684\u6570\uff0c\u679a\u4e3e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6570\u5373\u53ef\u3002\u6ce8\u610f\u672b\u5c3e\u7684\u5224\u65ad\u3002 \u679a\u4e3e \\(x\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(N)\\) \uff0c\u8ba1\u7b97 \\(f(x)\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \uff0c\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(nN)\\) \u3002 100% \u6570\u636e\u2014\u2014\u5229\u7528 f(x) \u5355\u8c03\u6027 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u8bbe \\(f(n+1) = \\infty\\) \u3002 \u901a\u8fc7\u6a21\u62df\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a \\(f(x)\\) \u5177\u6709\u5355\u8c03\u6027 \u5bf9\u4e8e \\(x,y\\in [0,N)\\) \uff0c\u82e5 \\(x \\le y\\) \uff0c\u5219 \\(f(x) \\le f(y)\\) \u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \\(x\\) \uff0c\u540c\u65f6\u8bb0\u5f55\u76ee\u524d \\(f(x)\\) \u7684\u503c\uff0c\u8bbe\u4e3a \\(y\\) \uff0c\u90a3\u4e48 \\(A_{y+1}\\) \u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(x\\) \u7684\u6570\u3002 \u5f53\u9700\u8981\u8ba1\u7b97 \\(f(x+1)\\) \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5224\u65ad \\(A_{y+1},A_{y+2},\\cdots\\) \u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c \u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(f(x+1)\\) \u7684\u6570 \\(A_z\\) \uff0c\u90a3\u4e48 \\(f(x+1)=z-1\\) \u3002 \u4e4b\u540e\uff0c\u5728 \\(f(x+1)\\) \u7684\u57fa\u7840\u4e0a\u4ee5\u540c\u6837\u7684\u6b65\u9aa4\u6c42 \\(f(x+2)\\) \uff0c\u76f4\u5230\u6c42\u5b8c\u6240\u6709\u7684\u503c\u3002 \u8003\u8651\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u679a\u4e3e \\(x\\) \u7684\u590d\u6742\u5ea6\u662f \\(\\mathbf{O}(N)\\) \uff0c \u800c \\(A\\) \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5bf9\u591a\u88ab\u679a\u4e3e\u4e00\u6b21\uff0c\u679a\u4e3e\u6240\u6709 \\(x\\) \u7684\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \uff0c \u53ef\u4ee5\u5f97\u5230\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathbf{O}(N+n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 210 ; int n , N ; int a [ maxn ]; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } int cur = 0 ; for ( int i = 0 ; i < N ; ++ i ) { while ( cur < n && a [ cur + 1 ] <= i ) ++ cur ; ans += cur ; } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), N = input . nextInt (); long ans = 0 ; int a [] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = input . nextInt (); } int cur = 0 ; for ( int i = 0 ; i < N ; ++ i ) { while ( cur < n && a [ cur + 1 ] <= i ) ++ cur ; ans += cur ; } System . out . println ( ans ); input . close (); } } 1 2 3 4 5 6 7 8 9 10 # \u8be5\u4ee3\u7801\u4e0e C++ \u548c Java \u7248\u672c\u7684\u601d\u8def\u76f8\u540c\uff0c\u4f46\u8d85\u65f6\uff0c\u53ea\u80fd\u5f97\u5230 50 \u5206 n , N = map ( int , input () . strip () . split ()) a = list ( map ( int , input () . strip () . split ())) ans = 0 cur = 0 for i in range ( N ): while cur < n and a [ cur ] <= i : cur += 1 ans += cur print ( ans ) 100% \u6570\u636e\u2014\u2014\u9636\u6bb5\u6c42\u548c \u5728\u63d0\u793a\u4e2d\uff0c\u6307\u51fa\u4e86\u53ef\u4ee5\u5c06 \\(f(x)\\) \u76f8\u540c\u7684\u503c\u4e00\u8d77\u8ba1\u7b97\u3002\u73b0\u5728\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u5feb\u901f\u786e\u5b9a \\(f(x)\\) \u503c\u76f8\u7b49\u7684\u533a\u95f4\u3002 \u901a\u8fc7\u89c2\u5bdf\u548c\u6a21\u62df\u53ef\u4ee5\u53d1\u73b0\uff0c\u968f\u7740 \\(x\\) \u589e\u5927\uff0c \\(f(x)\\) \u53ea\u4f1a\u5728\u7b49\u4e8e\u67d0\u4e2a \\(A\\) \u6570\u7ec4\u7684\u503c\u65f6\u53d1\u751f\u53d8\u5316\u3002 \u66f4\u5177\u4f53\u7684\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u5c5e\u4e8e \\(A\\) \u6570\u7ec4\u7684\u503c \\(A_i\\) \u6765\u8bf4\uff0c \\([A_i,A_{i+1}-1]\\) \u95f4\u7684 \\(f(x)\\) \u503c\u662f\u76f8\u540c\u7684\uff0c \u8fd9\u6837\u7684\u6570\u5171\u6709 \\(A_{i+1}-dA_i\\) \u4e2a\u3002 \u4e5f\u53ef\u4ee5\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u7406\u89e3\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u503c \\(y\\) \uff0c\u8003\u8651\u6709\u591a\u5c11 \\(x\\) \u6ee1\u8db3 \\(f(x)=y\\) \u3002 \u5f53 \\(x<A_y\\) \u65f6\uff0c \\(f(x)<y\\) \uff0c\u5f53 \\(x\\ge A_{y+1}\\) \u65f6\uff0c \\(f(x)>y\\) \u3002 \u53ea\u6709 \\(x\\in [A_y,A_{y+1}]\\) \u65f6\u624d\u80fd\u5f97\u5230 \\(f(x)=y\\) \u3002 \u5f97\u5230\u8303\u56f4\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e \\(A\\) \u6570\u7ec4\u6765\u8fdb\u884c\u6c42\u548c\u8ba1\u7b97\u3002 \u8003\u8651 \\(f(x)=n\\) \u7684\u5904\u7406\uff1a \u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u6ee1\u8db3 \\(f(x)=n\\) \u7684 \\(x\\) \u5171\u6709 \\(N-A_n\\) \u4e2a\uff0c \u6839\u636e\u4e0a\u6587\u63a8\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 \\(A_{n+1}\\) \u8bbe\u7f6e\u4e3a \\(A_n+(N-A_n)=N\\) \u5373\u53ef\u7b49\u6548\u66ff\u4ee3\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 210 ; int n , N ; int a [ maxn ]; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } a [ n + 1 ] = N ; for ( int i = 1 ; i <= n + 1 ; ++ i ) { // \u5904\u7406\u533a\u95f4 [A(i-1),A(i)] \u7684 f(x) \u503c\u7684\u548c ans += 1l l * ( a [ i ] - a [ i - 1 ]) * ( i - 1 ); } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), N = input . nextInt (); long ans = 0 ; int a [] = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = input . nextInt (); } a [ 0 ] = 0 ; a [ n + 1 ] = N ; for ( int i = 1 ; i <= n + 1 ; ++ i ) { ans += ( a [ i ] - a [ i - 1 ] ) * ( i - 1 ); } System . out . println ( ans ); input . close (); } } 1 2 3 4 5 6 7 8 n , N = map ( int , input () . strip () . split ()) a = list ( map ( int , input () . strip () . split ())) a . insert ( 0 , 0 ) a . append ( N ) ans = 0 for i in range ( 1 , n + 2 ): ans += ( a [ i ] - a [ i - 1 ]) * ( i - 1 ) print ( ans )","title":"\u6587\u7ae0 1"},{"location":"problem/24/1/1/#202112-1","text":"","title":"202112-1 \u5e8f\u5217\u67e5\u8be2"},{"location":"problem/24/1/1/#50","text":"\u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u8ba1\u7b97\u51fa\u6bcf\u4e00\u4e2a \\(f(i)\\) \u540e\u52a0\u8d77\u6765\u5373\u53ef\u3002 \u8003\u8651\u9488\u5bf9\u786e\u5b9a\u7684 \\(x\\) \uff0c\u5982\u4f55\u6c42\u89e3 \\(f(x)\\) \u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \\(A\\) \u4e2d\u7684\u6570\uff0c\u679a\u4e3e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6570\u5373\u53ef\u3002\u6ce8\u610f\u672b\u5c3e\u7684\u5224\u65ad\u3002 \u679a\u4e3e \\(x\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(N)\\) \uff0c\u8ba1\u7b97 \\(f(x)\\) \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \uff0c\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(nN)\\) \u3002","title":"50% \u6570\u636e\u2014\u2014\u6a21\u62df"},{"location":"problem/24/1/1/#100-fx","text":"\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8bbe \\(f(n+1) = \\infty\\) \u3002 \u901a\u8fc7\u6a21\u62df\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a \\(f(x)\\) \u5177\u6709\u5355\u8c03\u6027 \u5bf9\u4e8e \\(x,y\\in [0,N)\\) \uff0c\u82e5 \\(x \\le y\\) \uff0c\u5219 \\(f(x) \\le f(y)\\) \u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e \\(x\\) \uff0c\u540c\u65f6\u8bb0\u5f55\u76ee\u524d \\(f(x)\\) \u7684\u503c\uff0c\u8bbe\u4e3a \\(y\\) \uff0c\u90a3\u4e48 \\(A_{y+1}\\) \u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(x\\) \u7684\u6570\u3002 \u5f53\u9700\u8981\u8ba1\u7b97 \\(f(x+1)\\) \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5224\u65ad \\(A_{y+1},A_{y+2},\\cdots\\) \u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c \u76f4\u5230\u9047\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(f(x+1)\\) \u7684\u6570 \\(A_z\\) \uff0c\u90a3\u4e48 \\(f(x+1)=z-1\\) \u3002 \u4e4b\u540e\uff0c\u5728 \\(f(x+1)\\) \u7684\u57fa\u7840\u4e0a\u4ee5\u540c\u6837\u7684\u6b65\u9aa4\u6c42 \\(f(x+2)\\) \uff0c\u76f4\u5230\u6c42\u5b8c\u6240\u6709\u7684\u503c\u3002 \u8003\u8651\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u679a\u4e3e \\(x\\) \u7684\u590d\u6742\u5ea6\u662f \\(\\mathbf{O}(N)\\) \uff0c \u800c \\(A\\) \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u6570\u5bf9\u591a\u88ab\u679a\u4e3e\u4e00\u6b21\uff0c\u679a\u4e3e\u6240\u6709 \\(x\\) \u7684\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \uff0c \u53ef\u4ee5\u5f97\u5230\u6574\u4f53\u590d\u6742\u5ea6 \\(\\mathbf{O}(N+n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 210 ; int n , N ; int a [ maxn ]; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } int cur = 0 ; for ( int i = 0 ; i < N ; ++ i ) { while ( cur < n && a [ cur + 1 ] <= i ) ++ cur ; ans += cur ; } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), N = input . nextInt (); long ans = 0 ; int a [] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = input . nextInt (); } int cur = 0 ; for ( int i = 0 ; i < N ; ++ i ) { while ( cur < n && a [ cur + 1 ] <= i ) ++ cur ; ans += cur ; } System . out . println ( ans ); input . close (); } } 1 2 3 4 5 6 7 8 9 10 # \u8be5\u4ee3\u7801\u4e0e C++ \u548c Java \u7248\u672c\u7684\u601d\u8def\u76f8\u540c\uff0c\u4f46\u8d85\u65f6\uff0c\u53ea\u80fd\u5f97\u5230 50 \u5206 n , N = map ( int , input () . strip () . split ()) a = list ( map ( int , input () . strip () . split ())) ans = 0 cur = 0 for i in range ( N ): while cur < n and a [ cur ] <= i : cur += 1 ans += cur print ( ans )","title":"100% \u6570\u636e\u2014\u2014\u5229\u7528 f(x) \u5355\u8c03\u6027"},{"location":"problem/24/1/1/#100","text":"\u5728\u63d0\u793a\u4e2d\uff0c\u6307\u51fa\u4e86\u53ef\u4ee5\u5c06 \\(f(x)\\) \u76f8\u540c\u7684\u503c\u4e00\u8d77\u8ba1\u7b97\u3002\u73b0\u5728\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u5feb\u901f\u786e\u5b9a \\(f(x)\\) \u503c\u76f8\u7b49\u7684\u533a\u95f4\u3002 \u901a\u8fc7\u89c2\u5bdf\u548c\u6a21\u62df\u53ef\u4ee5\u53d1\u73b0\uff0c\u968f\u7740 \\(x\\) \u589e\u5927\uff0c \\(f(x)\\) \u53ea\u4f1a\u5728\u7b49\u4e8e\u67d0\u4e2a \\(A\\) \u6570\u7ec4\u7684\u503c\u65f6\u53d1\u751f\u53d8\u5316\u3002 \u66f4\u5177\u4f53\u7684\u8bf4\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u5c5e\u4e8e \\(A\\) \u6570\u7ec4\u7684\u503c \\(A_i\\) \u6765\u8bf4\uff0c \\([A_i,A_{i+1}-1]\\) \u95f4\u7684 \\(f(x)\\) \u503c\u662f\u76f8\u540c\u7684\uff0c \u8fd9\u6837\u7684\u6570\u5171\u6709 \\(A_{i+1}-dA_i\\) \u4e2a\u3002 \u4e5f\u53ef\u4ee5\u4ee5\u53e6\u4e00\u79cd\u65b9\u5f0f\u7406\u89e3\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u503c \\(y\\) \uff0c\u8003\u8651\u6709\u591a\u5c11 \\(x\\) \u6ee1\u8db3 \\(f(x)=y\\) \u3002 \u5f53 \\(x<A_y\\) \u65f6\uff0c \\(f(x)<y\\) \uff0c\u5f53 \\(x\\ge A_{y+1}\\) \u65f6\uff0c \\(f(x)>y\\) \u3002 \u53ea\u6709 \\(x\\in [A_y,A_{y+1}]\\) \u65f6\u624d\u80fd\u5f97\u5230 \\(f(x)=y\\) \u3002 \u5f97\u5230\u8303\u56f4\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e \\(A\\) \u6570\u7ec4\u6765\u8fdb\u884c\u6c42\u548c\u8ba1\u7b97\u3002 \u8003\u8651 \\(f(x)=n\\) \u7684\u5904\u7406\uff1a \u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u6ee1\u8db3 \\(f(x)=n\\) \u7684 \\(x\\) \u5171\u6709 \\(N-A_n\\) \u4e2a\uff0c \u6839\u636e\u4e0a\u6587\u63a8\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 \\(A_{n+1}\\) \u8bbe\u7f6e\u4e3a \\(A_n+(N-A_n)=N\\) \u5373\u53ef\u7b49\u6548\u66ff\u4ee3\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ Java Python 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long #define il inline const int maxn = 210 ; int n , N ; int a [ maxn ]; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } a [ n + 1 ] = N ; for ( int i = 1 ; i <= n + 1 ; ++ i ) { // \u5904\u7406\u533a\u95f4 [A(i-1),A(i)] \u7684 f(x) \u503c\u7684\u548c ans += 1l l * ( a [ i ] - a [ i - 1 ]) * ( i - 1 ); } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.util.Scanner ; public class Main { public static void main ( String [] args ) { Scanner input = new Scanner ( System . in ); int n = input . nextInt (), N = input . nextInt (); long ans = 0 ; int a [] = new int [ n + 2 ] ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = input . nextInt (); } a [ 0 ] = 0 ; a [ n + 1 ] = N ; for ( int i = 1 ; i <= n + 1 ; ++ i ) { ans += ( a [ i ] - a [ i - 1 ] ) * ( i - 1 ); } System . out . println ( ans ); input . close (); } } 1 2 3 4 5 6 7 8 n , N = map ( int , input () . strip () . split ()) a = list ( map ( int , input () . strip () . split ())) a . insert ( 0 , 0 ) a . append ( N ) ans = 0 for i in range ( 1 , n + 2 ): ans += ( a [ i ] - a [ i - 1 ]) * ( i - 1 ) print ( ans )","title":"100% \u6570\u636e\u2014\u2014\u9636\u6bb5\u6c42\u548c"},{"location":"problem/24/2/","text":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u9898\u76ee\u94fe\u63a5 202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n<N\u22641000 \u8ba1\u7b97\u51fa\u6bcf\u4e2a f(x),g(x) \u7684\u503c \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u5bf9 f(x),g(x) \u90fd\u76f8\u540c\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\u5904\u7406 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 2 100 \u65e0\u7279\u6b8a\u9650\u5236 \u4ee5 f(x) \u4e3a\u5355\u4f4d\uff0c\u8ba8\u8bba\u5185\u90e8 g(x) \u6c42\u548c C++ \u9898\u89e3\u94fe\u63a5","title":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3"},{"location":"problem/24/2/#202112-2","text":"","title":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3"},{"location":"problem/24/2/#_1","text":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/24/2/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 70 n<N\u22641000 \u8ba1\u7b97\u51fa\u6bcf\u4e2a f(x),g(x) \u7684\u503c \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u5bf9 f(x),g(x) \u90fd\u76f8\u540c\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\u5904\u7406 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 2 100 \u65e0\u7279\u6b8a\u9650\u5236 \u4ee5 f(x) \u4e3a\u5355\u4f4d\uff0c\u8ba8\u8bba\u5185\u90e8 g(x) \u6c42\u548c C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/24/2/1/","text":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 \u4e0e\u4e0a\u4e00\u9898\u7684\u6bd4\u8f83 \u4e0a\u4e00\u9898\u662f\u6c42\u548c\uff0c\u800c\u672c\u9898\u8981\u6c42\u6c42\u7edd\u5bf9\u503c\u7684\u548c\uff0c\u65e0\u6cd5\u8f6c\u5316\u4e3a\u4e24\u8005\u6c42\u5dee\u7684\u5f62\u5f0f\u3002 \\(f(x),g(x)\\) \u7684\u53d8\u5316\u662f\u5404\u81ea\u72ec\u7acb\u7684\uff0c\u5f53 \\(f(x)\\) \u6539\u53d8\u65f6\uff0c \\(g(x)\\) \u53ef\u80fd\u4e0d\u53d8\uff0c\u4e5f\u53ef\u80fd\u6539\u53d8\uff1b \\(g(x)\\) \u5bf9 \\(f(x)\\) \u4e5f\u662f\u5982\u6b64\u3002 \u5bf9\u4e8e\u6240\u6709\u6570\u636e\u70b9\uff0c \\(n\\) \u548c \\(N\\) \u90fd\u589e\u5927\u4e86\u8bb8\u591a\u3002\u5982\u679c\u590d\u6742\u5ea6\u6d89\u53ca\u5230 \\(n\\) \uff0c\u5219\u6700\u591a\u9884\u8ba1\u4e3a \\(\\mathbf{O}(n\\log n)\\) \u7ea7\u522b\uff1b\u5982\u679c\u6d89\u53ca\u5230 \\(N\\) \uff0c\u5219\u5fc5\u987b\u662f\u4e9a\u7ebf\u6027\u7ea7\u522b\u3002 70% \u6570\u636e\u2014\u2014\u8ba1\u7b97\u51fa\u6bcf\u4e2a f(x),g(x) \u7684\u503c \u7531\u4e8e1,2\u6761\u9650\u5236\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u5bf9 \\(f(x),g(x)\\) \u5206\u522b\u8fdb\u884c\u5904\u7406\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a \\(f(x),g(x)\\) \u7684\u503c\uff0c\u518d\u8ba1\u7b97\u6c42\u548c\u5373\u53ef\u3002 \\(f(x)\\) \u7684\u8ba1\u7b97\u540c\u7b2c\u4e00\u95ee\uff0c\u4efb\u610f\u65b9\u6cd5\u7686\u53ef\u3002\u5355\u4e2a \\(g(x)\\) \u7684\u503c\u53ef\u4ee5\u76f4\u63a5 \\(\\mathbf{O}(1)\\) \u6c42\u5f97\u3002 100% \u6570\u636e\u2014\u2014\u5bf9 f(x),g(x) \u90fd\u76f8\u540c\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\u5904\u7406 \u6ce8\uff1a\u4e3a\u4e86\u9632\u6b62\u6df7\u6dc6\uff0c\u5c06\u9898\u76ee\u4e2d\u7684 \\(r\\) \u6539\u4e3a \\(ratio\\) \u3002 \u5047\u8bbe \\(f(x)\\) \u4e00\u5171\u6709 \\(x\\) \u79cd\u53d6\u503c\uff0c \\(g(x)\\) \u4e00\u5171\u6709 \\(y\\) \u79cd\u53d6\u503c\u3002 \u76f4\u63a5\u6765\u770b \\(f(x),g(x)\\) \u7684\u7ec4\u5408\u4e00\u5171\u6709 \\(xy\\) \u79cd\uff0c \u4f46\u6ce8\u610f\u5230 \\(f(x),g(x)\\) \u90fd\u662f\u5355\u8c03\u4e0d\u9012\u51cf\u51fd\u6570\uff0c\u6240\u4ee5\u771f\u6b63\u7684\u7ec4\u5408\u53ea\u6709 \\(x+y\\) \u79cd\u3002 \u5728\u7b2c\u4e00\u9898\u4e2d\u5df2\u7ecf\u8bf4\u660e \\(f(x)\\) \u7684\u53d6\u503c\u8303\u56f4\u4e3a \\([0,n]\\) \uff0c\u5728 \\(\\mathbf{O}(n)\\) \u7ea7\u522b\u3002 \u8003\u8651 \\(g(x)\\) \u7684\u53d6\u503c\u60c5\u51b5\uff0c\u5c06 \\(ratio\\) \u7684\u516c\u5f0f\u5e26\u5165\u53ef\u4ee5\u5f97\u5230 \\(g(x)=\\lfloor \\frac{x}{ratio}\\rfloor=\\lfloor\\frac{x}{\\lfloor \\frac{N}{n+1}\\rfloor}\\rfloor\\) \u3002 \u7531\u4e8e \\(x\\) \u53d6\u503c\u6709 \\(N\\) \u79cd\uff0c\u6240\u4ee5 \\(g(x)\\) \u7684\u53d6\u503c\u662f \\(\\mathbf{O}(\\frac{N}{\\frac{N}{n+1}})=\\mathbf{O}(n)\\) \u7ea7\u522b\u7684\u3002 \u6240\u4ee5\uff0c\u6574\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathbf{O}(n+n)=\\mathbf{O}(n)\\) \u3002 \u63d0\u793a \u6709\u4e9b\u65f6\u5019\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u67d0\u4e9b\u91cf\u7684\u503c\u4f1a\u6bd4\u8f83\u7279\u6b8a\uff08\u5982\u672c\u9898 \\(ratio=\\lfloor\\frac{N}{n+1}\\rfloor\\) \uff09\uff0c \u4ee3\u8868\u7740\u51fa\u9898\u4eba\u53ef\u80fd\u60f3\u8981\u9690\u85cf\u67d0\u4e9b\u505a\u6cd5\uff0c\u4f46\u4e0d\u5f97\u4e0d\u4e3a\u4e86\u8ba9\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u800c\u59a5\u534f\u3002 \u5728\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7a81\u7834\u53e3\u3002 \u8003\u8651\u8303\u56f4\u95ee\u9898\uff1a\u5047\u8bbe\u5f53\u524d\u5de6\u7aef\u70b9\u4e3a \\(l\\) \uff0c\u5982\u4f55\u627e\u5230\u53f3\u7aef\u70b9 \\(r\\) \uff0c\u6ee1\u8db3 \\(f(l)=f(l+1)=\\cdots=f(r),g(l)=g(l+1)\\cdots=g(r)\\) \u4e14 \\(f(l)\\not=f(r+1)\\ or\\ g(l)\\not=g(r+1)\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9 \\(f(x),g(x)\\) \u5206\u522b\u8003\u8651: \u5bf9\u4e8e \\(f(x)\\) \u800c\u8a00\uff0c\u7b2c\u4e00\u4e2a\u6ee1\u8db3 \\(f(x)=f(l)+1\\) \u7684 \\(x\\) \u503c\u4e3a \\(A_{f_l + 1}\\) \u3002 \u5bf9\u4e8e \\(g(x)\\) \u800c\u8a00\uff0c\u56e0\u4e3a\u5206\u6bcd \\(ratio\\) \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u503c\u76f8\u540c\u7684\u533a\u95f4\u957f\u5ea6\u4e5f\u662f\u56fa\u5b9a\u4e3a \\(ratio\\) \u3002 \u6211\u4eec\u4e0d\u59a8\u5c06 \\(g(x)\\) \u503c\u76f8\u540c\u7684\u6570\u5b57\u4e3a\u4e00\u7ec4\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 \\([0,ratio-1],[ratio,2\\cdot ratio-1],\\cdots,[n\\cdot ratio,(n+1)\\cdot ratio-1],\\cdots\\) \u8fd9\u6837\u7684\u5206\u7ec4\u5e8f\u5217\uff0c\u6bcf\u7ec4\u7684 \\(g(x)\\) \u53d6\u503c\u4e3a \\(0,1,\\cdots,n,\\cdots\\) \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570 \\(l\\) \uff0c\u5176\u6240\u5c5e\u7684\u5206\u7ec4\u662f \\(\\lfloor \\frac{l}{ratio}\\rfloor\\) \uff0c\u4e5f\u5373 \\(g(l)\\) \uff1b \u800c\u4e0b\u4e00\u7ec4\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6570\u4e3a \\(ratio\\cdot (g(l)+1)\\) \uff0c\u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u53f3\u7aef\u70b9 \\(r = ratio\\cdot (g(l)+1) - 1\\) \u3002 \u5728 \\(f(x),g(x)\\) \u8ba1\u7b97\u5f97\u5230\u7684\u53f3\u7aef\u70b9\u4e2d\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u4e00\u4e2a\u4f5c\u4e3a\u8ba1\u7b97\u7684\u53f3\u7aef\u70b9\u3002 \u8ba1\u7b97\u5b8c\u4e00\u6bb5\u540e\uff0c\u8bbe \\(l=r+1\\) \u7ee7\u7eed\u8ba1\u7b97\u4e0b\u4e00\u6bb5\uff0c\u76f4\u5230\u7ed3\u675f\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long const int maxn = 100010 ; int n , N ; int a [ maxn ]; int rat , f , g ; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } rat = N / ( n + 1 ); // \u4e3a\u4e86\u9632\u6b62\u51b2\u7a81\uff0c\u9898\u76ee\u4e2d r \u6539\u4e3a rat int cur = 0 ; // \u7528\u6765\u8ba1\u7b97 f(x) bool flag = false ; // \u5982\u679c\u9700\u8981\u66f4\u65b0 f(x) \u503c\uff0c\u5219 flag = true for ( int l = 0 , r ; l < N ; l = r + 1 ) { flag = false ; // \u5229\u7528 f(x) \u7684\u503c\u786e\u5b9a r \u7684\u8303\u56f4 if ( cur < n ) r = a [ cur + 1 ] - 1 ; else r = N - 1 ; // \u5224\u65ad f(x), g(x) \u8c01\u5148\u53d8\u5316\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u533a\u95f4 if (( l / rat + 1 ) * rat - 1 < r ) { // \u5982\u679c g(x) \u5148\u53d8\u5316\uff0c\u5219\u6539\u4e3a\u9009\u62e9 g(x) r = ( l / rat + 1 ) * rat - 1 ; } else { // \u5982\u679c f(x) \u5148\u53d8\u5316\uff0c\u5219\u786e\u5b9a\u9009\u62e9 f(x)\uff0c\u8ba1\u7b97\u540e\u66f4\u65b0 f(x) flag = true ; } // [l, r] \u533a\u95f4\u5185\u7684\u503c\u662f\u76f8\u7b49\u7684\uff0c\u53ef\u4ee5\u6c42\u548c ans += 1l l * ( r - l + 1 ) * abs ( l / rat - cur ); // \u66f4\u65b0 f(x) \u7684\u503c if ( flag ) ++ cur ; } printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/24/2/1/#202112-2","text":"","title":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3"},{"location":"problem/24/2/1/#_1","text":"\u4e0a\u4e00\u9898\u662f\u6c42\u548c\uff0c\u800c\u672c\u9898\u8981\u6c42\u6c42\u7edd\u5bf9\u503c\u7684\u548c\uff0c\u65e0\u6cd5\u8f6c\u5316\u4e3a\u4e24\u8005\u6c42\u5dee\u7684\u5f62\u5f0f\u3002 \\(f(x),g(x)\\) \u7684\u53d8\u5316\u662f\u5404\u81ea\u72ec\u7acb\u7684\uff0c\u5f53 \\(f(x)\\) \u6539\u53d8\u65f6\uff0c \\(g(x)\\) \u53ef\u80fd\u4e0d\u53d8\uff0c\u4e5f\u53ef\u80fd\u6539\u53d8\uff1b \\(g(x)\\) \u5bf9 \\(f(x)\\) \u4e5f\u662f\u5982\u6b64\u3002 \u5bf9\u4e8e\u6240\u6709\u6570\u636e\u70b9\uff0c \\(n\\) \u548c \\(N\\) \u90fd\u589e\u5927\u4e86\u8bb8\u591a\u3002\u5982\u679c\u590d\u6742\u5ea6\u6d89\u53ca\u5230 \\(n\\) \uff0c\u5219\u6700\u591a\u9884\u8ba1\u4e3a \\(\\mathbf{O}(n\\log n)\\) \u7ea7\u522b\uff1b\u5982\u679c\u6d89\u53ca\u5230 \\(N\\) \uff0c\u5219\u5fc5\u987b\u662f\u4e9a\u7ebf\u6027\u7ea7\u522b\u3002","title":"\u4e0e\u4e0a\u4e00\u9898\u7684\u6bd4\u8f83"},{"location":"problem/24/2/1/#70-fxgx","text":"\u7531\u4e8e1,2\u6761\u9650\u5236\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u5bf9 \\(f(x),g(x)\\) \u5206\u522b\u8fdb\u884c\u5904\u7406\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a \\(f(x),g(x)\\) \u7684\u503c\uff0c\u518d\u8ba1\u7b97\u6c42\u548c\u5373\u53ef\u3002 \\(f(x)\\) \u7684\u8ba1\u7b97\u540c\u7b2c\u4e00\u95ee\uff0c\u4efb\u610f\u65b9\u6cd5\u7686\u53ef\u3002\u5355\u4e2a \\(g(x)\\) \u7684\u503c\u53ef\u4ee5\u76f4\u63a5 \\(\\mathbf{O}(1)\\) \u6c42\u5f97\u3002","title":"70% \u6570\u636e\u2014\u2014\u8ba1\u7b97\u51fa\u6bcf\u4e2a f(x),g(x) \u7684\u503c"},{"location":"problem/24/2/1/#100-fxgx","text":"\u6ce8\uff1a\u4e3a\u4e86\u9632\u6b62\u6df7\u6dc6\uff0c\u5c06\u9898\u76ee\u4e2d\u7684 \\(r\\) \u6539\u4e3a \\(ratio\\) \u3002 \u5047\u8bbe \\(f(x)\\) \u4e00\u5171\u6709 \\(x\\) \u79cd\u53d6\u503c\uff0c \\(g(x)\\) \u4e00\u5171\u6709 \\(y\\) \u79cd\u53d6\u503c\u3002 \u76f4\u63a5\u6765\u770b \\(f(x),g(x)\\) \u7684\u7ec4\u5408\u4e00\u5171\u6709 \\(xy\\) \u79cd\uff0c \u4f46\u6ce8\u610f\u5230 \\(f(x),g(x)\\) \u90fd\u662f\u5355\u8c03\u4e0d\u9012\u51cf\u51fd\u6570\uff0c\u6240\u4ee5\u771f\u6b63\u7684\u7ec4\u5408\u53ea\u6709 \\(x+y\\) \u79cd\u3002 \u5728\u7b2c\u4e00\u9898\u4e2d\u5df2\u7ecf\u8bf4\u660e \\(f(x)\\) \u7684\u53d6\u503c\u8303\u56f4\u4e3a \\([0,n]\\) \uff0c\u5728 \\(\\mathbf{O}(n)\\) \u7ea7\u522b\u3002 \u8003\u8651 \\(g(x)\\) \u7684\u53d6\u503c\u60c5\u51b5\uff0c\u5c06 \\(ratio\\) \u7684\u516c\u5f0f\u5e26\u5165\u53ef\u4ee5\u5f97\u5230 \\(g(x)=\\lfloor \\frac{x}{ratio}\\rfloor=\\lfloor\\frac{x}{\\lfloor \\frac{N}{n+1}\\rfloor}\\rfloor\\) \u3002 \u7531\u4e8e \\(x\\) \u53d6\u503c\u6709 \\(N\\) \u79cd\uff0c\u6240\u4ee5 \\(g(x)\\) \u7684\u53d6\u503c\u662f \\(\\mathbf{O}(\\frac{N}{\\frac{N}{n+1}})=\\mathbf{O}(n)\\) \u7ea7\u522b\u7684\u3002 \u6240\u4ee5\uff0c\u6574\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathbf{O}(n+n)=\\mathbf{O}(n)\\) \u3002 \u63d0\u793a \u6709\u4e9b\u65f6\u5019\uff0c\u9898\u76ee\u7ed9\u51fa\u7684\u67d0\u4e9b\u91cf\u7684\u503c\u4f1a\u6bd4\u8f83\u7279\u6b8a\uff08\u5982\u672c\u9898 \\(ratio=\\lfloor\\frac{N}{n+1}\\rfloor\\) \uff09\uff0c \u4ee3\u8868\u7740\u51fa\u9898\u4eba\u53ef\u80fd\u60f3\u8981\u9690\u85cf\u67d0\u4e9b\u505a\u6cd5\uff0c\u4f46\u4e0d\u5f97\u4e0d\u4e3a\u4e86\u8ba9\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u786e\u800c\u59a5\u534f\u3002 \u5728\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7a81\u7834\u53e3\u3002 \u8003\u8651\u8303\u56f4\u95ee\u9898\uff1a\u5047\u8bbe\u5f53\u524d\u5de6\u7aef\u70b9\u4e3a \\(l\\) \uff0c\u5982\u4f55\u627e\u5230\u53f3\u7aef\u70b9 \\(r\\) \uff0c\u6ee1\u8db3 \\(f(l)=f(l+1)=\\cdots=f(r),g(l)=g(l+1)\\cdots=g(r)\\) \u4e14 \\(f(l)\\not=f(r+1)\\ or\\ g(l)\\not=g(r+1)\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9 \\(f(x),g(x)\\) \u5206\u522b\u8003\u8651: \u5bf9\u4e8e \\(f(x)\\) \u800c\u8a00\uff0c\u7b2c\u4e00\u4e2a\u6ee1\u8db3 \\(f(x)=f(l)+1\\) \u7684 \\(x\\) \u503c\u4e3a \\(A_{f_l + 1}\\) \u3002 \u5bf9\u4e8e \\(g(x)\\) \u800c\u8a00\uff0c\u56e0\u4e3a\u5206\u6bcd \\(ratio\\) \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u503c\u76f8\u540c\u7684\u533a\u95f4\u957f\u5ea6\u4e5f\u662f\u56fa\u5b9a\u4e3a \\(ratio\\) \u3002 \u6211\u4eec\u4e0d\u59a8\u5c06 \\(g(x)\\) \u503c\u76f8\u540c\u7684\u6570\u5b57\u4e3a\u4e00\u7ec4\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 \\([0,ratio-1],[ratio,2\\cdot ratio-1],\\cdots,[n\\cdot ratio,(n+1)\\cdot ratio-1],\\cdots\\) \u8fd9\u6837\u7684\u5206\u7ec4\u5e8f\u5217\uff0c\u6bcf\u7ec4\u7684 \\(g(x)\\) \u53d6\u503c\u4e3a \\(0,1,\\cdots,n,\\cdots\\) \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6570 \\(l\\) \uff0c\u5176\u6240\u5c5e\u7684\u5206\u7ec4\u662f \\(\\lfloor \\frac{l}{ratio}\\rfloor\\) \uff0c\u4e5f\u5373 \\(g(l)\\) \uff1b \u800c\u4e0b\u4e00\u7ec4\u5f00\u59cb\u7684\u7b2c\u4e00\u4e2a\u6570\u4e3a \\(ratio\\cdot (g(l)+1)\\) \uff0c\u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u53f3\u7aef\u70b9 \\(r = ratio\\cdot (g(l)+1) - 1\\) \u3002 \u5728 \\(f(x),g(x)\\) \u8ba1\u7b97\u5f97\u5230\u7684\u53f3\u7aef\u70b9\u4e2d\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u4e00\u4e2a\u4f5c\u4e3a\u8ba1\u7b97\u7684\u53f3\u7aef\u70b9\u3002 \u8ba1\u7b97\u5b8c\u4e00\u6bb5\u540e\uff0c\u8bbe \\(l=r+1\\) \u7ee7\u7eed\u8ba1\u7b97\u4e0b\u4e00\u6bb5\uff0c\u76f4\u5230\u7ed3\u675f\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathbf{O}(n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> using namespace std ; #define ll long long const int maxn = 100010 ; int n , N ; int a [ maxn ]; int rat , f , g ; ll ans = 0 ; int main () { scanf ( \"%d%d\" , & n , & N ); for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } rat = N / ( n + 1 ); // \u4e3a\u4e86\u9632\u6b62\u51b2\u7a81\uff0c\u9898\u76ee\u4e2d r \u6539\u4e3a rat int cur = 0 ; // \u7528\u6765\u8ba1\u7b97 f(x) bool flag = false ; // \u5982\u679c\u9700\u8981\u66f4\u65b0 f(x) \u503c\uff0c\u5219 flag = true for ( int l = 0 , r ; l < N ; l = r + 1 ) { flag = false ; // \u5229\u7528 f(x) \u7684\u503c\u786e\u5b9a r \u7684\u8303\u56f4 if ( cur < n ) r = a [ cur + 1 ] - 1 ; else r = N - 1 ; // \u5224\u65ad f(x), g(x) \u8c01\u5148\u53d8\u5316\uff0c\u9009\u62e9\u8f83\u5c0f\u7684\u533a\u95f4 if (( l / rat + 1 ) * rat - 1 < r ) { // \u5982\u679c g(x) \u5148\u53d8\u5316\uff0c\u5219\u6539\u4e3a\u9009\u62e9 g(x) r = ( l / rat + 1 ) * rat - 1 ; } else { // \u5982\u679c f(x) \u5148\u53d8\u5316\uff0c\u5219\u786e\u5b9a\u9009\u62e9 f(x)\uff0c\u8ba1\u7b97\u540e\u66f4\u65b0 f(x) flag = true ; } // [l, r] \u533a\u95f4\u5185\u7684\u503c\u662f\u76f8\u7b49\u7684\uff0c\u53ef\u4ee5\u6c42\u548c ans += 1l l * ( r - l + 1 ) * abs ( l / rat - cur ); // \u66f4\u65b0 f(x) \u7684\u503c if ( flag ) ++ cur ; } printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u5bf9 f(x),g(x) \u90fd\u76f8\u540c\u7684\u533a\u95f4\u8fdb\u884c\u6c42\u548c\u5904\u7406"},{"location":"problem/24/2/2/","text":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3 100% \u601d\u8def\u2014\u2014\u4ee5 f(x) \u4e3a\u5355\u4f4d\uff0c\u8ba8\u8bba\u5185\u90e8 g(x) \u6c42\u548c \u6211\u4eec\u9700\u8981\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u6765\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u4e00\u79cd\u601d\u8def\u662f\uff0c\u6574\u4f53\u4e0a\u5bf9 \\(f(x)\\) \u8fdb\u884c\u6c42\u548c\uff0c\u800c\u5728\u5185\u90e8\u5bf9 \\(g(x)\\) \u7684\u60c5\u51b5\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002 \u6211\u4eec\u5355\u72ec\u8003\u8651\u6bcf\u4e00\u4e2a \\(f(x)\\) \u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u4e0a \\(f(x)\\) \u7684\u503c\u76f8\u540c\u3002 \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u4e0a\u7684\u4e0b\u6807 \\(i\\) \uff0c\u53ef\u80fd\u5b58\u5728 \\(g(i)\\ge f(i)\\) \uff0c\u4e5f\u53ef\u80fd\u5b58\u5728 \\(g(i)<f(i)\\) \u3002 \u6c42\u7edd\u5bf9\u503c\u65f6\uff0c\u524d\u8005\u7528 \\(g(x)-f(x)\\) \uff0c\u540e\u8005\u7528 \\(f(x)-g(x)\\) \u3002 \u89c2\u5bdf\u5230\uff0c\u7531\u4e8e \\(g(x)\\) {\\heiti{\u5355\u8c03\u4e0d\u51cf}}\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e\u8be5\u533a\u95f4\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u4e0b\u6807 \\(p\\) \uff0c\u5982\u540c\u4e00\u4e2a\u5206\u754c\u7ebf\uff0c \u5f53 \\(i\\ge p\\) \u65f6\uff0c\u6709 \\(g(i)\\ge f(i)\\) \uff0c \u5f53 \\(i<p\\) \uff0c\u6709 \\(g(i)<f(i)\\) \u3002 \u8fd9\u6837\uff0c\u5c31\u628a\u8be5\u533a\u95f4\u5206\u6210\u4e86\u4e24\u4e2a\u201c\u5c0f\u533a\u95f4\u201d\u3002 \u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u201c\u4e58\u6cd5\u601d\u60f3\u201d\u6765\u52a0\u901f\u4e24\u4e2a\u201c\u5c0f\u533a\u95f4\u201d\u7684\u6c42\u89e3\u4e86\u3002 \u66f4\u89c4\u8303\u4e9b\uff0c\u7528 \\(contribution(i)\\) \u4ee3\u8868\u533a\u95f4 \\([A_i, A_{i+1})\\) \u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c \u7528 \\(len(l, r) = r - l + 1\\) \u4ee3\u8868\u533a\u95f4\u957f\u5ea6\uff0c \u7528\u516c\u5f0f\u53ef\u4ee5\u8868\u8fbe\u4e3a\uff1a \\[\\begin{align*} contribution(i) & =len(A_i,p-1)\\times f(x)-\\sum_{x=A[i]}^{p-1}g(x) \\\\ & +\\sum_{x=p}^{A_{i+1}-1}g(x)- len(p,A_{i+1}-1)\\times f(x) \\\\ \\end{align*}\\] \u4e0a\u5f0f\u4e2d\uff0c \\(f(x)\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u6240\u4ee5\u4e58\u4ee5\u201c\u5c0f\u533a\u95f4\u201d\u7684\u957f\u5ea6\u5373\u53ef\uff1b \\(g(x)\\) \u7684\u6c42\u548c\uff0c\u5927\u5bb6\u53ef\u4ee5\u53d1\u6325\u6570\u5b66\u601d\u7ef4\uff1a\u56e0\u4e3a \\(g(x)\\) \u5176\u5b9e\u975e\u5e38\u89c4\u5f8b\uff0c\u5b83\u7684\u6bcf\u4e00\u5757\u662f\u5b9a\u957f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9664\u6cd5\u548c\u53d6\u4f59\u6765\u786e\u5b9a\u76f8\u540c\u503c\u7684\u6570\u91cf\uff0c\u518d\u5229\u7528\u4e58\u6cd5\u601d\u60f3\u6c42\u548c\uff0c\u7075\u6d3b\u5b9e\u73b0\uff0c\u5728 \\(\\mathbf{O}(n)\\) \u65f6\u95f4\u5185\u6c42\u51fa\u5373\u53ef\u3002 \\(p\\) \u7684\u5177\u4f53\u503c\u53ef\u4ee5\u901a\u8fc7\u5728 \\(g(x)\\) \u4e2d\u4e8c\u5206\u67e5\u627e\uff0c \\(\\mathbf{O}(\\log n)\\) \u65f6\u95f4\u5185\u6c42\u51fa\uff0c \\(n\\) \u4e3a\u533a\u95f4\u7684\u957f\u5ea6\u3002 \u4e00\u4e2a\u4f8b\u5b50: \\(x\\) \\(\\cdots\\) 4 5 6 7 \\(\\cdots\\) \\(f(x)\\) \\(\\cdots\\) 2 2 2 2 \\(\\cdots\\) \\(g(x)\\) \\(\\cdots\\) 1 1 2 2 \\(\\cdots\\) \u4e0a\u9762\u7684\u8868\u683c\u622a\u53d6\u4e86\u4e00\u4e2a\u5c0f\u533a\u95f4\uff0c \\(f(x)\\) \u7684\u503c\u56fa\u5b9a \\(2\\) \uff0c \\(p=6\\) \uff0c\u90a3\u4e48 \\(p\\) \u7684\u5de6\u8fb9\u7528 \\(f(x)-g(x)\\) \uff0c \\(p\\) \u7684\u53f3\u8fb9\u7528 \\(g(x)-f(x)\\) \u3002 \u5f53\u7136\uff0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u8fb9\u754c\u60c5\u51b5\uff0c \u90a3\u5c31\u662f\u8be5\u533a\u95f4\u4e0a\u6709\u53ef\u80fd\u6240\u6709\u7684 \\(g(x)\\) \u90fd\u7edd\u5bf9\u5927\u4e8e\u6216\u5c0f\u4e8e \\(f(x)\\) \uff0c\u8fd9\u65f6\u5019 \\(p\\) \u53ef\u80fd\u4f1a\u5728\u533a\u95f4\u5916\u3002 \u8be5\u60c5\u51b5\u5927\u5bb6\u53ef\u4ee5\u5bf9 \\(p\\) \u8bbe\u7f6e\u521d\u503c\uff0c\u7136\u540e\u5728\u5199\u5b8c\u4e8c\u5206\u540e\u52a0\u4ee5\u5224\u65ad\u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <map> #include <queue> #include <vector> using namespace std ; typedef long long LL ; typedef unsigned long long uLL ; typedef pair < int , int > pii ; const int mod = 1e9 + 7 ; const int maxn = 1e5 + 5 ; LL N , n ; LL arr [ maxn ]; // \u9898\u4e2d A \u6570\u7ec4 vector < LL > f ; // \u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u4e0af\u7684\u503c vector < pii > pos ; // \u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u7684\u8fb9\u754c\uff0c\u662f\u5de6\u95ed\u53f3\u95ed LL r , ans ; // \u9898\u4e2d\u7684 r\uff0cans\u4e3a\u8ba1\u7b97\u7684\u7b54\u6848 // \u4e0b\u9762\u7684\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97g(x)\u5728\u533a\u95f4\u4e0a\u7684\u548c // \u8fd9\u4e00\u6b65\u6bd4\u8f83\u7ec6\uff0c\u5177\u4f53\u53ef\u4ee5\u7075\u6d3b\u5b9e\u73b0 // \u4e0b\u9762\u7684\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u5197\u6742\u7684 LL totG ( LL be , LL ed ) { // \u53f3\u8fb9\u754c\u5c0f\u4e8e\u5de6\u8fb9\u754c\uff0c\u8fd4\u56de0 if ( ed < be ) { return 0 ; } // \u4e24\u8fb9\u754c\u91cd\u5408\uff0c\u8fd4\u56de\u4e00\u4e2ag\u503c if ( be == ed ) { return be / r ; } // \u5982\u679c\u4e24\u8fb9\u754cg\u503c\u76f8\u540c\uff0c\u8fd4\u56de\u8be5\u503c\u4e58\u4ee5\u533a\u95f4\u957f\u5ea6 if ( be / r == ed / r ) { return ( be / r ) * ( ed - be + 1 ); } // \u5c06\u533a\u95f4\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u5206\u522b\u7d2f\u8ba1 LL tot = 0 ; // \u5bf9\u4e8e\u5de6\u8fb9\u754c\uff0c\u5176\u503c\u4e3abe/r,\u6570\u76ee\u4e3a r - be % r tot += ( r - ( be % r )) * ( be / r ); // \u5bf9\u4e8e\u53f3\u8fb9\u754c\uff0c\u5176\u503c\u4e3aed/r\uff0c\u6570\u76ee\u4e3a ed % r + 1 tot += ( ed % r + 1 ) * ( ed / r ); // \u5bf9\u4e8e\u4e0d\u5728\u8fb9\u754c\u4e0a\u7684g\u503c\uff0c\u6211\u4eec\u7528\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f if ( ed / r - be / r > 1 ) { be = be / r + 1 ; ed = ed / r - 1 ; tot += r * (( be + ed ) * ( ed - be + 1 ) / 2 ); } return tot ; } void solve () { // \u8f93\u5165 scanf ( \"%lld%lld\" , & n , & N ); r = N / ( n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & arr [ i ]); } // \u6839\u636e\u6570\u7ec4\uff0c\u751f\u6210f(x)\u7684\u6bcf\u4e2a\u533a\u95f4\uff0c\u503c\u5b58\u5165f\uff0c\u533a\u95f4\u8fb9\u754c\u5b58\u5165pos LL last = 0l l ; // \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8fb9\u754c // \u8fd9\u91cc\u7684\u903b\u8f91\u53c2\u8003\u7b2c\u4e00\u9898 for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] > arr [ last ]) { f . push_back ( last ); pos . push_back ({ arr [ last ], arr [ i ] - 1 }); last = i ; } } // \u5355\u72ec\u5904\u7406\u4e0b\u6700\u540e\u4e00\u4e2a\u533a\u95f4\uff0c\u5373[A[n],N-1] f . push_back ( n ); pos . push_back ({ arr [ last ], N - 1 }); // \u5bf9\u4e8e\u6bcf\u4e2af\u533a\u95f4\uff0c\u5c06g\u5206\u6210\u4e24\u4e2a\u5c0f\u533a\u95f4 int si = f . size (); for ( int i = 0 ; i < si ; i ++ ) { LL num = f [ i ]; LL be = pos [ i ]. first ; LL ed = pos [ i ]. second ; LL length = ed - be + 1 ; // \u56e0\u4e3abe\u548ced\u5728\u4e8c\u5206\u8fc7\u7a0b\u5176\u503c\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u4e0b\u9762\u518d\u5b58\u4e00\u4efd LL bbe = be , eed = ed ; // \u4e0b\u9762\u4f7f\u7528\u4e8c\u5206\uff0c\u5728g\u4e2d\u5bfb\u627e\u5206\u754cp LL pin = -1 ; while ( be <= ed ) { LL mid = ( be + ed ) / 2 ; LL cur = mid / r ; if ( cur >= num ) { pin = mid ; ed = mid - 1 ; } else { be = mid + 1 ; } } // \u5982\u679cf\u7684\u503c\u4e00\u76f4\u5927\u4e8eg\uff0cp\u503c\u4e0d\u4f1a\u88ab\u4e8c\u5206\u7684\u8fc7\u7a0b\u8d4b\u503c\uff0c\u6240\u4ee5\u8fd8\u662f\u521d\u503c if ( pin == -1 ) { ans += num * length - totG ( bbe , eed ); } else { // \u5de6\u8fb9\u7684\u7528f-g\uff0c\u53f3\u8fb9\u7528g-f\u3002\u5c31\u7b97g\u7684\u503c\u4e00\u76f4\u5927\u4e8ef\uff0c\u5373\u5de6\u8fb9\u7684\u90e8\u5206\u957f\u5ea6\u4e3a0 ans += num * ( pin - bbe ) - totG ( bbe , pin - 1 ); ans += totG ( pin , eed ) - num * ( eed - pin + 1 ); } } printf ( \"%lld\" , ans ); } int main () { int t ; t = 1 ; while ( t -- ) { solve (); } return 0 ; }","title":"\u6587\u7ae0 2"},{"location":"problem/24/2/2/#202112-2","text":"","title":"202112-2 \u5e8f\u5217\u67e5\u8be2\u65b0\u89e3"},{"location":"problem/24/2/2/#100-fx-gx","text":"\u6211\u4eec\u9700\u8981\u8fdb\u884c\u533a\u95f4\u6c42\u548c\u6765\u964d\u4f4e\u590d\u6742\u5ea6\u3002 \u4e00\u79cd\u601d\u8def\u662f\uff0c\u6574\u4f53\u4e0a\u5bf9 \\(f(x)\\) \u8fdb\u884c\u6c42\u548c\uff0c\u800c\u5728\u5185\u90e8\u5bf9 \\(g(x)\\) \u7684\u60c5\u51b5\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002 \u6211\u4eec\u5355\u72ec\u8003\u8651\u6bcf\u4e00\u4e2a \\(f(x)\\) \u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u4e0a \\(f(x)\\) \u7684\u503c\u76f8\u540c\u3002 \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u4e0a\u7684\u4e0b\u6807 \\(i\\) \uff0c\u53ef\u80fd\u5b58\u5728 \\(g(i)\\ge f(i)\\) \uff0c\u4e5f\u53ef\u80fd\u5b58\u5728 \\(g(i)<f(i)\\) \u3002 \u6c42\u7edd\u5bf9\u503c\u65f6\uff0c\u524d\u8005\u7528 \\(g(x)-f(x)\\) \uff0c\u540e\u8005\u7528 \\(f(x)-g(x)\\) \u3002 \u89c2\u5bdf\u5230\uff0c\u7531\u4e8e \\(g(x)\\) {\\heiti{\u5355\u8c03\u4e0d\u51cf}}\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e\u8be5\u533a\u95f4\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u4e0b\u6807 \\(p\\) \uff0c\u5982\u540c\u4e00\u4e2a\u5206\u754c\u7ebf\uff0c \u5f53 \\(i\\ge p\\) \u65f6\uff0c\u6709 \\(g(i)\\ge f(i)\\) \uff0c \u5f53 \\(i<p\\) \uff0c\u6709 \\(g(i)<f(i)\\) \u3002 \u8fd9\u6837\uff0c\u5c31\u628a\u8be5\u533a\u95f4\u5206\u6210\u4e86\u4e24\u4e2a\u201c\u5c0f\u533a\u95f4\u201d\u3002 \u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u201c\u4e58\u6cd5\u601d\u60f3\u201d\u6765\u52a0\u901f\u4e24\u4e2a\u201c\u5c0f\u533a\u95f4\u201d\u7684\u6c42\u89e3\u4e86\u3002 \u66f4\u89c4\u8303\u4e9b\uff0c\u7528 \\(contribution(i)\\) \u4ee3\u8868\u533a\u95f4 \\([A_i, A_{i+1})\\) \u5bf9\u7b54\u6848\u7684\u8d21\u732e\uff0c \u7528 \\(len(l, r) = r - l + 1\\) \u4ee3\u8868\u533a\u95f4\u957f\u5ea6\uff0c \u7528\u516c\u5f0f\u53ef\u4ee5\u8868\u8fbe\u4e3a\uff1a \\[\\begin{align*} contribution(i) & =len(A_i,p-1)\\times f(x)-\\sum_{x=A[i]}^{p-1}g(x) \\\\ & +\\sum_{x=p}^{A_{i+1}-1}g(x)- len(p,A_{i+1}-1)\\times f(x) \\\\ \\end{align*}\\] \u4e0a\u5f0f\u4e2d\uff0c \\(f(x)\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u6240\u4ee5\u4e58\u4ee5\u201c\u5c0f\u533a\u95f4\u201d\u7684\u957f\u5ea6\u5373\u53ef\uff1b \\(g(x)\\) \u7684\u6c42\u548c\uff0c\u5927\u5bb6\u53ef\u4ee5\u53d1\u6325\u6570\u5b66\u601d\u7ef4\uff1a\u56e0\u4e3a \\(g(x)\\) \u5176\u5b9e\u975e\u5e38\u89c4\u5f8b\uff0c\u5b83\u7684\u6bcf\u4e00\u5757\u662f\u5b9a\u957f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9664\u6cd5\u548c\u53d6\u4f59\u6765\u786e\u5b9a\u76f8\u540c\u503c\u7684\u6570\u91cf\uff0c\u518d\u5229\u7528\u4e58\u6cd5\u601d\u60f3\u6c42\u548c\uff0c\u7075\u6d3b\u5b9e\u73b0\uff0c\u5728 \\(\\mathbf{O}(n)\\) \u65f6\u95f4\u5185\u6c42\u51fa\u5373\u53ef\u3002 \\(p\\) \u7684\u5177\u4f53\u503c\u53ef\u4ee5\u901a\u8fc7\u5728 \\(g(x)\\) \u4e2d\u4e8c\u5206\u67e5\u627e\uff0c \\(\\mathbf{O}(\\log n)\\) \u65f6\u95f4\u5185\u6c42\u51fa\uff0c \\(n\\) \u4e3a\u533a\u95f4\u7684\u957f\u5ea6\u3002 \u4e00\u4e2a\u4f8b\u5b50: \\(x\\) \\(\\cdots\\) 4 5 6 7 \\(\\cdots\\) \\(f(x)\\) \\(\\cdots\\) 2 2 2 2 \\(\\cdots\\) \\(g(x)\\) \\(\\cdots\\) 1 1 2 2 \\(\\cdots\\) \u4e0a\u9762\u7684\u8868\u683c\u622a\u53d6\u4e86\u4e00\u4e2a\u5c0f\u533a\u95f4\uff0c \\(f(x)\\) \u7684\u503c\u56fa\u5b9a \\(2\\) \uff0c \\(p=6\\) \uff0c\u90a3\u4e48 \\(p\\) \u7684\u5de6\u8fb9\u7528 \\(f(x)-g(x)\\) \uff0c \\(p\\) \u7684\u53f3\u8fb9\u7528 \\(g(x)-f(x)\\) \u3002 \u5f53\u7136\uff0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u8fb9\u754c\u60c5\u51b5\uff0c \u90a3\u5c31\u662f\u8be5\u533a\u95f4\u4e0a\u6709\u53ef\u80fd\u6240\u6709\u7684 \\(g(x)\\) \u90fd\u7edd\u5bf9\u5927\u4e8e\u6216\u5c0f\u4e8e \\(f(x)\\) \uff0c\u8fd9\u65f6\u5019 \\(p\\) \u53ef\u80fd\u4f1a\u5728\u533a\u95f4\u5916\u3002 \u8be5\u60c5\u51b5\u5927\u5bb6\u53ef\u4ee5\u5bf9 \\(p\\) \u8bbe\u7f6e\u521d\u503c\uff0c\u7136\u540e\u5728\u5199\u5b8c\u4e8c\u5206\u540e\u52a0\u4ee5\u5224\u65ad\u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <map> #include <queue> #include <vector> using namespace std ; typedef long long LL ; typedef unsigned long long uLL ; typedef pair < int , int > pii ; const int mod = 1e9 + 7 ; const int maxn = 1e5 + 5 ; LL N , n ; LL arr [ maxn ]; // \u9898\u4e2d A \u6570\u7ec4 vector < LL > f ; // \u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u4e0af\u7684\u503c vector < pii > pos ; // \u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u7684\u8fb9\u754c\uff0c\u662f\u5de6\u95ed\u53f3\u95ed LL r , ans ; // \u9898\u4e2d\u7684 r\uff0cans\u4e3a\u8ba1\u7b97\u7684\u7b54\u6848 // \u4e0b\u9762\u7684\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97g(x)\u5728\u533a\u95f4\u4e0a\u7684\u548c // \u8fd9\u4e00\u6b65\u6bd4\u8f83\u7ec6\uff0c\u5177\u4f53\u53ef\u4ee5\u7075\u6d3b\u5b9e\u73b0 // \u4e0b\u9762\u7684\u601d\u8def\u8fd8\u662f\u6bd4\u8f83\u5197\u6742\u7684 LL totG ( LL be , LL ed ) { // \u53f3\u8fb9\u754c\u5c0f\u4e8e\u5de6\u8fb9\u754c\uff0c\u8fd4\u56de0 if ( ed < be ) { return 0 ; } // \u4e24\u8fb9\u754c\u91cd\u5408\uff0c\u8fd4\u56de\u4e00\u4e2ag\u503c if ( be == ed ) { return be / r ; } // \u5982\u679c\u4e24\u8fb9\u754cg\u503c\u76f8\u540c\uff0c\u8fd4\u56de\u8be5\u503c\u4e58\u4ee5\u533a\u95f4\u957f\u5ea6 if ( be / r == ed / r ) { return ( be / r ) * ( ed - be + 1 ); } // \u5c06\u533a\u95f4\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u5206\u522b\u7d2f\u8ba1 LL tot = 0 ; // \u5bf9\u4e8e\u5de6\u8fb9\u754c\uff0c\u5176\u503c\u4e3abe/r,\u6570\u76ee\u4e3a r - be % r tot += ( r - ( be % r )) * ( be / r ); // \u5bf9\u4e8e\u53f3\u8fb9\u754c\uff0c\u5176\u503c\u4e3aed/r\uff0c\u6570\u76ee\u4e3a ed % r + 1 tot += ( ed % r + 1 ) * ( ed / r ); // \u5bf9\u4e8e\u4e0d\u5728\u8fb9\u754c\u4e0a\u7684g\u503c\uff0c\u6211\u4eec\u7528\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f if ( ed / r - be / r > 1 ) { be = be / r + 1 ; ed = ed / r - 1 ; tot += r * (( be + ed ) * ( ed - be + 1 ) / 2 ); } return tot ; } void solve () { // \u8f93\u5165 scanf ( \"%lld%lld\" , & n , & N ); r = N / ( n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & arr [ i ]); } // \u6839\u636e\u6570\u7ec4\uff0c\u751f\u6210f(x)\u7684\u6bcf\u4e2a\u533a\u95f4\uff0c\u503c\u5b58\u5165f\uff0c\u533a\u95f4\u8fb9\u754c\u5b58\u5165pos LL last = 0l l ; // \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8fb9\u754c // \u8fd9\u91cc\u7684\u903b\u8f91\u53c2\u8003\u7b2c\u4e00\u9898 for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] > arr [ last ]) { f . push_back ( last ); pos . push_back ({ arr [ last ], arr [ i ] - 1 }); last = i ; } } // \u5355\u72ec\u5904\u7406\u4e0b\u6700\u540e\u4e00\u4e2a\u533a\u95f4\uff0c\u5373[A[n],N-1] f . push_back ( n ); pos . push_back ({ arr [ last ], N - 1 }); // \u5bf9\u4e8e\u6bcf\u4e2af\u533a\u95f4\uff0c\u5c06g\u5206\u6210\u4e24\u4e2a\u5c0f\u533a\u95f4 int si = f . size (); for ( int i = 0 ; i < si ; i ++ ) { LL num = f [ i ]; LL be = pos [ i ]. first ; LL ed = pos [ i ]. second ; LL length = ed - be + 1 ; // \u56e0\u4e3abe\u548ced\u5728\u4e8c\u5206\u8fc7\u7a0b\u5176\u503c\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u4e0b\u9762\u518d\u5b58\u4e00\u4efd LL bbe = be , eed = ed ; // \u4e0b\u9762\u4f7f\u7528\u4e8c\u5206\uff0c\u5728g\u4e2d\u5bfb\u627e\u5206\u754cp LL pin = -1 ; while ( be <= ed ) { LL mid = ( be + ed ) / 2 ; LL cur = mid / r ; if ( cur >= num ) { pin = mid ; ed = mid - 1 ; } else { be = mid + 1 ; } } // \u5982\u679cf\u7684\u503c\u4e00\u76f4\u5927\u4e8eg\uff0cp\u503c\u4e0d\u4f1a\u88ab\u4e8c\u5206\u7684\u8fc7\u7a0b\u8d4b\u503c\uff0c\u6240\u4ee5\u8fd8\u662f\u521d\u503c if ( pin == -1 ) { ans += num * length - totG ( bbe , eed ); } else { // \u5de6\u8fb9\u7684\u7528f-g\uff0c\u53f3\u8fb9\u7528g-f\u3002\u5c31\u7b97g\u7684\u503c\u4e00\u76f4\u5927\u4e8ef\uff0c\u5373\u5de6\u8fb9\u7684\u90e8\u5206\u957f\u5ea6\u4e3a0 ans += num * ( pin - bbe ) - totG ( bbe , pin - 1 ); ans += totG ( pin , eed ) - num * ( eed - pin + 1 ); } } printf ( \"%lld\" , ans ); } int main () { int t ; t = 1 ; while ( t -- ) { solve (); } return 0 ; }","title":"100% \u601d\u8def\u2014\u2014\u4ee5 f(x) \u4e3a\u5355\u4f4d\uff0c\u8ba8\u8bba\u5185\u90e8 g(x) \u6c42\u548c"},{"location":"problem/24/3/","text":"202112-3 \u767b\u673a\u724c\u53f7\u7801 \u9898\u76ee\u94fe\u63a5 202112-3 \u767b\u673a\u724c\u53f7\u7801 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 40 s=-1 \u76f4\u63a5\u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df+\u591a\u9879\u5f0f\u9664\u6cd5 C++ \u9898\u89e3\u94fe\u63a5","title":"202112-3 \u767b\u673a\u724c\u53f7\u7801"},{"location":"problem/24/3/#202112-3","text":"","title":"202112-3 \u767b\u673a\u724c\u53f7\u7801"},{"location":"problem/24/3/#_1","text":"202112-3 \u767b\u673a\u724c\u53f7\u7801","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/24/3/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 40 s=-1 \u76f4\u63a5\u6a21\u62df C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u6a21\u62df+\u591a\u9879\u5f0f\u9664\u6cd5 C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/24/3/1/","text":"202112-3 \u767b\u673a\u724c\u53f7\u7801 40% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df \u8fd9\u4e00\u90e8\u5206\u6570\u636e\u6ee1\u8db3 \\(s=-1\\) \uff0c\u5373\u6821\u9a8c\u7801\u4e3a\u7a7a\u3002 \u6211\u4eec\u6309\u7167\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u5bf9\u5e94\u64cd\u4f5c\u5373\u53ef\uff0c\u5927\u4f53\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5f97\u5230\u6570\u5b57\u5e8f\u5217\uff0c\u6ce8\u610f\u4e0d\u540c\u6a21\u5f0f\u7684\u5207\u6362\u4ee5\u53ca\u6700\u540e\u7684\u8865\u5168\u3002 \u5c06\u5f97\u5230\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u7801\u5b57\u3002 \u6839\u636e\u6709\u6548\u6570\u636e\u533a\u6bcf\u884c\u80fd\u5bb9\u7eb3\u7684\u7801\u5b57\u6570 \\(w\\) \u53ca\u76ee\u524d\u7801\u5b57\u4e2a\u6570\uff0c\u5728\u672b\u5c3e\u8865\u5145\u7801\u5b57\u3002\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u957f\u5ea6\u7801\u5b57\u3002 \u8f93\u51fa\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 210 ; const int mod = 929 ; int w , lev ; char s [ 100010 ]; int n ; vector < int > numberList ; // \u6570\u5b57\u5e8f\u5217 vector < int > codeWord ; // \u7801\u5b57\u5e8f\u5217 int currentMode ; // \u76ee\u524d\u7f16\u7801\u5668\u6a21\u5f0f\u30020:\u5927\u5199\u6a21\u5f0f 1:\u5c0f\u5199\u6a21\u5f0f 2:\u6570\u5b57\u6a21\u5f0f void checkmode ( char c ) { /* \u68c0\u67e5\u5c06\u8981\u8f93\u51fa\u7684\u4e0b\u4e2a\u5b57\u7b26\u4e0e\u76ee\u524d\u6a21\u5f0f\u662f\u5426\u5339\u914d\uff0c \u82e5\u4e0d\u5339\u914d\uff0c\u5219\u8f93\u51fa\u5bf9\u5e94\u66f4\u6539\u6a21\u5f0f\u6b65\u9aa4\u3002 */ if ( c >= '0' && c <= '9' ) { if ( currentMode != 2 ) { numberList . push_back ( 28 ); currentMode = 2 ; } } else if ( c >= 'a' && c <= 'z' ) { if ( currentMode != 1 ) { numberList . push_back ( 27 ); currentMode = 1 ; } } else if ( c >= 'A' && c <= 'Z' ) { if ( currentMode == 1 ) { numberList . push_back ( 28 ); numberList . push_back ( 28 ); currentMode = 0 ; } if ( currentMode == 2 ) { numberList . push_back ( 28 ); currentMode = 0 ; } } } int main () { scanf ( \"%d%d\" , & w , & lev ); // lev \u8868\u793a\u6821\u9a8c\u7ea7\u522b scanf ( \"%s\" , s ); n = strlen ( s ); // \u6b65\u9aa4\u4e00\uff1a\u5f97\u5230\u6570\u5b57\u5e8f\u5217 currentMode = 0 ; // \u521d\u59cb\u4e3a\u5927\u5199\u6a21\u5f0f for ( int i = 0 ; i < n ; ++ i ) { checkmode ( s [ i ]); if ( s [ i ] >= '0' && s [ i ] <= '9' ) { numberList . push_back ( s [ i ] - '0' ); } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { numberList . push_back ( s [ i ] - 'a' ); } else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { numberList . push_back ( s [ i ] - 'A' ); } } if ( numberList . size () % 2 ) numberList . push_back ( 29 ); // \u6b65\u9aa4\u4e8c\uff1a\u8f6c\u6362\u4e3a\u7801\u5b57 for ( int i = 0 ; i < numberList . size (); i += 2 ) { codeWord . push_back ( 30 * numberList [ i ] + numberList [ i + 1 ]); } // \u6b65\u9aa4\u4e09\uff1a\u8865\u5145\u7801\u5b57 while (( 1 + codeWord . size ()) % w != 0 ) { codeWord . push_back ( 900 ); } // \u6b65\u9aa4\u56db\uff1a\u8f93\u51fa\u7ed3\u679c codeWord . insert ( codeWord . begin (), codeWord . size () + 1 ); for ( int i = 0 ; i < codeWord . size (); ++ i ) { printf ( \"%d \\n \" , codeWord [ i ]); } return 0 ; } 100% \u6570\u636e\u2014\u2014\u6a21\u62df+\u591a\u9879\u5f0f\u9664\u6cd5 \u8fd9\u90e8\u5206\u6570\u636e\u8981\u6c42\u6211\u4eec\u5bf9\u6821\u9a8c\u7801\u8fdb\u884c\u5904\u7406\uff0c\u6240\u4ee5\u6b65\u9aa4\u53d8\u4e3a\uff1a \u5f97\u5230\u6570\u5b57\u5e8f\u5217\uff0c\u6ce8\u610f\u4e0d\u540c\u6a21\u5f0f\u7684\u5207\u6362\u4ee5\u53ca\u6700\u540e\u7684\u8865\u5168\u3002 \u5c06\u5f97\u5230\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u7801\u5b57\u3002 \u6839\u636e\u6709\u6548\u6570\u636e\u533a\u6bcf\u884c\u80fd\u5bb9\u7eb3\u7684\u7801\u5b57\u6570 \\(w\\) \u3001\u76ee\u524d\u7801\u5b57\u4e2a\u6570\u4ee5\u53ca{\\heiti{\u6821\u9a8c\u7801\u7684\u4f4d\u6570}}\uff0c\u5728\u672b\u5c3e\u8865\u5145\u7801\u5b57\u3002\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u957f\u5ea6\u7801\u5b57\u3002 \u8f93\u51fa\u6570\u636e\u7801\u90e8\u5206\u7ed3\u679c\u3002 \u8ba1\u7b97\u5f97\u51fa\u6821\u9a8c\u7801\uff0c\u5e76\u8f93\u51fa\u3002 \u6821\u9a8c\u7801\u7684\u4f4d\u6570\u80fd\u6bd4\u8f83\u65b9\u4fbf\u5f97\u51fa\uff0c\u5173\u952e\u5728\u4e8e\u6821\u9a8c\u7801\u7684\u8ba1\u7b97\u3002\u8003\u8651\u5173\u952e\u516c\u5f0f\uff1a \\[\\begin{equation*} x^kd(x)\\equiv q(x)g(x)-r(x) \\end{equation*}\\] \u5176\u4e2d \\(d(x)\\) \u662f \\(n-1\\) \u6b21\u591a\u9879\u5f0f\uff08\u5df2\u77e5\uff09\uff0c \\(g(x)\\) \u662f \\(k\\) \u6b21\u591a\u9879\u5f0f\uff08\u5df2\u77e5\uff09\uff0c \u672a\u77e5\u9879\u6709 \\(q(x),r(x)\\) \uff0c\u5176\u4e2d \\(r(x)\\) \u4e3a\u6240\u6c42\u3002 \u8003\u8651\u6d88\u53bb \\(q(x)\\) \u7684\u5f71\u54cd\uff1a\u53ef\u4ee5\u5728\u4e24\u7aef\u540c\u65f6\u5bf9 \\(g(x)\\) \u53d6\u4f59\uff0c\u5219 \\(q(x)g(x)\\) \u9879\u4f1a\u88ab\u76f4\u63a5\u6d88\u53bb\uff0c\u53ef\u4ee5\u5316\u6240\u6c42\u5f0f\u4e3a\uff1a \\[\\begin{equation*} x^kd(x)\\equiv -r(x) \\mod q(x) \\end{equation*}\\] \u6240\u4ee5\u76ee\u524d\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u89e3 \\(x^kd(x) \\mod q(x)\\) \u3002 \u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5 \u82e5 \\(f(x)\\) \u548c \\(g(x)\\) \u662f\u4e24\u4e2a\u591a\u9879\u5f0f\uff0c\u4e14 \\(g(x)\\) \u4e0d\u7b49\u4e8e \\(0\\) \uff0c \u5219\u5b58\u5728\u552f\u4e00\u7684\u591a\u9879\u5f0f \\(q(x)\\) \u548c \\(r(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[\\begin{equation*} f(x)=q(x)g(x)+r(x) \\end{equation*}\\] \u5176\u4e2d \\(r(x)\\) \u7684\u6b21\u6570\u5c0f\u4e8e \\(g(x)\\) \u7684\u6b21\u6570\u3002\u6b64\u65f6 \\(q(x)\\) \u79f0\u4e3a \\(g(x)\\) \u9664 \\(f(x)\\) \u7684\u5546\u5f0f\uff0c \\(r(x)\\) \u79f0\u4e3a\u4f59\u5f0f\u3002 \u591a\u9879\u5f0f\u957f\u9664\u6cd5 \u6c42\u89e3\u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a 1. \u628a\u88ab\u9664\u5f0f\u3001\u9664\u5f0f\u6309\u67d0\u4e2a\u5b57\u6bcd\u4f5c\u964d\u5e42\u6392\u5217\uff0c\u5e76\u628a\u6240\u7f3a\u7684\u9879\u7528\u96f6\u8865\u9f50\uff1b 2. \u7528\u88ab\u9664\u5f0f\u7684\u7b2c\u4e00\u9879\u9664\u4ee5\u9664\u5f0f\u7b2c\u4e00\u9879\uff0c\u5f97\u5230\u5546\u5f0f\u7684\u7b2c\u4e00\u9879\uff1b 3. \u7528\u5546\u5f0f\u7684\u7b2c\u4e00\u9879\u53bb\u4e58\u9664\u5f0f\uff0c\u628a\u79ef\u5199\u5728\u88ab\u9664\u5f0f\u4e0b\u9762\uff08\u540c\u7c7b\u9879\u5bf9\u9f50\uff09\uff0c\u6d88\u53bb\u76f8\u7b49\u9879\uff0c\u628a\u4e0d\u76f8\u7b49\u7684\u9879\u7ed3\u5408\u8d77\u6765\uff1b 4. \u628a\u51cf\u5f97\u7684\u5dee\u5f53\u4f5c\u65b0\u7684\u88ab\u9664\u5f0f\uff0c\u518d\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u7ee7\u7eed\u6f14\u7b97\uff0c\u76f4\u5230\u4f59\u5f0f\u4e3a\u96f6\u6216\u4f59\u5f0f\u7684\u6b21\u6570\u4f4e\u4e8e\u9664\u5f0f\u7684\u6b21\u6570\u65f6\u4e3a\u6b62\u3002 \u4e0b\u9762\u5c55\u793a\u7684\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u957f\u9664\u6cd5\u7684\u4f8b\u5b50\uff1a \u5f97\u5230\u6c42\u89e3\u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5\u7684\u6b65\u9aa4\u540e\uff0c\u8003\u8651\u6c42\u89e3 \\(r(x)\\) \u7684\u6b65\u9aa4\uff1a \u8ba1\u7b97 \\(g(x)=(x-3)(x-3^2)\\cdots(x-3^k)\\) \uff1b \u8ba1\u7b97 \\(x^kd(x)\\) \uff1b \u8ba1\u7b97 \\(x^kd(x) \\mod g(x)\\) \uff0c\u5f97\u5230 \\(-r(x)\\) \uff1b \u5bf9\u5f97\u5230\u7684\u6bcf\u4e00\u9879\u53d6\u53cd\u5373\u53ef\u5f97\u5230 \\(r(x)\\) \u3002 \u8ba1\u7b97 \\(g(x)\\) \uff1a\u8003\u8651\u5230\u6bcf\u4e00\u6b21\u591a\u9879\u5f0f\u4e58\u4ee5\u7684\u56e0\u5b50\u90fd\u662f \\((x-a)\\) \u7684\u683c\u5f0f\uff0c \u6240\u4ee5\u53ef\u4ee5\u628a \\(A(x-a)\\) \u7684\u591a\u9879\u5f0f\u76f8\u4e58\u8f6c\u5316\u4e3a \\(xA-aA\\) \u7684\u683c\u5f0f\u3002 \\(xA\\) \u53ef\u4ee5\u901a\u8fc7\u6574\u4f53\u79fb\u9879\u5b9e\u73b0\uff1b\u5728\u79fb\u9879\u540e\uff0c\u539f\u672c\u5728 \\(x^i\\) \u7684\u7cfb\u6570\u6210\u4e3a \\(x^{i+1}\\) \u7684\u7cfb\u6570\uff0c \u6240\u4ee5\u53ef\u4ee5\u5728\u4e00\u4e2a\u6570\u7ec4\u4e0a\uff0c\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u4f9d\u6b21\u8ba1\u7b97\uff0c\u5f97\u5230\u7ed3\u679c\u3002 \u8ba1\u7b97 \\(x^kd(x)\\) \uff1a\u8fd9\u90e8\u5206\u6bd4\u8f83\u7b80\u5355\uff0c\u5c06\u4f4e \\(k\\) \u4f4d\u7684\u7cfb\u6570\u8d4b \\(0\\) \uff0c\u518d\u5c06\u5df2\u8ba1\u7b97\u51fa\u7684\u6570\u636e\u4f4d\u653e\u5165\u5bf9\u5e94\u4f4d\u7f6e\u5373\u53ef\u3002 \u8ba1\u7b97 \\(x^kd(x) \\mod g(x)\\) \uff1a\u5229\u7528\u4e0a\u6587\u63d0\u5230\u7684\u591a\u9879\u5f0f\u957f\u9664\u6cd5\u5373\u53ef\u3002\u672c\u9898 \\(g(x)\\) \u7684\u6700\u9ad8\u4f4d\u7cfb\u6570\u6052\u4e3a \\(1\\) \uff0c\u7b80\u5316\u4e86\u8ba1\u7b97\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 210 ; const int mod = 929 ; int w , lev ; char s [ 100010 ]; int n ; vector < int > numberList ; vector < int > codeWord ; int verifyCodeLen ; // \u6821\u9a8c\u7801\u957f\u5ea6 int currentMode ; void checkmode ( char c ) { /* \u68c0\u67e5\u5c06\u8981\u8f93\u51fa\u7684\u4e0b\u4e2a\u5b57\u7b26\u4e0e\u76ee\u524d\u6a21\u5f0f\u662f\u5426\u5339\u914d\uff0c \u82e5\u4e0d\u5339\u914d\uff0c\u5219\u8f93\u51fa\u5bf9\u5e94\u66f4\u6539\u6a21\u5f0f\u6b65\u9aa4\u3002 */ if ( c >= '0' && c <= '9' ) { if ( currentMode != 2 ) { numberList . push_back ( 28 ); currentMode = 2 ; } } else if ( c >= 'a' && c <= 'z' ) { if ( currentMode != 1 ) { numberList . push_back ( 27 ); currentMode = 1 ; } } else if ( c >= 'A' && c <= 'Z' ) { if ( currentMode == 1 ) { numberList . push_back ( 28 ); numberList . push_back ( 28 ); currentMode = 0 ; } if ( currentMode == 2 ) { numberList . push_back ( 28 ); currentMode = 0 ; } } } vector < int > get_gx ( int k ) { // (1) // \u6839\u636e k \u8ba1\u7b97 g(x) vector < int > res ; res . push_back ( mod - 3 ); res . push_back ( 1 ); int a0 = 3 ; for ( int i = 2 ; i <= k ; ++ i ) { a0 = ( a0 * 3 ) % mod ; res . insert ( res . begin (), 0 ); // \u5728\u6700\u4f4e\u4f4d\u63d2\u5165 1\uff0c\u5373\u6574\u4f53\u6b21\u6570 +1 for ( int j = 0 ; j < i ; ++ j ) { res [ j ] = ( res [ j ] - ( a0 * res [ j + 1 ]) % mod + mod ) % mod ; } } return res ; } void get_verify_code () { // \u8ba1\u7b97\u6821\u9a8c\u7801\u5e76\u8f93\u51fa vector < int > tmp ; vector < int > g = get_gx ( verifyCodeLen ); // \u521d\u59cb\u5316 x^kd(x) for ( int i = 1 ; i <= verifyCodeLen ; ++ i ) { tmp . push_back ( 0 ); } for ( int i = codeWord . size () - 1 ; i >= 0 ; -- i ) { tmp . push_back ( codeWord [ i ]); } // \u591a\u9879\u5f0f\u957f\u9664\u6cd5\u8ba1\u7b97\u7ed3\u679c for ( int i = tmp . size () - 1 ; i >= verifyCodeLen ; -- i ) { int val = tmp [ i ]; for ( int j = 0 ; j < g . size (); ++ j ) { tmp [ i - j ] = ( tmp [ i - j ] - ( val * g [ g . size () - 1 - j ]) % mod + mod ) % mod ; } } // \u5c06 -r(x) \u8f6c\u5316\u4e3a r(x) for ( int i = 0 ; i < verifyCodeLen ; ++ i ) { // \u6ce8\u610f\uff1a\u4e0d\u80fd\u76f4\u63a5 mod - tmp[i]\uff0c\u56e0\u4e3a tmp[i] \u53ef\u80fd\u4e3a 0 tmp [ i ] = ( mod - tmp [ i ]) % mod ; } // \u8f93\u51fa\u7ed3\u679c for ( int i = verifyCodeLen - 1 ; i >= 0 ; -- i ) { printf ( \"%d \\n \" , tmp [ i ]); } } int main () { scanf ( \"%d%d\" , & w , & lev ); scanf ( \"%s\" , s ); n = strlen ( s ); // \u6b65\u9aa4\u4e00\uff1a\u5f97\u5230\u6570\u5b57\u5e8f\u5217 currentMode = 0 ; for ( int i = 0 ; i < n ; ++ i ) { checkmode ( s [ i ]); if ( s [ i ] >= '0' && s [ i ] <= '9' ) { numberList . push_back ( s [ i ] - '0' ); } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { numberList . push_back ( s [ i ] - 'a' ); } else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { numberList . push_back ( s [ i ] - 'A' ); } } if ( numberList . size () % 2 ) numberList . push_back ( 29 ); // \u6b65\u9aa4\u4e8c\uff1a\u8f6c\u6362\u4e3a\u7801\u5b57 for ( int i = 0 ; i < numberList . size (); i += 2 ) { codeWord . push_back ( 30 * numberList [ i ] + numberList [ i + 1 ]); } if ( lev == -1 ) verifyCodeLen = 0 ; else { verifyCodeLen = 1 ; for ( int i = 0 ; i <= lev ; ++ i ) { verifyCodeLen *= 2 ; } } // \u6b65\u9aa4\u4e09\uff1a\u8865\u5145\u7801\u5b57 while (( 1 + verifyCodeLen + codeWord . size ()) % w != 0 ) { codeWord . push_back ( 900 ); } codeWord . insert ( codeWord . begin (), codeWord . size () + 1 ); // \u6b65\u9aa4\u56db\uff1a\u8f93\u51fa\u6570\u636e\u7801\u7ed3\u679c for ( int i = 0 ; i < codeWord . size (); ++ i ) { printf ( \"%d \\n \" , codeWord [ i ]); } // \u6b65\u9aa4\u4e94\uff1a\u5982\u679c\u6709\u6821\u9a8c\u7801\uff0c\u5219\u8ba1\u7b97\u5e76\u8f93\u51fa if ( verifyCodeLen != 0 ) { get_verify_code (); } return 0 ; } \u80cc\u666f\u4e3a\u9ec4\u8272\u7684\u4ee3\u7801\u662f\u76f8\u6bd4\u90e8\u5206\u5206\u4ee3\u7801\u505a\u51fa\u7684\u6539\u53d8\uff0c\u5176\u5b83\u90e8\u5206\u4e0e\u90e8\u5206\u5206\u5b8c\u5168\u76f8\u540c\u3002","title":"\u6587\u7ae0 1"},{"location":"problem/24/3/1/#202112-3","text":"","title":"202112-3 \u767b\u673a\u724c\u53f7\u7801"},{"location":"problem/24/3/1/#40","text":"\u8fd9\u4e00\u90e8\u5206\u6570\u636e\u6ee1\u8db3 \\(s=-1\\) \uff0c\u5373\u6821\u9a8c\u7801\u4e3a\u7a7a\u3002 \u6211\u4eec\u6309\u7167\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u5bf9\u5e94\u64cd\u4f5c\u5373\u53ef\uff0c\u5927\u4f53\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5f97\u5230\u6570\u5b57\u5e8f\u5217\uff0c\u6ce8\u610f\u4e0d\u540c\u6a21\u5f0f\u7684\u5207\u6362\u4ee5\u53ca\u6700\u540e\u7684\u8865\u5168\u3002 \u5c06\u5f97\u5230\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u7801\u5b57\u3002 \u6839\u636e\u6709\u6548\u6570\u636e\u533a\u6bcf\u884c\u80fd\u5bb9\u7eb3\u7684\u7801\u5b57\u6570 \\(w\\) \u53ca\u76ee\u524d\u7801\u5b57\u4e2a\u6570\uff0c\u5728\u672b\u5c3e\u8865\u5145\u7801\u5b57\u3002\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u957f\u5ea6\u7801\u5b57\u3002 \u8f93\u51fa\u7ed3\u679c\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 210 ; const int mod = 929 ; int w , lev ; char s [ 100010 ]; int n ; vector < int > numberList ; // \u6570\u5b57\u5e8f\u5217 vector < int > codeWord ; // \u7801\u5b57\u5e8f\u5217 int currentMode ; // \u76ee\u524d\u7f16\u7801\u5668\u6a21\u5f0f\u30020:\u5927\u5199\u6a21\u5f0f 1:\u5c0f\u5199\u6a21\u5f0f 2:\u6570\u5b57\u6a21\u5f0f void checkmode ( char c ) { /* \u68c0\u67e5\u5c06\u8981\u8f93\u51fa\u7684\u4e0b\u4e2a\u5b57\u7b26\u4e0e\u76ee\u524d\u6a21\u5f0f\u662f\u5426\u5339\u914d\uff0c \u82e5\u4e0d\u5339\u914d\uff0c\u5219\u8f93\u51fa\u5bf9\u5e94\u66f4\u6539\u6a21\u5f0f\u6b65\u9aa4\u3002 */ if ( c >= '0' && c <= '9' ) { if ( currentMode != 2 ) { numberList . push_back ( 28 ); currentMode = 2 ; } } else if ( c >= 'a' && c <= 'z' ) { if ( currentMode != 1 ) { numberList . push_back ( 27 ); currentMode = 1 ; } } else if ( c >= 'A' && c <= 'Z' ) { if ( currentMode == 1 ) { numberList . push_back ( 28 ); numberList . push_back ( 28 ); currentMode = 0 ; } if ( currentMode == 2 ) { numberList . push_back ( 28 ); currentMode = 0 ; } } } int main () { scanf ( \"%d%d\" , & w , & lev ); // lev \u8868\u793a\u6821\u9a8c\u7ea7\u522b scanf ( \"%s\" , s ); n = strlen ( s ); // \u6b65\u9aa4\u4e00\uff1a\u5f97\u5230\u6570\u5b57\u5e8f\u5217 currentMode = 0 ; // \u521d\u59cb\u4e3a\u5927\u5199\u6a21\u5f0f for ( int i = 0 ; i < n ; ++ i ) { checkmode ( s [ i ]); if ( s [ i ] >= '0' && s [ i ] <= '9' ) { numberList . push_back ( s [ i ] - '0' ); } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { numberList . push_back ( s [ i ] - 'a' ); } else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { numberList . push_back ( s [ i ] - 'A' ); } } if ( numberList . size () % 2 ) numberList . push_back ( 29 ); // \u6b65\u9aa4\u4e8c\uff1a\u8f6c\u6362\u4e3a\u7801\u5b57 for ( int i = 0 ; i < numberList . size (); i += 2 ) { codeWord . push_back ( 30 * numberList [ i ] + numberList [ i + 1 ]); } // \u6b65\u9aa4\u4e09\uff1a\u8865\u5145\u7801\u5b57 while (( 1 + codeWord . size ()) % w != 0 ) { codeWord . push_back ( 900 ); } // \u6b65\u9aa4\u56db\uff1a\u8f93\u51fa\u7ed3\u679c codeWord . insert ( codeWord . begin (), codeWord . size () + 1 ); for ( int i = 0 ; i < codeWord . size (); ++ i ) { printf ( \"%d \\n \" , codeWord [ i ]); } return 0 ; }","title":"40% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df"},{"location":"problem/24/3/1/#100","text":"\u8fd9\u90e8\u5206\u6570\u636e\u8981\u6c42\u6211\u4eec\u5bf9\u6821\u9a8c\u7801\u8fdb\u884c\u5904\u7406\uff0c\u6240\u4ee5\u6b65\u9aa4\u53d8\u4e3a\uff1a \u5f97\u5230\u6570\u5b57\u5e8f\u5217\uff0c\u6ce8\u610f\u4e0d\u540c\u6a21\u5f0f\u7684\u5207\u6362\u4ee5\u53ca\u6700\u540e\u7684\u8865\u5168\u3002 \u5c06\u5f97\u5230\u7684\u6570\u5b57\u8f6c\u6362\u4e3a\u7801\u5b57\u3002 \u6839\u636e\u6709\u6548\u6570\u636e\u533a\u6bcf\u884c\u80fd\u5bb9\u7eb3\u7684\u7801\u5b57\u6570 \\(w\\) \u3001\u76ee\u524d\u7801\u5b57\u4e2a\u6570\u4ee5\u53ca{\\heiti{\u6821\u9a8c\u7801\u7684\u4f4d\u6570}}\uff0c\u5728\u672b\u5c3e\u8865\u5145\u7801\u5b57\u3002\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u957f\u5ea6\u7801\u5b57\u3002 \u8f93\u51fa\u6570\u636e\u7801\u90e8\u5206\u7ed3\u679c\u3002 \u8ba1\u7b97\u5f97\u51fa\u6821\u9a8c\u7801\uff0c\u5e76\u8f93\u51fa\u3002 \u6821\u9a8c\u7801\u7684\u4f4d\u6570\u80fd\u6bd4\u8f83\u65b9\u4fbf\u5f97\u51fa\uff0c\u5173\u952e\u5728\u4e8e\u6821\u9a8c\u7801\u7684\u8ba1\u7b97\u3002\u8003\u8651\u5173\u952e\u516c\u5f0f\uff1a \\[\\begin{equation*} x^kd(x)\\equiv q(x)g(x)-r(x) \\end{equation*}\\] \u5176\u4e2d \\(d(x)\\) \u662f \\(n-1\\) \u6b21\u591a\u9879\u5f0f\uff08\u5df2\u77e5\uff09\uff0c \\(g(x)\\) \u662f \\(k\\) \u6b21\u591a\u9879\u5f0f\uff08\u5df2\u77e5\uff09\uff0c \u672a\u77e5\u9879\u6709 \\(q(x),r(x)\\) \uff0c\u5176\u4e2d \\(r(x)\\) \u4e3a\u6240\u6c42\u3002 \u8003\u8651\u6d88\u53bb \\(q(x)\\) \u7684\u5f71\u54cd\uff1a\u53ef\u4ee5\u5728\u4e24\u7aef\u540c\u65f6\u5bf9 \\(g(x)\\) \u53d6\u4f59\uff0c\u5219 \\(q(x)g(x)\\) \u9879\u4f1a\u88ab\u76f4\u63a5\u6d88\u53bb\uff0c\u53ef\u4ee5\u5316\u6240\u6c42\u5f0f\u4e3a\uff1a \\[\\begin{equation*} x^kd(x)\\equiv -r(x) \\mod q(x) \\end{equation*}\\] \u6240\u4ee5\u76ee\u524d\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u89e3 \\(x^kd(x) \\mod q(x)\\) \u3002 \u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5 \u82e5 \\(f(x)\\) \u548c \\(g(x)\\) \u662f\u4e24\u4e2a\u591a\u9879\u5f0f\uff0c\u4e14 \\(g(x)\\) \u4e0d\u7b49\u4e8e \\(0\\) \uff0c \u5219\u5b58\u5728\u552f\u4e00\u7684\u591a\u9879\u5f0f \\(q(x)\\) \u548c \\(r(x)\\) \uff0c\u6ee1\u8db3\uff1a \\[\\begin{equation*} f(x)=q(x)g(x)+r(x) \\end{equation*}\\] \u5176\u4e2d \\(r(x)\\) \u7684\u6b21\u6570\u5c0f\u4e8e \\(g(x)\\) \u7684\u6b21\u6570\u3002\u6b64\u65f6 \\(q(x)\\) \u79f0\u4e3a \\(g(x)\\) \u9664 \\(f(x)\\) \u7684\u5546\u5f0f\uff0c \\(r(x)\\) \u79f0\u4e3a\u4f59\u5f0f\u3002 \u591a\u9879\u5f0f\u957f\u9664\u6cd5 \u6c42\u89e3\u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a 1. \u628a\u88ab\u9664\u5f0f\u3001\u9664\u5f0f\u6309\u67d0\u4e2a\u5b57\u6bcd\u4f5c\u964d\u5e42\u6392\u5217\uff0c\u5e76\u628a\u6240\u7f3a\u7684\u9879\u7528\u96f6\u8865\u9f50\uff1b 2. \u7528\u88ab\u9664\u5f0f\u7684\u7b2c\u4e00\u9879\u9664\u4ee5\u9664\u5f0f\u7b2c\u4e00\u9879\uff0c\u5f97\u5230\u5546\u5f0f\u7684\u7b2c\u4e00\u9879\uff1b 3. \u7528\u5546\u5f0f\u7684\u7b2c\u4e00\u9879\u53bb\u4e58\u9664\u5f0f\uff0c\u628a\u79ef\u5199\u5728\u88ab\u9664\u5f0f\u4e0b\u9762\uff08\u540c\u7c7b\u9879\u5bf9\u9f50\uff09\uff0c\u6d88\u53bb\u76f8\u7b49\u9879\uff0c\u628a\u4e0d\u76f8\u7b49\u7684\u9879\u7ed3\u5408\u8d77\u6765\uff1b 4. \u628a\u51cf\u5f97\u7684\u5dee\u5f53\u4f5c\u65b0\u7684\u88ab\u9664\u5f0f\uff0c\u518d\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u7ee7\u7eed\u6f14\u7b97\uff0c\u76f4\u5230\u4f59\u5f0f\u4e3a\u96f6\u6216\u4f59\u5f0f\u7684\u6b21\u6570\u4f4e\u4e8e\u9664\u5f0f\u7684\u6b21\u6570\u65f6\u4e3a\u6b62\u3002 \u4e0b\u9762\u5c55\u793a\u7684\u662f\u4e00\u4e2a\u591a\u9879\u5f0f\u957f\u9664\u6cd5\u7684\u4f8b\u5b50\uff1a \u5f97\u5230\u6c42\u89e3\u591a\u9879\u5f0f\u5e26\u4f59\u9664\u6cd5\u7684\u6b65\u9aa4\u540e\uff0c\u8003\u8651\u6c42\u89e3 \\(r(x)\\) \u7684\u6b65\u9aa4\uff1a \u8ba1\u7b97 \\(g(x)=(x-3)(x-3^2)\\cdots(x-3^k)\\) \uff1b \u8ba1\u7b97 \\(x^kd(x)\\) \uff1b \u8ba1\u7b97 \\(x^kd(x) \\mod g(x)\\) \uff0c\u5f97\u5230 \\(-r(x)\\) \uff1b \u5bf9\u5f97\u5230\u7684\u6bcf\u4e00\u9879\u53d6\u53cd\u5373\u53ef\u5f97\u5230 \\(r(x)\\) \u3002 \u8ba1\u7b97 \\(g(x)\\) \uff1a\u8003\u8651\u5230\u6bcf\u4e00\u6b21\u591a\u9879\u5f0f\u4e58\u4ee5\u7684\u56e0\u5b50\u90fd\u662f \\((x-a)\\) \u7684\u683c\u5f0f\uff0c \u6240\u4ee5\u53ef\u4ee5\u628a \\(A(x-a)\\) \u7684\u591a\u9879\u5f0f\u76f8\u4e58\u8f6c\u5316\u4e3a \\(xA-aA\\) \u7684\u683c\u5f0f\u3002 \\(xA\\) \u53ef\u4ee5\u901a\u8fc7\u6574\u4f53\u79fb\u9879\u5b9e\u73b0\uff1b\u5728\u79fb\u9879\u540e\uff0c\u539f\u672c\u5728 \\(x^i\\) \u7684\u7cfb\u6570\u6210\u4e3a \\(x^{i+1}\\) \u7684\u7cfb\u6570\uff0c \u6240\u4ee5\u53ef\u4ee5\u5728\u4e00\u4e2a\u6570\u7ec4\u4e0a\uff0c\u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u4f9d\u6b21\u8ba1\u7b97\uff0c\u5f97\u5230\u7ed3\u679c\u3002 \u8ba1\u7b97 \\(x^kd(x)\\) \uff1a\u8fd9\u90e8\u5206\u6bd4\u8f83\u7b80\u5355\uff0c\u5c06\u4f4e \\(k\\) \u4f4d\u7684\u7cfb\u6570\u8d4b \\(0\\) \uff0c\u518d\u5c06\u5df2\u8ba1\u7b97\u51fa\u7684\u6570\u636e\u4f4d\u653e\u5165\u5bf9\u5e94\u4f4d\u7f6e\u5373\u53ef\u3002 \u8ba1\u7b97 \\(x^kd(x) \\mod g(x)\\) \uff1a\u5229\u7528\u4e0a\u6587\u63d0\u5230\u7684\u591a\u9879\u5f0f\u957f\u9664\u6cd5\u5373\u53ef\u3002\u672c\u9898 \\(g(x)\\) \u7684\u6700\u9ad8\u4f4d\u7cfb\u6570\u6052\u4e3a \\(1\\) \uff0c\u7b80\u5316\u4e86\u8ba1\u7b97\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <vector> using namespace std ; const int maxn = 210 ; const int mod = 929 ; int w , lev ; char s [ 100010 ]; int n ; vector < int > numberList ; vector < int > codeWord ; int verifyCodeLen ; // \u6821\u9a8c\u7801\u957f\u5ea6 int currentMode ; void checkmode ( char c ) { /* \u68c0\u67e5\u5c06\u8981\u8f93\u51fa\u7684\u4e0b\u4e2a\u5b57\u7b26\u4e0e\u76ee\u524d\u6a21\u5f0f\u662f\u5426\u5339\u914d\uff0c \u82e5\u4e0d\u5339\u914d\uff0c\u5219\u8f93\u51fa\u5bf9\u5e94\u66f4\u6539\u6a21\u5f0f\u6b65\u9aa4\u3002 */ if ( c >= '0' && c <= '9' ) { if ( currentMode != 2 ) { numberList . push_back ( 28 ); currentMode = 2 ; } } else if ( c >= 'a' && c <= 'z' ) { if ( currentMode != 1 ) { numberList . push_back ( 27 ); currentMode = 1 ; } } else if ( c >= 'A' && c <= 'Z' ) { if ( currentMode == 1 ) { numberList . push_back ( 28 ); numberList . push_back ( 28 ); currentMode = 0 ; } if ( currentMode == 2 ) { numberList . push_back ( 28 ); currentMode = 0 ; } } } vector < int > get_gx ( int k ) { // (1) // \u6839\u636e k \u8ba1\u7b97 g(x) vector < int > res ; res . push_back ( mod - 3 ); res . push_back ( 1 ); int a0 = 3 ; for ( int i = 2 ; i <= k ; ++ i ) { a0 = ( a0 * 3 ) % mod ; res . insert ( res . begin (), 0 ); // \u5728\u6700\u4f4e\u4f4d\u63d2\u5165 1\uff0c\u5373\u6574\u4f53\u6b21\u6570 +1 for ( int j = 0 ; j < i ; ++ j ) { res [ j ] = ( res [ j ] - ( a0 * res [ j + 1 ]) % mod + mod ) % mod ; } } return res ; } void get_verify_code () { // \u8ba1\u7b97\u6821\u9a8c\u7801\u5e76\u8f93\u51fa vector < int > tmp ; vector < int > g = get_gx ( verifyCodeLen ); // \u521d\u59cb\u5316 x^kd(x) for ( int i = 1 ; i <= verifyCodeLen ; ++ i ) { tmp . push_back ( 0 ); } for ( int i = codeWord . size () - 1 ; i >= 0 ; -- i ) { tmp . push_back ( codeWord [ i ]); } // \u591a\u9879\u5f0f\u957f\u9664\u6cd5\u8ba1\u7b97\u7ed3\u679c for ( int i = tmp . size () - 1 ; i >= verifyCodeLen ; -- i ) { int val = tmp [ i ]; for ( int j = 0 ; j < g . size (); ++ j ) { tmp [ i - j ] = ( tmp [ i - j ] - ( val * g [ g . size () - 1 - j ]) % mod + mod ) % mod ; } } // \u5c06 -r(x) \u8f6c\u5316\u4e3a r(x) for ( int i = 0 ; i < verifyCodeLen ; ++ i ) { // \u6ce8\u610f\uff1a\u4e0d\u80fd\u76f4\u63a5 mod - tmp[i]\uff0c\u56e0\u4e3a tmp[i] \u53ef\u80fd\u4e3a 0 tmp [ i ] = ( mod - tmp [ i ]) % mod ; } // \u8f93\u51fa\u7ed3\u679c for ( int i = verifyCodeLen - 1 ; i >= 0 ; -- i ) { printf ( \"%d \\n \" , tmp [ i ]); } } int main () { scanf ( \"%d%d\" , & w , & lev ); scanf ( \"%s\" , s ); n = strlen ( s ); // \u6b65\u9aa4\u4e00\uff1a\u5f97\u5230\u6570\u5b57\u5e8f\u5217 currentMode = 0 ; for ( int i = 0 ; i < n ; ++ i ) { checkmode ( s [ i ]); if ( s [ i ] >= '0' && s [ i ] <= '9' ) { numberList . push_back ( s [ i ] - '0' ); } else if ( s [ i ] >= 'a' && s [ i ] <= 'z' ) { numberList . push_back ( s [ i ] - 'a' ); } else if ( s [ i ] >= 'A' && s [ i ] <= 'Z' ) { numberList . push_back ( s [ i ] - 'A' ); } } if ( numberList . size () % 2 ) numberList . push_back ( 29 ); // \u6b65\u9aa4\u4e8c\uff1a\u8f6c\u6362\u4e3a\u7801\u5b57 for ( int i = 0 ; i < numberList . size (); i += 2 ) { codeWord . push_back ( 30 * numberList [ i ] + numberList [ i + 1 ]); } if ( lev == -1 ) verifyCodeLen = 0 ; else { verifyCodeLen = 1 ; for ( int i = 0 ; i <= lev ; ++ i ) { verifyCodeLen *= 2 ; } } // \u6b65\u9aa4\u4e09\uff1a\u8865\u5145\u7801\u5b57 while (( 1 + verifyCodeLen + codeWord . size ()) % w != 0 ) { codeWord . push_back ( 900 ); } codeWord . insert ( codeWord . begin (), codeWord . size () + 1 ); // \u6b65\u9aa4\u56db\uff1a\u8f93\u51fa\u6570\u636e\u7801\u7ed3\u679c for ( int i = 0 ; i < codeWord . size (); ++ i ) { printf ( \"%d \\n \" , codeWord [ i ]); } // \u6b65\u9aa4\u4e94\uff1a\u5982\u679c\u6709\u6821\u9a8c\u7801\uff0c\u5219\u8ba1\u7b97\u5e76\u8f93\u51fa if ( verifyCodeLen != 0 ) { get_verify_code (); } return 0 ; } \u80cc\u666f\u4e3a\u9ec4\u8272\u7684\u4ee3\u7801\u662f\u76f8\u6bd4\u90e8\u5206\u5206\u4ee3\u7801\u505a\u51fa\u7684\u6539\u53d8\uff0c\u5176\u5b83\u90e8\u5206\u4e0e\u90e8\u5206\u5206\u5b8c\u5168\u76f8\u540c\u3002","title":"100% \u6570\u636e\u2014\u2014\u6a21\u62df+\u591a\u9879\u5f0f\u9664\u6cd5"},{"location":"problem/24/4/","text":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u9898\u76ee\u94fe\u63a5 202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 25 n,k\u22642000,m\u226410000 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u79bb\u6563\u5316+\u7ebf\u6bb5\u6811 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811 C++ \u9898\u89e3\u94fe\u63a5","title":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c"},{"location":"problem/24/4/#202112-4","text":"","title":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c"},{"location":"problem/24/4/#_1","text":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/24/4/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 \u6587\u7ae0 1 25 n,k\u22642000,m\u226410000 \u76f4\u63a5\u6a21\u62df \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u79bb\u6563\u5316+\u7ebf\u6bb5\u6811 C++ \u9898\u89e3\u94fe\u63a5 \u6587\u7ae0 1 100 \u65e0\u7279\u6b8a\u9650\u5236 \u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811 C++ \u9898\u89e3\u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/24/4/1/","text":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c 25% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df \u6211\u4eec\u6309\u7167\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u5bf9\u5e94\u64cd\u4f5c\u5373\u53ef\uff0c\u6ce8\u610f\u6bcf\u4e00\u4e2a\u8981\u6c42\u6267\u884c\u7684\u6761\u4ef6\uff1a \u5199\u5165\u64cd\u4f5c\uff1a\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u6267\u884c\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u4e0d\u88ab\u81ea\u5df1\u5360\u7528\u7684\u4f4d\u7f6e\u3002 \u9664\u4e86\u7b2c\u4e00\u4e2a\u70b9\u5c31\u88ab\u5176\u4ed6\u7a0b\u5e8f\u5360\u7528\u4ee5\u5916\uff0c\u5fc5\u7136\u4f1a\u5199\u5165\u3002 \u9047\u5230\u81ea\u5df1\u5360\u7528\uff0c\u5219 \u8986\u76d6 \u3002 \u5220\u9664\u64cd\u4f5c\uff1a\u540c\u65f6\u6574\u4f53\u8fdb\u884c\uff0c\u8981\u6c42\u6240\u6709\u4f4d\u7f6e\u90fd\u88ab\u76ee\u524d\u7a0b\u5e8f\u5360\u7528\u3002 \u8981\u4e48\u5168\u5220\uff0c\u8981\u4e48\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\u3002 \u6062\u590d\u64cd\u4f5c\uff1a\u540c\u65f6\u6574\u4f53\u8fdb\u884c\uff0c\u8981\u6c42\u6240\u6709\u4f4d\u7f6e\u90fd\u4e0d\u88ab\u5360\u7528\uff0c\u4e14\u4e0a\u6b21\u5360\u7528\u7a0b\u5e8f\u4e3a\u76ee\u524d\u7a0b\u5e8f\u3002 \u8981\u4e48\u5168\u6062\u590d\uff0c\u8981\u4e48\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\u3002 \u9047\u5230\u81ea\u5df1\u5360\u7528\uff0c\u5219 \u4e0d\u505a\u4efb\u4f55\u66f4\u6539 \u3002 \u8bfb\u5165\u64cd\u4f5c\uff1a\u8bfb\u53d6\u5360\u7528\u7a0b\u5e8f\u548c\u6570\u503c\uff0c\u82e5\u672a\u88ab\u5360\u7528\uff0c\u5219\u8f93\u51fa 0 0\u3002 100% \u6570\u636e\u2014\u2014\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811 \u901a\u8fc7\u8fd9\u9053\u9898\u7684\u64cd\u4f5c\u8981\u6c42\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u63a8\u6d4b\u51fa\u8fd9\u9053\u9898\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u63d0\u793a \u5982\u679c\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u53ef\u4ee5\u62ff\u5404\u79cd\u6570\u636e\u7ed3\u6784\u5f80\u4e0a\u5957\u3002 \u4f8b\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6d89\u53ca\u533a\u95f4\u4fee\u6539\u3001\u5355\u70b9\u67e5\u8be2\uff0c\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u6765\u8bf4\u8d1f\u62c5\u592a\u91cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002 \u5982\u679c\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u5219\u4e00\u822c\u662f\u8981\u6c42\u51fa\u7b2c k \u5927\u6570\uff0c\u6216\u8005\u662f\u5e8f\u5217\u7ffb\u8f6c\u7c7b\u95ee\u9898\uff0c\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u4e0d\u592a\u5951\u5408\u3002 \u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e\u3002\u7efc\u5408\u8003\u8651\u4e0b\uff0c\u7ebf\u6bb5\u6811\u662f\u6bd4\u8f83\u7b26\u5408\u8981\u6c42\u7684\u3002 \u8003\u8651\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5 \u5148\u4e0d\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u5185\u5b58\u7a7a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u8fd9\u9053\u9898\u76ee\u3002 \u8003\u8651\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u91cf\uff0c\u76ee\u524d\u5df2\u77e5\u7684\u6709\u78c1\u76d8\u4f4d\u7f6e\u7684\u503c\u3001\u76ee\u524d\u5360\u7528\u7a0b\u5e8f id\u3001\u4e0a\u6b21\u5360\u7528\u7a0b\u5e8f id\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5047\u8bbe\u4e00\u4e2a\u4f4d\u7f6e\u672a\u88ab\u5360\u7528\u548c\u88ab id \u4e3a 0 \u7684\u7a0b\u5e8f\u5360\u7528\u662f\u7b49\u4ef7\u7684\u3002 \u5199\u5165\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u627e\u5230\u5199\u5165\u53f3\u8fb9\u754c \u548c \u76f4\u63a5\u5199\u5165 \u4e24\u4e2a\u64cd\u4f5c\u3002 \u76f4\u63a5\u5199\u5165\u64cd\u4f5c\u5c31\u662f\u76f4\u63a5\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c \u800c\u5212\u5206\u64cd\u4f5c\u9700\u8981\u77e5\u9053\u8be5\u533a\u95f4 \u88ab\u5360\u7528 \u7684\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u5c06\u8981\u5199\u5165\u7684 id\u3002 \u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u91cf\u8bbe\u4e3a id1\u3002 \u5220\u9664\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u5224\u65ad\u662f\u5426\u53ef\u5220 \u548c \u76f4\u63a5\u5220\u9664 \u4e24\u4e2a\u64cd\u4f5c\u3002 \u76f4\u63a5\u5220\u9664\u64cd\u4f5c\u5c31\u662f\u76f4\u63a5\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c \u800c\u5224\u65ad\u662f\u5426\u53ef\u5220\u9700\u8981\u77e5\u9053\u8be5\u533a\u95f4 \u6240\u6709 \u7684\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u5c06\u8981\u5199\u5165\u7684 id\u3002 \u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u91cf\u8bbe\u4e3a id2\uff0c\u6ce8\u610f id1 \u4e0e id2 \u7684\u533a\u522b\u2014\u2014\u662f\u5426\u5141\u8bb8\u5305\u542b\u672a\u88ab\u5360\u7528\u7684\u7a0b\u5e8f\u3002 \u6062\u590d\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u5224\u65ad\u662f\u5426\u53ef\u6062\u590d \u548c \u76f4\u63a5\u6062\u590d \u4e24\u4e2a\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u4e0e\u5220\u9664\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\u5224\u65ad\u65f6\u9700\u8981\u5224\u65ad\u76ee\u524d\u5360\u7528\u7684 id \u548c\u4e0a\u6b21\u88ab\u5360\u7528\u7684 id\u3002 \u8bfb\u53d6\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u67e5\u8be2\u5360\u7528\u7a0b\u5e8f id \u548c \u67e5\u8be2\u503c \u4e24\u4e2a\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u662f\u76f8\u5bf9\u6bd4\u8f83\u8d28\u6734\u7684\u5355\u70b9\u67e5\u8be2\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5904\u7406\u4e3a\u533a\u95f4\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u7ef4\u62a4\u7684\u91cf\uff1a\u503c\u3001\u6709\u5173\u76ee\u524d\u5360\u7528\u7a0b\u5e8f id \u7684\u4e24\u4e2a\u91cf\u3001\u4e0a\u6b21\u88ab\u5360\u7528\u7684\u7a0b\u5e8f id\u3002\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u91cf\u9488\u5bf9\u7236\u5b50\u4e4b\u95f4\u7684\u7ef4\u62a4\u3002 \u503c val\uff1a\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u53d6\u503c\u7684\u591a\u5c11\uff0c\u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u540c\u5219\u8bbe\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u67e5\u8be2\u5230\u4e0d\u5b58\u5728\u7684\u503c\u7684\u95ee\u9898\u3002 \u88ab\u5360\u7528\u4f4d\u7f6e\u7a0b\u5e8f id1\uff1a \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u672a\u88ab\u5360\u7528\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u672a\u5360\u7528\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u4e00\u4e2a\u8282\u70b9\u672a\u5360\u7528\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u53e6\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9\u7684\u6807\u8bb0\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u975e\u7a7a\u4e14\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u975e\u7a7a\u4e14\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b \u88ab\u5360\u7528\u4f4d\u7f6e\u7a0b\u5e8f id2\uff1a\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u8ba8\u8bba\uff0c\u5c06\u672a\u88ab\u7a0b\u5e8f\u5360\u7528\u8282\u70b9\u89c6\u4e3a\u88ab id \u4e3a 0 \u7684\u7a0b\u5e8f\u5360\u7528\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b \u4e0a\u4e00\u6b21\u88ab\u5360\u7528\u7a0b\u5e8f lid\uff1a\u4e0e id2 \u76f8\u540c\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b \u89e3\u51b3\u7a7a\u95f4\u95ee\u9898 \u7406\u89e3\u7ebf\u6bb5\u6811\u7684\u89e3\u6cd5\u4e4b\u540e\uff0c\u5c31\u4f1a\u51fa\u73b0\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u7a7a\u95f4\u8fbe\u5230\u4e86 1e9 \u7ea7\u522b\uff0c\u80af\u5b9a\u4f1a MLE\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u8003\u8651\uff1a\u4e00\u5171\u6709 \\(2\\times 10^5\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u6700\u591a\u64cd\u4f5c\u6d89\u53ca\u4e00\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u7528\u4e24\u4e2a\u7aef\u70b9\u8868\u793a\u3002 \u8003\u8651\u5230\u4e34\u754c\u5904\u7684\u5f71\u54cd\uff0c\u4e00\u6b21\u64cd\u4f5c\u6700\u591a\u4f1a\u6d89\u53ca 4 \u4e2a\u70b9 \uff08\u6bd4\u5982\u539f\u6765\u7684\u533a\u95f4\u662f \\([1, 10]\\) \uff0c\u6211\u4eec\u66f4\u6539\u4e86\u533a\u95f4 \\([3,5]\\) \uff0c\u90a3\u4e48\u5f97\u5230\u7684\u533a\u95f4\u4e3a \\([1,2],[3,5],[6,10]\\) \uff0c\u591a\u51fa\u4e86 \\(2,3,5,6\\) \u56db\u4e2a\u70b9\uff09\u3002 \u90a3\u4e48\u603b\u4f53\u6765\u770b\uff0c\u6d89\u53ca\u5230\u7684\u70b9\u6700\u591a\u6709 \\(2\\times 10^5\\times 4 = 8\\times 10^5\\) \u4e2a\u3002 \u6211\u4eec\u53ef\u4ee5\u7ef4\u6301\u8fd9\u4e9b\u70b9\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff0c\u800c\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u503c\u57df\u8f83\u5c0f\u7684\u533a\u57df\uff0c\u5c31\u53ef\u4ee5\u51cf\u5c11\u7a7a\u95f4\u5360\u7528\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4e3a\u79bb\u6563\u5316\u3002 \u79bb\u6563\u5316 \u628a\u65e0\u9650\u7a7a\u95f4\u4e2d\u6709\u9650\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u4ee5\u6b64\u63d0\u9ad8\u7b97\u6cd5\u7684\u65f6\u7a7a\u6548\u7387\u3002\u901a\u4fd7\u7684\u8bf4\uff0c\u79bb\u6563\u5316\u662f\u5728\u4e0d\u6539\u53d8\u6570\u636e\u76f8\u5bf9\u5927\u5c0f\u7684\u6761\u4ef6\u4e0b\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u76f8\u5e94\u7684\u7f29\u5c0f\u3002 \u79bb\u6563\u5316\u672c\u8d28\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u54c8\u5e0c\uff0c\u5176\u4fdd\u8bc1\u6570\u636e\u5728\u54c8\u5e0c\u4ee5\u540e\u4ecd\u7136\u4fdd\u6301\u539f\u6765\u7684\u5168/\u504f\u5e8f\u5173\u7cfb\u3002 \u79bb\u6563\u5316\u7684\u4e00\u822c\u6027\u6b65\u9aa4\uff1a \u7edf\u8ba1\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u5728\u77e5\u9053\u786e\u5207\u4e0a\u754c\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u6570\u7ec4\uff0c\u4e0d\u6e05\u695a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528 vector\uff1b \u5bf9\u6240\u6709\u7684\u6570\u636e\u6392\u5e8f (sort)\u3001\u53bb\u91cd (unique)\uff1b \u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u5176\u79bb\u6563\u5316\u540e\u7684\u5bf9\u5e94\u503c\u5373\u4e3a\u5176\u5728\u6392\u5e8f\u53bb\u91cd\u540e\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206 (lower_bound) \u786e\u5b9a\u3002 \u8fd9\u9053\u9898\u5141\u8bb8\u6211\u4eec\u63d0\u524d\u5c06\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u8bb0\u5f55\u4e0b\u6765\uff08\u5f53\u7136\u4e0d\u662f\u6240\u6709\u7684\u9898\u76ee\u90fd\u5141\u8bb8\u8fd9\u6837\uff09\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002 \u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u4e2a\u6570\u4e0e\u8be2\u95ee\u4e2a\u6570\u6210\u6bd4\u4f8b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(k\\log k)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <vector> using namespace std ; const int maxn = 200010 ; const int INF = 1e9 + 10 ; int n , m , k ; #define ls o << 1 #define rs ls | 1 struct treenode { // \u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u82e5\u4e0d\u552f\u4e00\u5219\u4e3a INF\uff1blazy \u4e3a INF \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int val , lazy_val ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u9664 0 \u4ee5\u5916\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id1 , lazy_id1 ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id2 , lazy_id2 ; // \u4e0a\u6b21\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1\u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int lid , lazy_lid ; } tree [ maxn << 5 ]; void pushup ( int o ) { // \u7ebf\u6bb5\u6811\u4e0a\u4f20\u64cd\u4f5c\uff0c\u5408\u5e76\u5de6\u53f3\u5b50\u6811\u7ed3\u679c // val \u7684\u5408\u5e76 tree [ o ]. val = ( tree [ ls ]. val == tree [ rs ]. val ) ? tree [ ls ]. val : INF ; // id1 \u7684\u5408\u5e76 if ( tree [ ls ]. id1 == -1 || tree [ rs ]. id1 == -1 ) { tree [ o ]. id1 = -1 ; } else if ( tree [ ls ]. id1 == tree [ rs ]. id1 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else if ( tree [ ls ]. id1 == 0 ) { tree [ o ]. id1 = tree [ rs ]. id1 ; } else if ( tree [ rs ]. id1 == 0 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else { tree [ o ]. id1 = -1 ; } // id2 \u7684\u5408\u5e76 if ( tree [ ls ]. id2 == -1 || tree [ rs ]. id2 == -1 ) { tree [ o ]. id2 = -1 ; } else if ( tree [ ls ]. id2 == tree [ rs ]. id2 ) { tree [ o ]. id2 = tree [ ls ]. id2 ; } else { tree [ o ]. id2 = -1 ; } // lid \u7684\u5408\u5e76 if ( tree [ ls ]. lid == -1 || tree [ rs ]. lid == -1 ) { tree [ o ]. lid = -1 ; } else if ( tree [ ls ]. lid == tree [ rs ]. lid ) { tree [ o ]. lid = tree [ ls ]. lid ; } else { tree [ o ]. lid = -1 ; } } void pushdown ( int o ) { // \u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0b\u4f20\u64cd\u4f5c if ( tree [ o ]. lazy_val != INF ) { tree [ ls ]. val = tree [ rs ]. val = tree [ o ]. lazy_val ; tree [ ls ]. lazy_val = tree [ rs ]. lazy_val = tree [ o ]. lazy_val ; tree [ o ]. lazy_val = INF ; } if ( tree [ o ]. lazy_id1 != -1 ) { tree [ ls ]. id1 = tree [ rs ]. id1 = tree [ o ]. lazy_id1 ; tree [ ls ]. lazy_id1 = tree [ rs ]. lazy_id1 = tree [ o ]. lazy_id1 ; tree [ o ]. lazy_id1 = -1 ; } if ( tree [ o ]. lazy_id2 != -1 ) { tree [ ls ]. id2 = tree [ rs ]. id2 = tree [ o ]. lazy_id2 ; tree [ ls ]. lazy_id2 = tree [ rs ]. lazy_id2 = tree [ o ]. lazy_id2 ; tree [ o ]. lazy_id2 = -1 ; } if ( tree [ o ]. lazy_lid != -1 ) { tree [ ls ]. lid = tree [ rs ]. lid = tree [ o ]. lazy_lid ; tree [ ls ]. lazy_lid = tree [ rs ]. lazy_lid = tree [ o ]. lazy_lid ; tree [ o ]. lazy_lid = -1 ; } } void build ( int o , int l , int r ) { // \u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u5efa\u6811 if ( l == r ) { tree [ o ]. val = 0 ; tree [ o ]. lazy_val = INF ; tree [ o ]. id1 = tree [ o ]. id2 = tree [ o ]. lid = 0 ; tree [ o ]. lazy_id1 = tree [ o ]. lazy_id2 = tree [ o ]. lazy_lid = -1 ; return ; } int mid = ( l + r ) >> 1 ; build ( ls , l , mid ); build ( rs , mid + 1 , r ); tree [ o ]. lazy_val = INF ; pushup ( o ); } #define ALLOK -2 int find_right ( int o , int l , int r , int ql , int qid ) { // \u64cd\u4f5c\u4e00\u4e2d\uff0c\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u5bfb\u627e\u53f3\u7aef\u70b9\u53ef\u80fd\u7684\u6700\u5927\u503c // \u8fd9\u91cc\u6ca1\u6709\u8003\u8651\u548c\u53f3\u7aef\u70b9\u7684\u6bd4\u8f83\uff0c\u76f4\u63a5\u5bfb\u627e\u4e86\u6700\u5927\u7684\u53ef\u80fd\u503c pushdown ( o ); if ( r < ql || tree [ o ]. id1 == qid || tree [ o ]. id1 == 0 ) { // \u5168\u90e8\u7b26\u5408\u6761\u4ef6 return ALLOK ; } else if ( tree [ o ]. id2 != -1 ) { // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de\u8be5\u533a\u57df\u5de6\u8fb9\u7b2c\u4e00\u4e2a return l - 1 ; } else { // \u9700\u8981\u5bfb\u627e\u786e\u5207\u4f4d\u7f6e // \u5148\u67e5\u627e\u5de6\u533a\u95f4\uff0c\u5982\u679c\u5de6\u533a\u95f4\u5168\u6ee1\u8db3\u5219\u518d\u5bfb\u627e\u53f3\u533a\u95f4 int mid = ( l + r ) >> 1 ; int leftPart = ( ql <= mid ) ? find_right ( ls , l , mid , ql , qid ) : ALLOK ; return ( leftPart == ALLOK ) ? find_right ( rs , mid + 1 , r , ql , qid ) : leftPart ; } } #undef ALLOK void modify_val ( int o , int l , int r , int ql , int qr , int val , int id , bool ignoreLid = false ) { // \u82e5 val = INF \u4ee3\u8868\u4e0d\u9700\u8981\u5bf9 val \u8fdb\u884c\u5904\u7406 // \u82e5 ignoreLid = true \u5219\u4e0d\u5bf9 lid \u8fdb\u884c\u66f4\u6539 if ( l >= ql && r <= qr ) { if ( val != INF ) tree [ o ]. val = tree [ o ]. lazy_val = val ; tree [ o ]. id1 = tree [ o ]. lazy_id1 = id ; tree [ o ]. id2 = tree [ o ]. lazy_id2 = id ; if ( ! ignoreLid ) tree [ o ]. lid = tree [ o ]. lazy_lid = id ; return ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) { modify_val ( ls , l , mid , ql , qr , val , id , ignoreLid ); } if ( qr > mid ) { modify_val ( rs , mid + 1 , r , ql , qr , val , id , ignoreLid ); } pushup ( o ); } bool is_same_id ( int o , int l , int r , int ql , int qr , int id , bool isRecover = false ) { // \u5224\u65ad\u8be5\u533a\u57df id \u548c lid \u662f\u5426\u6ee1\u8db3\u6761\u4ef6 if ( l >= ql && r <= qr ) { if ( isRecover ) { // \u68c0\u67e5 id = 0 \u4e14 lid = id return ( tree [ o ]. id2 == 0 && tree [ o ]. lid == id ); } else { // \u68c0\u67e5 id = id return ( tree [ o ]. id2 == id ); } } pushdown ( o ); int mid = ( l + r ) >> 1 ; bool isSame = true ; if ( ql <= mid ) { isSame = isSame && is_same_id ( ls , l , mid , ql , qr , id , isRecover ); } if ( qr > mid && isSame ) { isSame = isSame && is_same_id ( rs , mid + 1 , r , ql , qr , id , isRecover ); } return isSame ; } int query_val ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aval if ( p >= l && p <= r && tree [ o ]. val != INF ) { return tree [ o ]. val ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_val ( ls , l , mid , p ); else return query_val ( rs , mid + 1 , r , p ); } int query_id ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aid2 if ( p >= l && p <= r && tree [ o ]. id2 != -1 ) { return tree [ o ]. id2 ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_id ( ls , l , mid , p ); else return query_id ( rs , mid + 1 , r , p ); } #undef ls #undef rs struct instruction { int opt , id , l , r , x ; } inst [ maxn ]; // numList \u5b58\u50a8\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\uff0ctotnum \u8868\u793a\u4e2a\u6570 int numList [ maxn << 2 ], totnum ; void discretization () { // \u79bb\u6563\u5316\u64cd\u4f5c sort ( numList + 1 , numList + 1 + totnum ); totnum = unique ( numList + 1 , numList + 1 + totnum ) - numList - 1 ; m = totnum ; for ( int i = 1 ; i <= k ; ++ i ) { if ( inst [ i ]. opt == 0 || inst [ i ]. opt == 1 || inst [ i ]. opt == 2 ) { inst [ i ]. l = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. l ) - numList ; inst [ i ]. r = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. r ) - numList ; } else { inst [ i ]. x = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. x ) - numList ; } } } int main () { scanf ( \"%d%d%d\" , & n , & m , & k ); numList [ ++ totnum ] = 1 ; numList [ ++ totnum ] = m ; for ( int i = 1 ; i <= k ; ++ i ) { scanf ( \"%d\" , & inst [ i ]. opt ); if ( inst [ i ]. opt == 0 ) { scanf ( \"%d%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r , & inst [ i ]. x ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; // \u6ce8\u610f\u8fb9\u754c\u95ee\u9898\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8fd9\u91cc\u628a\u4ea4\u754c\u5904\u4e24\u70b9\u5206\u5f00\u4e86\uff0c\u4e0b\u540c if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else if ( inst [ i ]. opt == 1 ) { scanf ( \"%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else if ( inst [ i ]. opt == 2 ) { scanf ( \"%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else { scanf ( \"%d\" , & inst [ i ]. x ); // \u5bf9\u4e8e\u67e5\u8be2\u7684\u6570\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u5373\u53ef } } // \u79bb\u6563\u5316\u5904\u7406 discretization (); // \u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u5efa\u6811 build ( 1 , 1 , m ); // \u8fdb\u884c\u64cd\u4f5c for ( int i = 1 ; i <= k ; ++ i ) { if ( inst [ i ]. opt == 0 ) { // \u5199\u5165\u64cd\u4f5c\uff1a\u5148\u6c42\u5f97\u8303\u56f4\uff0c\u518d\u8fdb\u884c\u586b\u5145 int r = find_right ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. id ); if ( r == -2 ) // r = -2 \u4ee3\u8868\u5168\u90e8\u6ee1\u8db3 r = inst [ i ]. r ; else r = min ( r , inst [ i ]. r ); if ( inst [ i ]. l <= r ) { printf ( \"%d \\n \" , numList [ r ]); // \u6ce8\u610f\u8fd4\u56de\u79bb\u6563\u5316\u524d\u7684\u503c modify_val ( 1 , 1 , m , inst [ i ]. l , r , inst [ i ]. x , inst [ i ]. id ); } else { printf ( \"-1 \\n \" ); } } else if ( inst [ i ]. opt == 1 ) { // \u5220\u9664\u64cd\u4f5c\uff1a\u5148\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u4e4b\u540e\u6267\u884c if ( is_same_id ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , inst [ i ]. id )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , INF , 0 , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( inst [ i ]. opt == 2 ) { // \u6062\u590d\u64cd\u4f5c\uff1a\u5148\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u4e4b\u540e\u6267\u884c if ( is_same_id ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , inst [ i ]. id , true )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , INF , inst [ i ]. id , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( inst [ i ]. opt == 3 ) { // \u8bfb\u53d6\u64cd\u4f5c\uff1a\u5206\u522b\u8bfb\u53d6 id \u548c val int id = query_id ( 1 , 1 , m , inst [ i ]. x ); int val = query_val ( 1 , 1 , m , inst [ i ]. x ); if ( id == 0 ) { printf ( \"0 0 \\n \" ); } else { printf ( \"%d %d \\n \" , id , val ); } } } return 0 ; } 100% \u6570\u636e\u2014\u2014\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811 \u5728\u4e0a\u4e00\u9898\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5148\u8bfb\u5165\u6240\u6709\u7684\u6570\u636e\u5e76\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\uff0c\u4e4b\u540e\u518d\u6267\u884c\u4e3b\u8981\u7684\u7b97\u6cd5\u8fc7\u7a0b\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u5728\u6267\u884c\u4e3b\u8981\u7684\u7b97\u6cd5\u8fc7\u7a0b\u524d\u5f97\u5230\u6240\u6709\u7684\u8f93\u5165\u6570\u636e\u3002 \u79bb\u7ebf\u7b97\u6cd5 \u8981\u6c42\u5728\u6267\u884c\u7b97\u6cd5\u524d\u8f93\u5165\u6570\u636e\u5df2\u77e5\u7684\u7b97\u6cd5\u79f0\u4e3a\u79bb\u7ebf\u7b97\u6cd5\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u8f93\u5165\u8f93\u51fa\u505a\u7279\u6b8a\u5904\u7406\uff0c\u5219\u53ef\u4ee5\u7528\u79bb\u7ebf\u7b97\u6cd5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 \u5728\u7ebf\u7b97\u6cd5 \u4e0d\u9700\u8981\u8f93\u5165\u6570\u636e\u5df2\u77e5\u5c31\u53ef\u4ee5\u6267\u884c\u7684\u7b97\u6cd5\u79f0\u4e3a\u5728\u7ebf\u7b97\u6cd5\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u5bf9\u8f93\u5165\u8f93\u51fa\u505a\u7279\u6b8a\u5904\u7406\uff08\u5982\u672c\u6b21\u7684\u8be2\u95ee\u9700\u8981\u4e0e\u4e0a\u6b21\u6267\u884c\u7684\u7b54\u6848\u8fdb\u884c\u5f02\u6216\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u8be2\u95ee\uff09\uff0c\u5219\u53ea\u80fd\u7528\u79bb\u7ebf\u7b97\u6cd5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u9053\u80fd\u7528\u79bb\u7ebf\u548c\u5728\u7ebf\u7b97\u6cd5\u89e3\u51b3\u7684\u9898\u76ee\uff0c\u5982\u679c\u51fa\u9898\u4eba\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u52a0\u5bc6\u5904\u7406\uff0c\u5bfc\u81f4\u53ea\u80fd\u4f7f\u7528\u5728\u7ebf\u7b97\u6cd5\uff0c\u5219\u6211\u4eec\u79f0\u8fd9\u9053\u9898\u662f \u5f3a\u5236\u5728\u7ebf \u7684\u3002 \u79bb\u6563\u5316\u9700\u8981\u4e8b\u5148\u77e5\u9053\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\uff0c\u6240\u4ee5\u662f \u79bb\u7ebf\u7b97\u6cd5 \u3002\u5982\u679c\u8981\u5f3a\u5236\u5728\u7ebf\uff0c\u5c31\u9700\u8981\u53e6\u4e00\u79cd\u601d\u8def\u3002 \u540c\u6837\uff0c\u4ece\u8be2\u95ee\u6d89\u53ca\u7684\u70b9\u6709\u9650\u51fa\u53d1\uff0c\u6211\u4eec\u8003\u8651\u6700\u591a\u80fd\u6d89\u53ca\u7ebf\u6bb5\u6811\u4e0a\u70b9\u7684\u4e2a\u6570\u3002 \u7ebf\u6bb5\u6811\u7684\u9ad8\u5ea6\u4e3a \\(\\mathrm{O}(\\log m)\\) \uff0c\u5047\u8bbe\u6bcf\u4e2a\u6d89\u53ca\u67e5\u8be2\u7684\u70b9\u90fd\u5230\u8fbe\u4e86\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\uff0c \u4e14\u4e0d\u8003\u8651\u6839\u5230\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u91cd\u590d\u7684\u8282\u70b9\uff0c\u5219\u603b\u5171\u6d89\u53ca\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6570\u7684\u4e2a\u6570\u4e3a \\(\\mathrm{O}(k\\log m)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e3a\u7528\u5230\u7684\u8282\u70b9\u5f00\u8f9f\u7a7a\u95f4\u5373\u53ef\u3002 \u9488\u5bf9\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u662f\u9884\u5148\u5efa\u597d\u4e86\u6574\u68f5\u7ebf\u6bb5\u6811\uff08build \u51fd\u6570\uff09\uff0c \u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e0e\u5176\u672c\u8eab\u7f16\u53f7\u90fd\u662f\u5bf9\u5e94\u7684\uff08\u901a\u5e38\u4e00\u4e2a\u5b50\u8282\u70b9\u662f\u7236\u7ed3\u70b9\u7684\u4e8c\u500d\uff0c\u800c\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u5219\u76f8\u5dee 1\uff09\u3002 \u800c\u5bf9\u4e8e\u8fd9\u79cd\u53ea\u4e3a\u9700\u8981\u7528\u5230\u8282\u70b9\u5f00\u8f9f\u7a7a\u95f4\u7684\u7ebf\u6bb5\u6811\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u88ab\u521b\u5efa\uff0c \u6240\u4ee5\u7f16\u53f7\u95f4\u6ca1\u6709\u7279\u5b9a\u5173\u7cfb\uff0c\u9700\u8981\u8bb0\u5f55\u3002 \u8003\u8651\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u5f00\u8f9f\u65b0\u7ed3\u70b9\uff1a\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u9700\u8981\u5f00\u521b\u4e00\u4e2a\u6839\u8282\u70b9\uff1b \u5728\u8fdb\u884c\u4fee\u6539\u53ca\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5982\u679c\u533a\u95f4\u4e0d\u662f\u6240\u8981\u7684\u533a\u95f4\uff0c\u5219\u9700\u8981\u5f00\u521b\u65b0\u7684\u8282\u70b9\u3002 \u6709\u4e00\u4e2a\u6280\u5de7\u662f\uff0c\u5728\u4fee\u6539\u548c\u67e5\u8be2\u7684\u65f6\u5019\u5f80\u5f80\u8981\u4e0b\u4f20\u6807\u8bb0\uff08pushdown\uff09\uff0c\u53ef\u4ee5\u5728\u6b64\u4e4b\u524d\u68c0\u67e5\u662f\u5426\u9700\u8981\u5f00\u521b\u8282\u70b9\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <vector> using namespace std ; const int maxn = 200010 ; const int INF = 1e9 + 10 ; int n , m , k ; struct treenode { // \u5de6\u53f3\u5b50\u8282\u70b9\u7f16\u53f7 int lc , rc ; // \u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u82e5\u4e0d\u552f\u4e00\u5219\u4e3a INF\uff1blazy \u4e3a INF \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int val , lazy_val ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u9664 0 \u4ee5\u5916\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id1 , lazy_id1 ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id2 , lazy_id2 ; // \u4e0a\u6b21\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1\u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int lid , lazy_lid ; } tree [ maxn << 5 ]; int cnt ; // \u7ebf\u6bb5\u6811\u8282\u70b9\u4e2a\u6570 #define ls tree[o].lc #define rs tree[o].rc int insert_node () { // \u5411\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 ++ cnt ; tree [ cnt ]. lc = tree [ cnt ]. rc = 0 ; tree [ cnt ]. val = 0 ; tree [ cnt ]. id1 = tree [ cnt ]. id2 = 0 ; tree [ cnt ]. lid = 0 ; tree [ cnt ]. lazy_val = INF ; tree [ cnt ]. lazy_id1 = tree [ cnt ]. lazy_id2 = -1 ; tree [ cnt ]. lid = -1 ; return cnt ; } void pushup ( int o ) { // \u7ebf\u6bb5\u6811\u4e0a\u4f20\u64cd\u4f5c\uff0c\u5408\u5e76\u5de6\u53f3\u5b50\u6811\u7ed3\u679c // val \u7684\u5408\u5e76 tree [ o ]. val = ( tree [ ls ]. val == tree [ rs ]. val ) ? tree [ ls ]. val : INF ; // id1 \u7684\u5408\u5e76 if ( tree [ ls ]. id1 == -1 || tree [ rs ]. id1 == -1 ) { tree [ o ]. id1 = -1 ; } else if ( tree [ ls ]. id1 == tree [ rs ]. id1 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else if ( tree [ ls ]. id1 == 0 ) { tree [ o ]. id1 = tree [ rs ]. id1 ; } else if ( tree [ rs ]. id1 == 0 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else { tree [ o ]. id1 = -1 ; } // id2 \u7684\u5408\u5e76 if ( tree [ ls ]. id2 == -1 || tree [ rs ]. id2 == -1 ) { tree [ o ]. id2 = -1 ; } else if ( tree [ ls ]. id2 == tree [ rs ]. id2 ) { tree [ o ]. id2 = tree [ ls ]. id2 ; } else { tree [ o ]. id2 = -1 ; } // lid \u7684\u5408\u5e76 if ( tree [ ls ]. lid == -1 || tree [ rs ]. lid == -1 ) { tree [ o ]. lid = -1 ; } else if ( tree [ ls ]. lid == tree [ rs ]. lid ) { tree [ o ]. lid = tree [ ls ]. lid ; } else { tree [ o ]. lid = -1 ; } } void pushdown ( int o ) { // \u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0b\u4f20\u64cd\u4f5c // \u5982\u679c\u5bf9\u5e94\u70b9\u672a\u88ab\u521b\u5efa\uff0c\u5219\u8fdb\u884c\u521b\u5efa if ( ! ls ) ls = insert_node (); if ( ! rs ) rs = insert_node (); if ( tree [ o ]. lazy_val != INF ) { tree [ ls ]. val = tree [ rs ]. val = tree [ o ]. lazy_val ; tree [ ls ]. lazy_val = tree [ rs ]. lazy_val = tree [ o ]. lazy_val ; tree [ o ]. lazy_val = INF ; } if ( tree [ o ]. lazy_id1 != -1 ) { tree [ ls ]. id1 = tree [ rs ]. id1 = tree [ o ]. lazy_id1 ; tree [ ls ]. lazy_id1 = tree [ rs ]. lazy_id1 = tree [ o ]. lazy_id1 ; tree [ o ]. lazy_id1 = -1 ; } if ( tree [ o ]. lazy_id2 != -1 ) { tree [ ls ]. id2 = tree [ rs ]. id2 = tree [ o ]. lazy_id2 ; tree [ ls ]. lazy_id2 = tree [ rs ]. lazy_id2 = tree [ o ]. lazy_id2 ; tree [ o ]. lazy_id2 = -1 ; } if ( tree [ o ]. lazy_lid != -1 ) { tree [ ls ]. lid = tree [ rs ]. lid = tree [ o ]. lazy_lid ; tree [ ls ]. lazy_lid = tree [ rs ]. lazy_lid = tree [ o ]. lazy_lid ; tree [ o ]. lazy_lid = -1 ; } } #define ALLOK -2 int find_right ( int o , int l , int r , int ql , int qid ) { // \u64cd\u4f5c\u4e00\u4e2d\uff0c\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u5bfb\u627e\u53f3\u7aef\u70b9\u53ef\u80fd\u7684\u6700\u5927\u503c // \u8fd9\u91cc\u6ca1\u6709\u8003\u8651\u548c\u53f3\u7aef\u70b9\u7684\u6bd4\u8f83\uff0c\u76f4\u63a5\u5bfb\u627e\u4e86\u6700\u5927\u7684\u53ef\u80fd\u503c pushdown ( o ); if ( r < ql || tree [ o ]. id1 == qid || tree [ o ]. id1 == 0 ) { // \u5168\u90e8\u7b26\u5408\u6761\u4ef6 return ALLOK ; } else if ( tree [ o ]. id2 != -1 ) { // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de\u8be5\u533a\u57df\u5de6\u8fb9\u7b2c\u4e00\u4e2a return l - 1 ; } else { // \u9700\u8981\u5bfb\u627e\u786e\u5207\u4f4d\u7f6e // \u5148\u67e5\u627e\u5de6\u533a\u95f4\uff0c\u5982\u679c\u5de6\u533a\u95f4\u5168\u6ee1\u8db3\u5219\u518d\u5bfb\u627e\u53f3\u533a\u95f4 int mid = ( l + r ) >> 1 ; int leftPart = ( ql <= mid ) ? find_right ( ls , l , mid , ql , qid ) : ALLOK ; return ( leftPart == ALLOK ) ? find_right ( rs , mid + 1 , r , ql , qid ) : leftPart ; } } #undef ALLOK void modify_val ( int o , int l , int r , int ql , int qr , int val , int id , bool ignoreLid = false ) { // \u82e5 val = INF \u4ee3\u8868\u4e0d\u9700\u8981\u5bf9 val \u8fdb\u884c\u5904\u7406 // \u82e5 ignoreLid = true \u5219\u4e0d\u5bf9 lid \u8fdb\u884c\u66f4\u6539 if ( l >= ql && r <= qr ) { if ( val != INF ) tree [ o ]. val = tree [ o ]. lazy_val = val ; tree [ o ]. id1 = tree [ o ]. lazy_id1 = id ; tree [ o ]. id2 = tree [ o ]. lazy_id2 = id ; if ( ! ignoreLid ) tree [ o ]. lid = tree [ o ]. lazy_lid = id ; return ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) { modify_val ( ls , l , mid , ql , qr , val , id , ignoreLid ); } if ( qr > mid ) { modify_val ( rs , mid + 1 , r , ql , qr , val , id , ignoreLid ); } pushup ( o ); } bool is_same_id ( int o , int l , int r , int ql , int qr , int id , bool isRecover = false ) { // \u5224\u65ad\u8be5\u533a\u57df id \u548c lid \u662f\u5426\u6ee1\u8db3\u6761\u4ef6 if ( l >= ql && r <= qr ) { if ( isRecover ) { // \u68c0\u67e5 id = 0 \u4e14 lid = id return ( tree [ o ]. id2 == 0 && tree [ o ]. lid == id ); } else { // \u68c0\u67e5 id = id return ( tree [ o ]. id2 == id ); } } pushdown ( o ); int mid = ( l + r ) >> 1 ; bool isSame = true ; if ( ql <= mid ) { isSame = isSame && is_same_id ( ls , l , mid , ql , qr , id , isRecover ); } if ( qr > mid && isSame ) { isSame = isSame && is_same_id ( rs , mid + 1 , r , ql , qr , id , isRecover ); } return isSame ; } int query_val ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aval if ( p >= l && p <= r && tree [ o ]. val != INF ) { return tree [ o ]. val ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_val ( ls , l , mid , p ); else return query_val ( rs , mid + 1 , r , p ); } int query_id ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aid2 if ( p >= l && p <= r && tree [ o ]. id2 != -1 ) { return tree [ o ]. id2 ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_id ( ls , l , mid , p ); else return query_id ( rs , mid + 1 , r , p ); } #undef ls #undef rs int main () { scanf ( \"%d%d%d\" , & n , & m , & k ); // \u521b\u5efa\u6839\u8282\u70b9 insert_node (); // \u8fdb\u884c\u64cd\u4f5c int r_opt , r_id , r_l , r_r , r_x , r_p ; while ( k -- ) { scanf ( \"%d\" , & r_opt ); if ( r_opt == 0 ) { // \u5199\u5165 scanf ( \"%d%d%d%d\" , & r_id , & r_l , & r_r , & r_x ); int r = find_right ( 1 , 1 , m , r_l , r_id ); if ( r == -2 ) r = r_r ; else r = min ( r , r_r ); if ( r_l <= r ) { printf ( \"%d \\n \" , r ); modify_val ( 1 , 1 , m , r_l , r , r_x , r_id ); } else { printf ( \"-1 \\n \" ); } } else if ( r_opt == 1 ) { // \u5220\u9664 scanf ( \"%d%d%d\" , & r_id , & r_l , & r_r ); if ( is_same_id ( 1 , 1 , m , r_l , r_r , r_id )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , r_l , r_r , INF , 0 , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( r_opt == 2 ) { // \u6062\u590d scanf ( \"%d%d%d\" , & r_id , & r_l , & r_r ); if ( is_same_id ( 1 , 1 , m , r_l , r_r , r_id , true )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , r_l , r_r , INF , r_id , true ); } else { printf ( \"FAIL \\n \" ); } } else { // \u67e5\u8be2 scanf ( \"%d\" , & r_p ); int id = query_id ( 1 , 1 , m , r_p ); int val = query_val ( 1 , 1 , m , r_p ); if ( id == 0 ) { printf ( \"0 0 \\n \" ); } else { printf ( \"%d %d \\n \" , id , val ); } } } return 0 ; }","title":"\u6587\u7ae0 1"},{"location":"problem/24/4/1/#202112-4","text":"","title":"202112-4 \u78c1\u76d8\u6587\u4ef6\u64cd\u4f5c"},{"location":"problem/24/4/1/#25","text":"\u6211\u4eec\u6309\u7167\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u5bf9\u5e94\u64cd\u4f5c\u5373\u53ef\uff0c\u6ce8\u610f\u6bcf\u4e00\u4e2a\u8981\u6c42\u6267\u884c\u7684\u6761\u4ef6\uff1a \u5199\u5165\u64cd\u4f5c\uff1a\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u6267\u884c\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u4e0d\u88ab\u81ea\u5df1\u5360\u7528\u7684\u4f4d\u7f6e\u3002 \u9664\u4e86\u7b2c\u4e00\u4e2a\u70b9\u5c31\u88ab\u5176\u4ed6\u7a0b\u5e8f\u5360\u7528\u4ee5\u5916\uff0c\u5fc5\u7136\u4f1a\u5199\u5165\u3002 \u9047\u5230\u81ea\u5df1\u5360\u7528\uff0c\u5219 \u8986\u76d6 \u3002 \u5220\u9664\u64cd\u4f5c\uff1a\u540c\u65f6\u6574\u4f53\u8fdb\u884c\uff0c\u8981\u6c42\u6240\u6709\u4f4d\u7f6e\u90fd\u88ab\u76ee\u524d\u7a0b\u5e8f\u5360\u7528\u3002 \u8981\u4e48\u5168\u5220\uff0c\u8981\u4e48\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\u3002 \u6062\u590d\u64cd\u4f5c\uff1a\u540c\u65f6\u6574\u4f53\u8fdb\u884c\uff0c\u8981\u6c42\u6240\u6709\u4f4d\u7f6e\u90fd\u4e0d\u88ab\u5360\u7528\uff0c\u4e14\u4e0a\u6b21\u5360\u7528\u7a0b\u5e8f\u4e3a\u76ee\u524d\u7a0b\u5e8f\u3002 \u8981\u4e48\u5168\u6062\u590d\uff0c\u8981\u4e48\u4e0d\u505a\u4efb\u4f55\u66f4\u6539\u3002 \u9047\u5230\u81ea\u5df1\u5360\u7528\uff0c\u5219 \u4e0d\u505a\u4efb\u4f55\u66f4\u6539 \u3002 \u8bfb\u5165\u64cd\u4f5c\uff1a\u8bfb\u53d6\u5360\u7528\u7a0b\u5e8f\u548c\u6570\u503c\uff0c\u82e5\u672a\u88ab\u5360\u7528\uff0c\u5219\u8f93\u51fa 0 0\u3002","title":"25% \u6570\u636e\u2014\u2014\u76f4\u63a5\u6a21\u62df"},{"location":"problem/24/4/1/#100","text":"\u901a\u8fc7\u8fd9\u9053\u9898\u7684\u64cd\u4f5c\u8981\u6c42\u7b49\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u63a8\u6d4b\u51fa\u8fd9\u9053\u9898\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u63d0\u793a \u5982\u679c\u6ca1\u4ec0\u4e48\u601d\u8def\uff0c\u53ef\u4ee5\u62ff\u5404\u79cd\u6570\u636e\u7ed3\u6784\u5f80\u4e0a\u5957\u3002 \u4f8b\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6d89\u53ca\u533a\u95f4\u4fee\u6539\u3001\u5355\u70b9\u67e5\u8be2\uff0c\u5bf9\u4e8e\u6811\u72b6\u6570\u7ec4\u6765\u8bf4\u8d1f\u62c5\u592a\u91cd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u3002 \u5982\u679c\u4f7f\u7528\u5e73\u8861\u6811\uff0c\u5219\u4e00\u822c\u662f\u8981\u6c42\u51fa\u7b2c k \u5927\u6570\uff0c\u6216\u8005\u662f\u5e8f\u5217\u7ffb\u8f6c\u7c7b\u95ee\u9898\uff0c\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\u4e0d\u592a\u5951\u5408\u3002 \u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e\u3002\u7efc\u5408\u8003\u8651\u4e0b\uff0c\u7ebf\u6bb5\u6811\u662f\u6bd4\u8f83\u7b26\u5408\u8981\u6c42\u7684\u3002","title":"100% \u6570\u636e\u2014\u2014\u79bb\u6563\u5316+\u7ebf\u6bb5\u6811"},{"location":"problem/24/4/1/#_1","text":"\u5148\u4e0d\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u5185\u5b58\u7a7a\u95f4\u95ee\u9898\uff0c\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u8fd9\u9053\u9898\u76ee\u3002 \u8003\u8651\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u91cf\uff0c\u76ee\u524d\u5df2\u77e5\u7684\u6709\u78c1\u76d8\u4f4d\u7f6e\u7684\u503c\u3001\u76ee\u524d\u5360\u7528\u7a0b\u5e8f id\u3001\u4e0a\u6b21\u5360\u7528\u7a0b\u5e8f id\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5047\u8bbe\u4e00\u4e2a\u4f4d\u7f6e\u672a\u88ab\u5360\u7528\u548c\u88ab id \u4e3a 0 \u7684\u7a0b\u5e8f\u5360\u7528\u662f\u7b49\u4ef7\u7684\u3002 \u5199\u5165\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u627e\u5230\u5199\u5165\u53f3\u8fb9\u754c \u548c \u76f4\u63a5\u5199\u5165 \u4e24\u4e2a\u64cd\u4f5c\u3002 \u76f4\u63a5\u5199\u5165\u64cd\u4f5c\u5c31\u662f\u76f4\u63a5\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c \u800c\u5212\u5206\u64cd\u4f5c\u9700\u8981\u77e5\u9053\u8be5\u533a\u95f4 \u88ab\u5360\u7528 \u7684\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u5c06\u8981\u5199\u5165\u7684 id\u3002 \u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u91cf\u8bbe\u4e3a id1\u3002 \u5220\u9664\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u5224\u65ad\u662f\u5426\u53ef\u5220 \u548c \u76f4\u63a5\u5220\u9664 \u4e24\u4e2a\u64cd\u4f5c\u3002 \u76f4\u63a5\u5220\u9664\u64cd\u4f5c\u5c31\u662f\u76f4\u63a5\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u4fee\u6539\uff0c \u800c\u5224\u65ad\u662f\u5426\u53ef\u5220\u9700\u8981\u77e5\u9053\u8be5\u533a\u95f4 \u6240\u6709 \u7684\u4f4d\u7f6e\u662f\u5426\u5c5e\u4e8e\u5c06\u8981\u5199\u5165\u7684 id\u3002 \u6211\u4eec\u4e0d\u59a8\u5c06\u8fd9\u4e2a\u91cf\u8bbe\u4e3a id2\uff0c\u6ce8\u610f id1 \u4e0e id2 \u7684\u533a\u522b\u2014\u2014\u662f\u5426\u5141\u8bb8\u5305\u542b\u672a\u88ab\u5360\u7528\u7684\u7a0b\u5e8f\u3002 \u6062\u590d\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u5224\u65ad\u662f\u5426\u53ef\u6062\u590d \u548c \u76f4\u63a5\u6062\u590d \u4e24\u4e2a\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u4e0e\u5220\u9664\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\u5224\u65ad\u65f6\u9700\u8981\u5224\u65ad\u76ee\u524d\u5360\u7528\u7684 id \u548c\u4e0a\u6b21\u88ab\u5360\u7528\u7684 id\u3002 \u8bfb\u53d6\u64cd\u4f5c\uff1a\u53ef\u4ee5\u5212\u5206\u4e3a \u67e5\u8be2\u5360\u7528\u7a0b\u5e8f id \u548c \u67e5\u8be2\u503c \u4e24\u4e2a\u64cd\u4f5c\u3002 \u8be5\u64cd\u4f5c\u662f\u76f8\u5bf9\u6bd4\u8f83\u8d28\u6734\u7684\u5355\u70b9\u67e5\u8be2\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5904\u7406\u4e3a\u533a\u95f4\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9700\u8981\u7ef4\u62a4\u7684\u91cf\uff1a\u503c\u3001\u6709\u5173\u76ee\u524d\u5360\u7528\u7a0b\u5e8f id \u7684\u4e24\u4e2a\u91cf\u3001\u4e0a\u6b21\u88ab\u5360\u7528\u7684\u7a0b\u5e8f id\u3002\u6211\u4eec\u8003\u8651\u6bcf\u4e2a\u91cf\u9488\u5bf9\u7236\u5b50\u4e4b\u95f4\u7684\u7ef4\u62a4\u3002 \u503c val\uff1a\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u53d6\u503c\u7684\u591a\u5c11\uff0c\u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u540c\u5219\u8bbe\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u662f\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u67e5\u8be2\u5230\u4e0d\u5b58\u5728\u7684\u503c\u7684\u95ee\u9898\u3002 \u88ab\u5360\u7528\u4f4d\u7f6e\u7a0b\u5e8f id1\uff1a \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u672a\u88ab\u5360\u7528\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u672a\u5360\u7528\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u4e00\u4e2a\u8282\u70b9\u672a\u5360\u7528\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u53e6\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9\u7684\u6807\u8bb0\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u975e\u7a7a\u4e14\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u90fd\u975e\u7a7a\u4e14\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b \u88ab\u5360\u7528\u4f4d\u7f6e\u7a0b\u5e8f id2\uff1a\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u8ba8\u8bba\uff0c\u5c06\u672a\u88ab\u7a0b\u5e8f\u5360\u7528\u8282\u70b9\u89c6\u4e3a\u88ab id \u4e3a 0 \u7684\u7a0b\u5e8f\u5360\u7528\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b \u4e0a\u4e00\u6b21\u88ab\u5360\u7528\u7a0b\u5e8f lid\uff1a\u4e0e id2 \u76f8\u540c\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e2d\u5b58\u5728\u4e0d\u552f\u4e00\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\u3002 \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u76f8\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff1b \u82e5\u5de6\u53f3\u5b50\u8282\u70b9\u4e0d\u7b49\uff0c\u5219\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e0d\u552f\u4e00\uff1b","title":"\u8003\u8651\u7ebf\u6bb5\u6811\u7684\u505a\u6cd5"},{"location":"problem/24/4/1/#_2","text":"\u7406\u89e3\u7ebf\u6bb5\u6811\u7684\u89e3\u6cd5\u4e4b\u540e\uff0c\u5c31\u4f1a\u51fa\u73b0\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u7a7a\u95f4\u8fbe\u5230\u4e86 1e9 \u7ea7\u522b\uff0c\u80af\u5b9a\u4f1a MLE\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u8003\u8651\uff1a\u4e00\u5171\u6709 \\(2\\times 10^5\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u6700\u591a\u64cd\u4f5c\u6d89\u53ca\u4e00\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u7528\u4e24\u4e2a\u7aef\u70b9\u8868\u793a\u3002 \u8003\u8651\u5230\u4e34\u754c\u5904\u7684\u5f71\u54cd\uff0c\u4e00\u6b21\u64cd\u4f5c\u6700\u591a\u4f1a\u6d89\u53ca 4 \u4e2a\u70b9 \uff08\u6bd4\u5982\u539f\u6765\u7684\u533a\u95f4\u662f \\([1, 10]\\) \uff0c\u6211\u4eec\u66f4\u6539\u4e86\u533a\u95f4 \\([3,5]\\) \uff0c\u90a3\u4e48\u5f97\u5230\u7684\u533a\u95f4\u4e3a \\([1,2],[3,5],[6,10]\\) \uff0c\u591a\u51fa\u4e86 \\(2,3,5,6\\) \u56db\u4e2a\u70b9\uff09\u3002 \u90a3\u4e48\u603b\u4f53\u6765\u770b\uff0c\u6d89\u53ca\u5230\u7684\u70b9\u6700\u591a\u6709 \\(2\\times 10^5\\times 4 = 8\\times 10^5\\) \u4e2a\u3002 \u6211\u4eec\u53ef\u4ee5\u7ef4\u6301\u8fd9\u4e9b\u70b9\u7684\u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb\uff0c\u800c\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u503c\u57df\u8f83\u5c0f\u7684\u533a\u57df\uff0c\u5c31\u53ef\u4ee5\u51cf\u5c11\u7a7a\u95f4\u5360\u7528\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u79f0\u4e3a\u79bb\u6563\u5316\u3002 \u79bb\u6563\u5316 \u628a\u65e0\u9650\u7a7a\u95f4\u4e2d\u6709\u9650\u7684\u4e2a\u4f53\u6620\u5c04\u5230\u6709\u9650\u7684\u7a7a\u95f4\u4e2d\u53bb\uff0c\u4ee5\u6b64\u63d0\u9ad8\u7b97\u6cd5\u7684\u65f6\u7a7a\u6548\u7387\u3002\u901a\u4fd7\u7684\u8bf4\uff0c\u79bb\u6563\u5316\u662f\u5728\u4e0d\u6539\u53d8\u6570\u636e\u76f8\u5bf9\u5927\u5c0f\u7684\u6761\u4ef6\u4e0b\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u76f8\u5e94\u7684\u7f29\u5c0f\u3002 \u79bb\u6563\u5316\u672c\u8d28\u4e0a\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u79cd\u54c8\u5e0c\uff0c\u5176\u4fdd\u8bc1\u6570\u636e\u5728\u54c8\u5e0c\u4ee5\u540e\u4ecd\u7136\u4fdd\u6301\u539f\u6765\u7684\u5168/\u504f\u5e8f\u5173\u7cfb\u3002 \u79bb\u6563\u5316\u7684\u4e00\u822c\u6027\u6b65\u9aa4\uff1a \u7edf\u8ba1\u6240\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u5728\u77e5\u9053\u786e\u5207\u4e0a\u754c\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u6570\u7ec4\uff0c\u4e0d\u6e05\u695a\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528 vector\uff1b \u5bf9\u6240\u6709\u7684\u6570\u636e\u6392\u5e8f (sort)\u3001\u53bb\u91cd (unique)\uff1b \u5bf9\u4e8e\u6bcf\u4e2a\u6570\uff0c\u5176\u79bb\u6563\u5316\u540e\u7684\u5bf9\u5e94\u503c\u5373\u4e3a\u5176\u5728\u6392\u5e8f\u53bb\u91cd\u540e\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206 (lower_bound) \u786e\u5b9a\u3002 \u8fd9\u9053\u9898\u5141\u8bb8\u6211\u4eec\u63d0\u524d\u5c06\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\u8bb0\u5f55\u4e0b\u6765\uff08\u5f53\u7136\u4e0d\u662f\u6240\u6709\u7684\u9898\u76ee\u90fd\u5141\u8bb8\u8fd9\u6837\uff09\uff0c\u6240\u4ee5\u8fd9\u9053\u9898\u5c31\u89e3\u51b3\u4e86\u3002 \u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u4e2a\u6570\u4e0e\u8be2\u95ee\u4e2a\u6570\u6210\u6bd4\u4f8b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathrm{O}(k\\log k)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <vector> using namespace std ; const int maxn = 200010 ; const int INF = 1e9 + 10 ; int n , m , k ; #define ls o << 1 #define rs ls | 1 struct treenode { // \u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u82e5\u4e0d\u552f\u4e00\u5219\u4e3a INF\uff1blazy \u4e3a INF \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int val , lazy_val ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u9664 0 \u4ee5\u5916\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id1 , lazy_id1 ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id2 , lazy_id2 ; // \u4e0a\u6b21\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1\u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int lid , lazy_lid ; } tree [ maxn << 5 ]; void pushup ( int o ) { // \u7ebf\u6bb5\u6811\u4e0a\u4f20\u64cd\u4f5c\uff0c\u5408\u5e76\u5de6\u53f3\u5b50\u6811\u7ed3\u679c // val \u7684\u5408\u5e76 tree [ o ]. val = ( tree [ ls ]. val == tree [ rs ]. val ) ? tree [ ls ]. val : INF ; // id1 \u7684\u5408\u5e76 if ( tree [ ls ]. id1 == -1 || tree [ rs ]. id1 == -1 ) { tree [ o ]. id1 = -1 ; } else if ( tree [ ls ]. id1 == tree [ rs ]. id1 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else if ( tree [ ls ]. id1 == 0 ) { tree [ o ]. id1 = tree [ rs ]. id1 ; } else if ( tree [ rs ]. id1 == 0 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else { tree [ o ]. id1 = -1 ; } // id2 \u7684\u5408\u5e76 if ( tree [ ls ]. id2 == -1 || tree [ rs ]. id2 == -1 ) { tree [ o ]. id2 = -1 ; } else if ( tree [ ls ]. id2 == tree [ rs ]. id2 ) { tree [ o ]. id2 = tree [ ls ]. id2 ; } else { tree [ o ]. id2 = -1 ; } // lid \u7684\u5408\u5e76 if ( tree [ ls ]. lid == -1 || tree [ rs ]. lid == -1 ) { tree [ o ]. lid = -1 ; } else if ( tree [ ls ]. lid == tree [ rs ]. lid ) { tree [ o ]. lid = tree [ ls ]. lid ; } else { tree [ o ]. lid = -1 ; } } void pushdown ( int o ) { // \u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0b\u4f20\u64cd\u4f5c if ( tree [ o ]. lazy_val != INF ) { tree [ ls ]. val = tree [ rs ]. val = tree [ o ]. lazy_val ; tree [ ls ]. lazy_val = tree [ rs ]. lazy_val = tree [ o ]. lazy_val ; tree [ o ]. lazy_val = INF ; } if ( tree [ o ]. lazy_id1 != -1 ) { tree [ ls ]. id1 = tree [ rs ]. id1 = tree [ o ]. lazy_id1 ; tree [ ls ]. lazy_id1 = tree [ rs ]. lazy_id1 = tree [ o ]. lazy_id1 ; tree [ o ]. lazy_id1 = -1 ; } if ( tree [ o ]. lazy_id2 != -1 ) { tree [ ls ]. id2 = tree [ rs ]. id2 = tree [ o ]. lazy_id2 ; tree [ ls ]. lazy_id2 = tree [ rs ]. lazy_id2 = tree [ o ]. lazy_id2 ; tree [ o ]. lazy_id2 = -1 ; } if ( tree [ o ]. lazy_lid != -1 ) { tree [ ls ]. lid = tree [ rs ]. lid = tree [ o ]. lazy_lid ; tree [ ls ]. lazy_lid = tree [ rs ]. lazy_lid = tree [ o ]. lazy_lid ; tree [ o ]. lazy_lid = -1 ; } } void build ( int o , int l , int r ) { // \u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u5efa\u6811 if ( l == r ) { tree [ o ]. val = 0 ; tree [ o ]. lazy_val = INF ; tree [ o ]. id1 = tree [ o ]. id2 = tree [ o ]. lid = 0 ; tree [ o ]. lazy_id1 = tree [ o ]. lazy_id2 = tree [ o ]. lazy_lid = -1 ; return ; } int mid = ( l + r ) >> 1 ; build ( ls , l , mid ); build ( rs , mid + 1 , r ); tree [ o ]. lazy_val = INF ; pushup ( o ); } #define ALLOK -2 int find_right ( int o , int l , int r , int ql , int qid ) { // \u64cd\u4f5c\u4e00\u4e2d\uff0c\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u5bfb\u627e\u53f3\u7aef\u70b9\u53ef\u80fd\u7684\u6700\u5927\u503c // \u8fd9\u91cc\u6ca1\u6709\u8003\u8651\u548c\u53f3\u7aef\u70b9\u7684\u6bd4\u8f83\uff0c\u76f4\u63a5\u5bfb\u627e\u4e86\u6700\u5927\u7684\u53ef\u80fd\u503c pushdown ( o ); if ( r < ql || tree [ o ]. id1 == qid || tree [ o ]. id1 == 0 ) { // \u5168\u90e8\u7b26\u5408\u6761\u4ef6 return ALLOK ; } else if ( tree [ o ]. id2 != -1 ) { // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de\u8be5\u533a\u57df\u5de6\u8fb9\u7b2c\u4e00\u4e2a return l - 1 ; } else { // \u9700\u8981\u5bfb\u627e\u786e\u5207\u4f4d\u7f6e // \u5148\u67e5\u627e\u5de6\u533a\u95f4\uff0c\u5982\u679c\u5de6\u533a\u95f4\u5168\u6ee1\u8db3\u5219\u518d\u5bfb\u627e\u53f3\u533a\u95f4 int mid = ( l + r ) >> 1 ; int leftPart = ( ql <= mid ) ? find_right ( ls , l , mid , ql , qid ) : ALLOK ; return ( leftPart == ALLOK ) ? find_right ( rs , mid + 1 , r , ql , qid ) : leftPart ; } } #undef ALLOK void modify_val ( int o , int l , int r , int ql , int qr , int val , int id , bool ignoreLid = false ) { // \u82e5 val = INF \u4ee3\u8868\u4e0d\u9700\u8981\u5bf9 val \u8fdb\u884c\u5904\u7406 // \u82e5 ignoreLid = true \u5219\u4e0d\u5bf9 lid \u8fdb\u884c\u66f4\u6539 if ( l >= ql && r <= qr ) { if ( val != INF ) tree [ o ]. val = tree [ o ]. lazy_val = val ; tree [ o ]. id1 = tree [ o ]. lazy_id1 = id ; tree [ o ]. id2 = tree [ o ]. lazy_id2 = id ; if ( ! ignoreLid ) tree [ o ]. lid = tree [ o ]. lazy_lid = id ; return ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) { modify_val ( ls , l , mid , ql , qr , val , id , ignoreLid ); } if ( qr > mid ) { modify_val ( rs , mid + 1 , r , ql , qr , val , id , ignoreLid ); } pushup ( o ); } bool is_same_id ( int o , int l , int r , int ql , int qr , int id , bool isRecover = false ) { // \u5224\u65ad\u8be5\u533a\u57df id \u548c lid \u662f\u5426\u6ee1\u8db3\u6761\u4ef6 if ( l >= ql && r <= qr ) { if ( isRecover ) { // \u68c0\u67e5 id = 0 \u4e14 lid = id return ( tree [ o ]. id2 == 0 && tree [ o ]. lid == id ); } else { // \u68c0\u67e5 id = id return ( tree [ o ]. id2 == id ); } } pushdown ( o ); int mid = ( l + r ) >> 1 ; bool isSame = true ; if ( ql <= mid ) { isSame = isSame && is_same_id ( ls , l , mid , ql , qr , id , isRecover ); } if ( qr > mid && isSame ) { isSame = isSame && is_same_id ( rs , mid + 1 , r , ql , qr , id , isRecover ); } return isSame ; } int query_val ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aval if ( p >= l && p <= r && tree [ o ]. val != INF ) { return tree [ o ]. val ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_val ( ls , l , mid , p ); else return query_val ( rs , mid + 1 , r , p ); } int query_id ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aid2 if ( p >= l && p <= r && tree [ o ]. id2 != -1 ) { return tree [ o ]. id2 ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_id ( ls , l , mid , p ); else return query_id ( rs , mid + 1 , r , p ); } #undef ls #undef rs struct instruction { int opt , id , l , r , x ; } inst [ maxn ]; // numList \u5b58\u50a8\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\uff0ctotnum \u8868\u793a\u4e2a\u6570 int numList [ maxn << 2 ], totnum ; void discretization () { // \u79bb\u6563\u5316\u64cd\u4f5c sort ( numList + 1 , numList + 1 + totnum ); totnum = unique ( numList + 1 , numList + 1 + totnum ) - numList - 1 ; m = totnum ; for ( int i = 1 ; i <= k ; ++ i ) { if ( inst [ i ]. opt == 0 || inst [ i ]. opt == 1 || inst [ i ]. opt == 2 ) { inst [ i ]. l = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. l ) - numList ; inst [ i ]. r = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. r ) - numList ; } else { inst [ i ]. x = lower_bound ( numList + 1 , numList + 1 + totnum , inst [ i ]. x ) - numList ; } } } int main () { scanf ( \"%d%d%d\" , & n , & m , & k ); numList [ ++ totnum ] = 1 ; numList [ ++ totnum ] = m ; for ( int i = 1 ; i <= k ; ++ i ) { scanf ( \"%d\" , & inst [ i ]. opt ); if ( inst [ i ]. opt == 0 ) { scanf ( \"%d%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r , & inst [ i ]. x ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; // \u6ce8\u610f\u8fb9\u754c\u95ee\u9898\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8fd9\u91cc\u628a\u4ea4\u754c\u5904\u4e24\u70b9\u5206\u5f00\u4e86\uff0c\u4e0b\u540c if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else if ( inst [ i ]. opt == 1 ) { scanf ( \"%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else if ( inst [ i ]. opt == 2 ) { scanf ( \"%d%d%d\" , & inst [ i ]. id , & inst [ i ]. l , & inst [ i ]. r ); numList [ ++ totnum ] = inst [ i ]. l ; numList [ ++ totnum ] = inst [ i ]. r ; if ( inst [ i ]. l != 1 ) numList [ ++ totnum ] = inst [ i ]. l - 1 ; if ( inst [ i ]. r != m ) numList [ ++ totnum ] = inst [ i ]. r + 1 ; } else { scanf ( \"%d\" , & inst [ i ]. x ); // \u5bf9\u4e8e\u67e5\u8be2\u7684\u6570\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6570\u5373\u53ef } } // \u79bb\u6563\u5316\u5904\u7406 discretization (); // \u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u5efa\u6811 build ( 1 , 1 , m ); // \u8fdb\u884c\u64cd\u4f5c for ( int i = 1 ; i <= k ; ++ i ) { if ( inst [ i ]. opt == 0 ) { // \u5199\u5165\u64cd\u4f5c\uff1a\u5148\u6c42\u5f97\u8303\u56f4\uff0c\u518d\u8fdb\u884c\u586b\u5145 int r = find_right ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. id ); if ( r == -2 ) // r = -2 \u4ee3\u8868\u5168\u90e8\u6ee1\u8db3 r = inst [ i ]. r ; else r = min ( r , inst [ i ]. r ); if ( inst [ i ]. l <= r ) { printf ( \"%d \\n \" , numList [ r ]); // \u6ce8\u610f\u8fd4\u56de\u79bb\u6563\u5316\u524d\u7684\u503c modify_val ( 1 , 1 , m , inst [ i ]. l , r , inst [ i ]. x , inst [ i ]. id ); } else { printf ( \"-1 \\n \" ); } } else if ( inst [ i ]. opt == 1 ) { // \u5220\u9664\u64cd\u4f5c\uff1a\u5148\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u4e4b\u540e\u6267\u884c if ( is_same_id ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , inst [ i ]. id )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , INF , 0 , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( inst [ i ]. opt == 2 ) { // \u6062\u590d\u64cd\u4f5c\uff1a\u5148\u5224\u65ad\u662f\u5426\u53ef\u884c\uff0c\u4e4b\u540e\u6267\u884c if ( is_same_id ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , inst [ i ]. id , true )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , inst [ i ]. l , inst [ i ]. r , INF , inst [ i ]. id , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( inst [ i ]. opt == 3 ) { // \u8bfb\u53d6\u64cd\u4f5c\uff1a\u5206\u522b\u8bfb\u53d6 id \u548c val int id = query_id ( 1 , 1 , m , inst [ i ]. x ); int val = query_val ( 1 , 1 , m , inst [ i ]. x ); if ( id == 0 ) { printf ( \"0 0 \\n \" ); } else { printf ( \"%d %d \\n \" , id , val ); } } } return 0 ; }","title":"\u89e3\u51b3\u7a7a\u95f4\u95ee\u9898"},{"location":"problem/24/4/1/#100_1","text":"\u5728\u4e0a\u4e00\u9898\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u5148\u8bfb\u5165\u6240\u6709\u7684\u6570\u636e\u5e76\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\uff0c\u4e4b\u540e\u518d\u6267\u884c\u4e3b\u8981\u7684\u7b97\u6cd5\u8fc7\u7a0b\u3002 \u4f46\u4e0d\u662f\u6240\u6709\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u5728\u6267\u884c\u4e3b\u8981\u7684\u7b97\u6cd5\u8fc7\u7a0b\u524d\u5f97\u5230\u6240\u6709\u7684\u8f93\u5165\u6570\u636e\u3002 \u79bb\u7ebf\u7b97\u6cd5 \u8981\u6c42\u5728\u6267\u884c\u7b97\u6cd5\u524d\u8f93\u5165\u6570\u636e\u5df2\u77e5\u7684\u7b97\u6cd5\u79f0\u4e3a\u79bb\u7ebf\u7b97\u6cd5\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u6ca1\u6709\u5bf9\u8f93\u5165\u8f93\u51fa\u505a\u7279\u6b8a\u5904\u7406\uff0c\u5219\u53ef\u4ee5\u7528\u79bb\u7ebf\u7b97\u6cd5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 \u5728\u7ebf\u7b97\u6cd5 \u4e0d\u9700\u8981\u8f93\u5165\u6570\u636e\u5df2\u77e5\u5c31\u53ef\u4ee5\u6267\u884c\u7684\u7b97\u6cd5\u79f0\u4e3a\u5728\u7ebf\u7b97\u6cd5\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5982\u679c\u5bf9\u8f93\u5165\u8f93\u51fa\u505a\u7279\u6b8a\u5904\u7406\uff08\u5982\u672c\u6b21\u7684\u8be2\u95ee\u9700\u8981\u4e0e\u4e0a\u6b21\u6267\u884c\u7684\u7b54\u6848\u8fdb\u884c\u5f02\u6216\u624d\u80fd\u5f97\u5230\u771f\u6b63\u7684\u8be2\u95ee\uff09\uff0c\u5219\u53ea\u80fd\u7528\u79bb\u7ebf\u7b97\u6cd5\u89e3\u51b3\u8be5\u95ee\u9898\u3002 \u5bf9\u4e8e\u4e00\u9053\u80fd\u7528\u79bb\u7ebf\u548c\u5728\u7ebf\u7b97\u6cd5\u89e3\u51b3\u7684\u9898\u76ee\uff0c\u5982\u679c\u51fa\u9898\u4eba\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u52a0\u5bc6\u5904\u7406\uff0c\u5bfc\u81f4\u53ea\u80fd\u4f7f\u7528\u5728\u7ebf\u7b97\u6cd5\uff0c\u5219\u6211\u4eec\u79f0\u8fd9\u9053\u9898\u662f \u5f3a\u5236\u5728\u7ebf \u7684\u3002 \u79bb\u6563\u5316\u9700\u8981\u4e8b\u5148\u77e5\u9053\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u6570\uff0c\u6240\u4ee5\u662f \u79bb\u7ebf\u7b97\u6cd5 \u3002\u5982\u679c\u8981\u5f3a\u5236\u5728\u7ebf\uff0c\u5c31\u9700\u8981\u53e6\u4e00\u79cd\u601d\u8def\u3002 \u540c\u6837\uff0c\u4ece\u8be2\u95ee\u6d89\u53ca\u7684\u70b9\u6709\u9650\u51fa\u53d1\uff0c\u6211\u4eec\u8003\u8651\u6700\u591a\u80fd\u6d89\u53ca\u7ebf\u6bb5\u6811\u4e0a\u70b9\u7684\u4e2a\u6570\u3002 \u7ebf\u6bb5\u6811\u7684\u9ad8\u5ea6\u4e3a \\(\\mathrm{O}(\\log m)\\) \uff0c\u5047\u8bbe\u6bcf\u4e2a\u6d89\u53ca\u67e5\u8be2\u7684\u70b9\u90fd\u5230\u8fbe\u4e86\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\u7ed3\u70b9\uff0c \u4e14\u4e0d\u8003\u8651\u6839\u5230\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u91cd\u590d\u7684\u8282\u70b9\uff0c\u5219\u603b\u5171\u6d89\u53ca\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u6570\u7684\u4e2a\u6570\u4e3a \\(\\mathrm{O}(k\\log m)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u4e3a\u7528\u5230\u7684\u8282\u70b9\u5f00\u8f9f\u7a7a\u95f4\u5373\u53ef\u3002 \u9488\u5bf9\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u662f\u9884\u5148\u5efa\u597d\u4e86\u6574\u68f5\u7ebf\u6bb5\u6811\uff08build \u51fd\u6570\uff09\uff0c \u6bcf\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u8282\u70b9\u7f16\u53f7\u4e0e\u5176\u672c\u8eab\u7f16\u53f7\u90fd\u662f\u5bf9\u5e94\u7684\uff08\u901a\u5e38\u4e00\u4e2a\u5b50\u8282\u70b9\u662f\u7236\u7ed3\u70b9\u7684\u4e8c\u500d\uff0c\u800c\u53e6\u4e00\u4e2a\u5b50\u8282\u70b9\u5219\u76f8\u5dee 1\uff09\u3002 \u800c\u5bf9\u4e8e\u8fd9\u79cd\u53ea\u4e3a\u9700\u8981\u7528\u5230\u8282\u70b9\u5f00\u8f9f\u7a7a\u95f4\u7684\u7ebf\u6bb5\u6811\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u53ea\u6709\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u4f1a\u88ab\u521b\u5efa\uff0c \u6240\u4ee5\u7f16\u53f7\u95f4\u6ca1\u6709\u7279\u5b9a\u5173\u7cfb\uff0c\u9700\u8981\u8bb0\u5f55\u3002 \u8003\u8651\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u5f00\u8f9f\u65b0\u7ed3\u70b9\uff1a\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u9700\u8981\u5f00\u521b\u4e00\u4e2a\u6839\u8282\u70b9\uff1b \u5728\u8fdb\u884c\u4fee\u6539\u53ca\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5982\u679c\u533a\u95f4\u4e0d\u662f\u6240\u8981\u7684\u533a\u95f4\uff0c\u5219\u9700\u8981\u5f00\u521b\u65b0\u7684\u8282\u70b9\u3002 \u6709\u4e00\u4e2a\u6280\u5de7\u662f\uff0c\u5728\u4fee\u6539\u548c\u67e5\u8be2\u7684\u65f6\u5019\u5f80\u5f80\u8981\u4e0b\u4f20\u6807\u8bb0\uff08pushdown\uff09\uff0c\u53ef\u4ee5\u5728\u6b64\u4e4b\u524d\u68c0\u67e5\u662f\u5426\u9700\u8981\u5f00\u521b\u8282\u70b9\u3002 \u4ee3\u7801\u5b9e\u73b0 C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 #include <algorithm> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <queue> #include <vector> using namespace std ; const int maxn = 200010 ; const int INF = 1e9 + 10 ; int n , m , k ; struct treenode { // \u5de6\u53f3\u5b50\u8282\u70b9\u7f16\u53f7 int lc , rc ; // \u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u82e5\u4e0d\u552f\u4e00\u5219\u4e3a INF\uff1blazy \u4e3a INF \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int val , lazy_val ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u9664 0 \u4ee5\u5916\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id1 , lazy_id1 ; // \u5f53\u524d\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1 \u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int id2 , lazy_id2 ; // \u4e0a\u6b21\u5360\u7528 id\uff0c\u82e5\u5b58\u5728\u4e24\u79cd id \u5219\u4e3a -1\uff1blazy \u4e3a -1\u8868\u793a\u65e0\u5ef6\u8fdf\u66f4\u65b0 int lid , lazy_lid ; } tree [ maxn << 5 ]; int cnt ; // \u7ebf\u6bb5\u6811\u8282\u70b9\u4e2a\u6570 #define ls tree[o].lc #define rs tree[o].rc int insert_node () { // \u5411\u7ebf\u6bb5\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 ++ cnt ; tree [ cnt ]. lc = tree [ cnt ]. rc = 0 ; tree [ cnt ]. val = 0 ; tree [ cnt ]. id1 = tree [ cnt ]. id2 = 0 ; tree [ cnt ]. lid = 0 ; tree [ cnt ]. lazy_val = INF ; tree [ cnt ]. lazy_id1 = tree [ cnt ]. lazy_id2 = -1 ; tree [ cnt ]. lid = -1 ; return cnt ; } void pushup ( int o ) { // \u7ebf\u6bb5\u6811\u4e0a\u4f20\u64cd\u4f5c\uff0c\u5408\u5e76\u5de6\u53f3\u5b50\u6811\u7ed3\u679c // val \u7684\u5408\u5e76 tree [ o ]. val = ( tree [ ls ]. val == tree [ rs ]. val ) ? tree [ ls ]. val : INF ; // id1 \u7684\u5408\u5e76 if ( tree [ ls ]. id1 == -1 || tree [ rs ]. id1 == -1 ) { tree [ o ]. id1 = -1 ; } else if ( tree [ ls ]. id1 == tree [ rs ]. id1 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else if ( tree [ ls ]. id1 == 0 ) { tree [ o ]. id1 = tree [ rs ]. id1 ; } else if ( tree [ rs ]. id1 == 0 ) { tree [ o ]. id1 = tree [ ls ]. id1 ; } else { tree [ o ]. id1 = -1 ; } // id2 \u7684\u5408\u5e76 if ( tree [ ls ]. id2 == -1 || tree [ rs ]. id2 == -1 ) { tree [ o ]. id2 = -1 ; } else if ( tree [ ls ]. id2 == tree [ rs ]. id2 ) { tree [ o ]. id2 = tree [ ls ]. id2 ; } else { tree [ o ]. id2 = -1 ; } // lid \u7684\u5408\u5e76 if ( tree [ ls ]. lid == -1 || tree [ rs ]. lid == -1 ) { tree [ o ]. lid = -1 ; } else if ( tree [ ls ]. lid == tree [ rs ]. lid ) { tree [ o ]. lid = tree [ ls ]. lid ; } else { tree [ o ]. lid = -1 ; } } void pushdown ( int o ) { // \u7ebf\u6bb5\u6811\u6807\u8bb0\u4e0b\u4f20\u64cd\u4f5c // \u5982\u679c\u5bf9\u5e94\u70b9\u672a\u88ab\u521b\u5efa\uff0c\u5219\u8fdb\u884c\u521b\u5efa if ( ! ls ) ls = insert_node (); if ( ! rs ) rs = insert_node (); if ( tree [ o ]. lazy_val != INF ) { tree [ ls ]. val = tree [ rs ]. val = tree [ o ]. lazy_val ; tree [ ls ]. lazy_val = tree [ rs ]. lazy_val = tree [ o ]. lazy_val ; tree [ o ]. lazy_val = INF ; } if ( tree [ o ]. lazy_id1 != -1 ) { tree [ ls ]. id1 = tree [ rs ]. id1 = tree [ o ]. lazy_id1 ; tree [ ls ]. lazy_id1 = tree [ rs ]. lazy_id1 = tree [ o ]. lazy_id1 ; tree [ o ]. lazy_id1 = -1 ; } if ( tree [ o ]. lazy_id2 != -1 ) { tree [ ls ]. id2 = tree [ rs ]. id2 = tree [ o ]. lazy_id2 ; tree [ ls ]. lazy_id2 = tree [ rs ]. lazy_id2 = tree [ o ]. lazy_id2 ; tree [ o ]. lazy_id2 = -1 ; } if ( tree [ o ]. lazy_lid != -1 ) { tree [ ls ]. lid = tree [ rs ]. lid = tree [ o ]. lazy_lid ; tree [ ls ]. lazy_lid = tree [ rs ]. lazy_lid = tree [ o ]. lazy_lid ; tree [ o ]. lazy_lid = -1 ; } } #define ALLOK -2 int find_right ( int o , int l , int r , int ql , int qid ) { // \u64cd\u4f5c\u4e00\u4e2d\uff0c\u56fa\u5b9a\u5de6\u7aef\u70b9\uff0c\u5bfb\u627e\u53f3\u7aef\u70b9\u53ef\u80fd\u7684\u6700\u5927\u503c // \u8fd9\u91cc\u6ca1\u6709\u8003\u8651\u548c\u53f3\u7aef\u70b9\u7684\u6bd4\u8f83\uff0c\u76f4\u63a5\u5bfb\u627e\u4e86\u6700\u5927\u7684\u53ef\u80fd\u503c pushdown ( o ); if ( r < ql || tree [ o ]. id1 == qid || tree [ o ]. id1 == 0 ) { // \u5168\u90e8\u7b26\u5408\u6761\u4ef6 return ALLOK ; } else if ( tree [ o ]. id2 != -1 ) { // \u4e0d\u7b26\u5408\u6761\u4ef6\uff0c\u8fd4\u56de\u8be5\u533a\u57df\u5de6\u8fb9\u7b2c\u4e00\u4e2a return l - 1 ; } else { // \u9700\u8981\u5bfb\u627e\u786e\u5207\u4f4d\u7f6e // \u5148\u67e5\u627e\u5de6\u533a\u95f4\uff0c\u5982\u679c\u5de6\u533a\u95f4\u5168\u6ee1\u8db3\u5219\u518d\u5bfb\u627e\u53f3\u533a\u95f4 int mid = ( l + r ) >> 1 ; int leftPart = ( ql <= mid ) ? find_right ( ls , l , mid , ql , qid ) : ALLOK ; return ( leftPart == ALLOK ) ? find_right ( rs , mid + 1 , r , ql , qid ) : leftPart ; } } #undef ALLOK void modify_val ( int o , int l , int r , int ql , int qr , int val , int id , bool ignoreLid = false ) { // \u82e5 val = INF \u4ee3\u8868\u4e0d\u9700\u8981\u5bf9 val \u8fdb\u884c\u5904\u7406 // \u82e5 ignoreLid = true \u5219\u4e0d\u5bf9 lid \u8fdb\u884c\u66f4\u6539 if ( l >= ql && r <= qr ) { if ( val != INF ) tree [ o ]. val = tree [ o ]. lazy_val = val ; tree [ o ]. id1 = tree [ o ]. lazy_id1 = id ; tree [ o ]. id2 = tree [ o ]. lazy_id2 = id ; if ( ! ignoreLid ) tree [ o ]. lid = tree [ o ]. lazy_lid = id ; return ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) { modify_val ( ls , l , mid , ql , qr , val , id , ignoreLid ); } if ( qr > mid ) { modify_val ( rs , mid + 1 , r , ql , qr , val , id , ignoreLid ); } pushup ( o ); } bool is_same_id ( int o , int l , int r , int ql , int qr , int id , bool isRecover = false ) { // \u5224\u65ad\u8be5\u533a\u57df id \u548c lid \u662f\u5426\u6ee1\u8db3\u6761\u4ef6 if ( l >= ql && r <= qr ) { if ( isRecover ) { // \u68c0\u67e5 id = 0 \u4e14 lid = id return ( tree [ o ]. id2 == 0 && tree [ o ]. lid == id ); } else { // \u68c0\u67e5 id = id return ( tree [ o ]. id2 == id ); } } pushdown ( o ); int mid = ( l + r ) >> 1 ; bool isSame = true ; if ( ql <= mid ) { isSame = isSame && is_same_id ( ls , l , mid , ql , qr , id , isRecover ); } if ( qr > mid && isSame ) { isSame = isSame && is_same_id ( rs , mid + 1 , r , ql , qr , id , isRecover ); } return isSame ; } int query_val ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aval if ( p >= l && p <= r && tree [ o ]. val != INF ) { return tree [ o ]. val ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_val ( ls , l , mid , p ); else return query_val ( rs , mid + 1 , r , p ); } int query_id ( int o , int l , int r , int p ) { // \u7ebf\u6bb5\u6811\u5355\u70b9\u6c42\u503c\uff1aid2 if ( p >= l && p <= r && tree [ o ]. id2 != -1 ) { return tree [ o ]. id2 ; } pushdown ( o ); int mid = ( l + r ) >> 1 ; if ( p <= mid ) return query_id ( ls , l , mid , p ); else return query_id ( rs , mid + 1 , r , p ); } #undef ls #undef rs int main () { scanf ( \"%d%d%d\" , & n , & m , & k ); // \u521b\u5efa\u6839\u8282\u70b9 insert_node (); // \u8fdb\u884c\u64cd\u4f5c int r_opt , r_id , r_l , r_r , r_x , r_p ; while ( k -- ) { scanf ( \"%d\" , & r_opt ); if ( r_opt == 0 ) { // \u5199\u5165 scanf ( \"%d%d%d%d\" , & r_id , & r_l , & r_r , & r_x ); int r = find_right ( 1 , 1 , m , r_l , r_id ); if ( r == -2 ) r = r_r ; else r = min ( r , r_r ); if ( r_l <= r ) { printf ( \"%d \\n \" , r ); modify_val ( 1 , 1 , m , r_l , r , r_x , r_id ); } else { printf ( \"-1 \\n \" ); } } else if ( r_opt == 1 ) { // \u5220\u9664 scanf ( \"%d%d%d\" , & r_id , & r_l , & r_r ); if ( is_same_id ( 1 , 1 , m , r_l , r_r , r_id )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , r_l , r_r , INF , 0 , true ); } else { printf ( \"FAIL \\n \" ); } } else if ( r_opt == 2 ) { // \u6062\u590d scanf ( \"%d%d%d\" , & r_id , & r_l , & r_r ); if ( is_same_id ( 1 , 1 , m , r_l , r_r , r_id , true )) { printf ( \"OK \\n \" ); modify_val ( 1 , 1 , m , r_l , r_r , INF , r_id , true ); } else { printf ( \"FAIL \\n \" ); } } else { // \u67e5\u8be2 scanf ( \"%d\" , & r_p ); int id = query_id ( 1 , 1 , m , r_p ); int val = query_val ( 1 , 1 , m , r_p ); if ( id == 0 ) { printf ( \"0 0 \\n \" ); } else { printf ( \"%d %d \\n \" , id , val ); } } } return 0 ; }","title":"100% \u6570\u636e\u2014\u2014\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811"},{"location":"problem/24/5/","text":"202112-5 \u6781\u5dee\u8def\u5f84 \u9898\u76ee\u94fe\u63a5 202112-5 \u6781\u5dee\u8def\u5f84 \u601d\u8def\u5217\u8868 \u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"202112-5 \u6781\u5dee\u8def\u5f84"},{"location":"problem/24/5/#202112-5","text":"","title":"202112-5 \u6781\u5dee\u8def\u5f84"},{"location":"problem/24/5/#_1","text":"202112-5 \u6781\u5dee\u8def\u5f84","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/24/5/#_2","text":"\u9898\u89e3\u6587\u7ae0 \u5f97\u5206 \u8981\u6c42 \u5927\u81f4\u601d\u8def \u9898\u89e3\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/24/5/1/","text":"202112-5 \u6781\u5dee\u8def\u5f84","title":"202112-5 \u6781\u5dee\u8def\u5f84"},{"location":"problem/24/5/1/#202112-5","text":"","title":"202112-5 \u6781\u5dee\u8def\u5f84"},{"location":"problem/3/","text":"\u7b2c 3 \u6b21\uff082014 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201412-1 \u95e8\u7981\u7cfb\u7edf \u94fe\u63a5 201412-2 Z\u5b57\u5f62\u626b\u63cf \u94fe\u63a5 201412-3 \u96c6\u5408\u7ade\u4ef7 \u94fe\u63a5 201412-4 \u6700\u4f18\u704c\u6e89 \u94fe\u63a5 201412-5 \u8d27\u7269\u8c03\u5ea6 \u94fe\u63a5","title":"\u7b2c 3 \u6b21\uff082014 \u5e74 12 \u6708\uff09"},{"location":"problem/3/#3-2014-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201412-1 \u95e8\u7981\u7cfb\u7edf \u94fe\u63a5 201412-2 Z\u5b57\u5f62\u626b\u63cf \u94fe\u63a5 201412-3 \u96c6\u5408\u7ade\u4ef7 \u94fe\u63a5 201412-4 \u6700\u4f18\u704c\u6e89 \u94fe\u63a5 201412-5 \u8d27\u7269\u8c03\u5ea6 \u94fe\u63a5","title":"\u7b2c 3 \u6b21\uff082014 \u5e74 12 \u6708\uff09"},{"location":"problem/3/1/","text":"201412-1 \u95e8\u7981\u7cfb\u7edf \u9898\u76ee\u94fe\u63a5 201412-1 \u95e8\u7981\u7cfb\u7edf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201412-1 \u95e8\u7981\u7cfb\u7edf"},{"location":"problem/3/1/#201412-1","text":"","title":"201412-1 \u95e8\u7981\u7cfb\u7edf"},{"location":"problem/3/1/#_1","text":"201412-1 \u95e8\u7981\u7cfb\u7edf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/3/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/3/2/","text":"201412-2 Z\u5b57\u5f62\u626b\u63cf \u9898\u76ee\u94fe\u63a5 201412-2 Z\u5b57\u5f62\u626b\u63cf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201412-2 Z\u5b57\u5f62\u626b\u63cf"},{"location":"problem/3/2/#201412-2-z","text":"","title":"201412-2 Z\u5b57\u5f62\u626b\u63cf"},{"location":"problem/3/2/#_1","text":"201412-2 Z\u5b57\u5f62\u626b\u63cf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/3/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/3/3/","text":"201412-3 \u96c6\u5408\u7ade\u4ef7 \u9898\u76ee\u94fe\u63a5 201412-3 \u96c6\u5408\u7ade\u4ef7 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201412-3 \u96c6\u5408\u7ade\u4ef7"},{"location":"problem/3/3/#201412-3","text":"","title":"201412-3 \u96c6\u5408\u7ade\u4ef7"},{"location":"problem/3/3/#_1","text":"201412-3 \u96c6\u5408\u7ade\u4ef7","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/3/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/3/4/","text":"201412-4 \u6700\u4f18\u704c\u6e89 \u9898\u76ee\u94fe\u63a5 201412-4 \u6700\u4f18\u704c\u6e89 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201412-4 \u6700\u4f18\u704c\u6e89"},{"location":"problem/3/4/#201412-4","text":"","title":"201412-4 \u6700\u4f18\u704c\u6e89"},{"location":"problem/3/4/#_1","text":"201412-4 \u6700\u4f18\u704c\u6e89","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/3/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/3/5/","text":"201412-5 \u8d27\u7269\u8c03\u5ea6 \u9898\u76ee\u94fe\u63a5 201412-5 \u8d27\u7269\u8c03\u5ea6 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201412-5 \u8d27\u7269\u8c03\u5ea6"},{"location":"problem/3/5/#201412-5","text":"","title":"201412-5 \u8d27\u7269\u8c03\u5ea6"},{"location":"problem/3/5/#_1","text":"201412-5 \u8d27\u7269\u8c03\u5ea6","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/3/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/4/","text":"\u7b2c 4 \u6b21\uff082015 \u5e74 3 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201503-1 \u56fe\u50cf\u65cb\u8f6c \u94fe\u63a5 201503-2 \u6570\u5b57\u6392\u5e8f \u94fe\u63a5 201503-3 \u8282\u65e5 \u94fe\u63a5 201503-4 \u7f51\u7edc\u5ef6\u65f6 \u94fe\u63a5 201503-5 \u6700\u5c0f\u82b1\u8d39 \u94fe\u63a5","title":"\u7b2c 4 \u6b21\uff082015 \u5e74 3 \u6708\uff09"},{"location":"problem/4/#4-2015-3","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201503-1 \u56fe\u50cf\u65cb\u8f6c \u94fe\u63a5 201503-2 \u6570\u5b57\u6392\u5e8f \u94fe\u63a5 201503-3 \u8282\u65e5 \u94fe\u63a5 201503-4 \u7f51\u7edc\u5ef6\u65f6 \u94fe\u63a5 201503-5 \u6700\u5c0f\u82b1\u8d39 \u94fe\u63a5","title":"\u7b2c 4 \u6b21\uff082015 \u5e74 3 \u6708\uff09"},{"location":"problem/4/1/","text":"201503-1 \u56fe\u50cf\u65cb\u8f6c \u9898\u76ee\u94fe\u63a5 201503-1 \u56fe\u50cf\u65cb\u8f6c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201503-1 \u56fe\u50cf\u65cb\u8f6c"},{"location":"problem/4/1/#201503-1","text":"","title":"201503-1 \u56fe\u50cf\u65cb\u8f6c"},{"location":"problem/4/1/#_1","text":"201503-1 \u56fe\u50cf\u65cb\u8f6c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/4/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/4/2/","text":"201503-2 \u6570\u5b57\u6392\u5e8f \u9898\u76ee\u94fe\u63a5 201503-2 \u6570\u5b57\u6392\u5e8f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201503-2 \u6570\u5b57\u6392\u5e8f"},{"location":"problem/4/2/#201503-2","text":"","title":"201503-2 \u6570\u5b57\u6392\u5e8f"},{"location":"problem/4/2/#_1","text":"201503-2 \u6570\u5b57\u6392\u5e8f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/4/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/4/3/","text":"201503-3 \u8282\u65e5 \u9898\u76ee\u94fe\u63a5 201503-3 \u8282\u65e5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201503-3 \u8282\u65e5"},{"location":"problem/4/3/#201503-3","text":"","title":"201503-3 \u8282\u65e5"},{"location":"problem/4/3/#_1","text":"201503-3 \u8282\u65e5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/4/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/4/4/","text":"201503-4 \u7f51\u7edc\u5ef6\u65f6 \u9898\u76ee\u94fe\u63a5 201503-4 \u7f51\u7edc\u5ef6\u65f6 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201503-4 \u7f51\u7edc\u5ef6\u65f6"},{"location":"problem/4/4/#201503-4","text":"","title":"201503-4 \u7f51\u7edc\u5ef6\u65f6"},{"location":"problem/4/4/#_1","text":"201503-4 \u7f51\u7edc\u5ef6\u65f6","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/4/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/4/5/","text":"201503-5 \u6700\u5c0f\u82b1\u8d39 \u9898\u76ee\u94fe\u63a5 201503-5 \u6700\u5c0f\u82b1\u8d39 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201503-5 \u6700\u5c0f\u82b1\u8d39"},{"location":"problem/4/5/#201503-5","text":"","title":"201503-5 \u6700\u5c0f\u82b1\u8d39"},{"location":"problem/4/5/#_1","text":"201503-5 \u6700\u5c0f\u82b1\u8d39","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/4/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/5/","text":"\u7b2c 5 \u6b21\uff082015 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201509-1 \u6570\u5217\u5206\u6bb5 \u94fe\u63a5 201509-2 \u65e5\u671f\u8ba1\u7b97 \u94fe\u63a5 201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u94fe\u63a5 201509-4 \u9ad8\u901f\u516c\u8def \u94fe\u63a5 201509-5 \u6700\u4f73\u6587\u7ae0 \u94fe\u63a5","title":"\u7b2c 5 \u6b21\uff082015 \u5e74 9 \u6708\uff09"},{"location":"problem/5/#5-2015-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201509-1 \u6570\u5217\u5206\u6bb5 \u94fe\u63a5 201509-2 \u65e5\u671f\u8ba1\u7b97 \u94fe\u63a5 201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u94fe\u63a5 201509-4 \u9ad8\u901f\u516c\u8def \u94fe\u63a5 201509-5 \u6700\u4f73\u6587\u7ae0 \u94fe\u63a5","title":"\u7b2c 5 \u6b21\uff082015 \u5e74 9 \u6708\uff09"},{"location":"problem/5/1/","text":"201509-1 \u6570\u5217\u5206\u6bb5 \u9898\u76ee\u94fe\u63a5 201509-1 \u6570\u5217\u5206\u6bb5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201509-1 \u6570\u5217\u5206\u6bb5"},{"location":"problem/5/1/#201509-1","text":"","title":"201509-1 \u6570\u5217\u5206\u6bb5"},{"location":"problem/5/1/#_1","text":"201509-1 \u6570\u5217\u5206\u6bb5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/5/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/5/2/","text":"201509-2 \u65e5\u671f\u8ba1\u7b97 \u9898\u76ee\u94fe\u63a5 201509-2 \u65e5\u671f\u8ba1\u7b97 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201509-2 \u65e5\u671f\u8ba1\u7b97"},{"location":"problem/5/2/#201509-2","text":"","title":"201509-2 \u65e5\u671f\u8ba1\u7b97"},{"location":"problem/5/2/#_1","text":"201509-2 \u65e5\u671f\u8ba1\u7b97","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/5/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/5/3/","text":"201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u9898\u76ee\u94fe\u63a5 201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf"},{"location":"problem/5/3/#201509-3","text":"","title":"201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf"},{"location":"problem/5/3/#_1","text":"201509-3 \u6a21\u677f\u751f\u6210\u7cfb\u7edf","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/5/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/5/4/","text":"201509-4 \u9ad8\u901f\u516c\u8def \u9898\u76ee\u94fe\u63a5 201509-4 \u9ad8\u901f\u516c\u8def \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201509-4 \u9ad8\u901f\u516c\u8def"},{"location":"problem/5/4/#201509-4","text":"","title":"201509-4 \u9ad8\u901f\u516c\u8def"},{"location":"problem/5/4/#_1","text":"201509-4 \u9ad8\u901f\u516c\u8def","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/5/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/5/5/","text":"201509-5 \u6700\u4f73\u6587\u7ae0 \u9898\u76ee\u94fe\u63a5 201509-5 \u6700\u4f73\u6587\u7ae0 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201509-5 \u6700\u4f73\u6587\u7ae0"},{"location":"problem/5/5/#201509-5","text":"","title":"201509-5 \u6700\u4f73\u6587\u7ae0"},{"location":"problem/5/5/#_1","text":"201509-5 \u6700\u4f73\u6587\u7ae0","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/5/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/6/","text":"\u7b2c 6 \u6b21\uff082015 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201512-1 \u6570\u4f4d\u4e4b\u548c \u94fe\u63a5 201512-2 \u6d88\u9664\u7c7b\u6e38\u620f \u94fe\u63a5 201512-3 \u753b\u56fe \u94fe\u63a5 201512-4 \u9001\u8d27 \u94fe\u63a5 201512-5 \u77e9\u9635 \u94fe\u63a5","title":"\u7b2c 6 \u6b21\uff082015 \u5e74 12 \u6708\uff09"},{"location":"problem/6/#6-2015-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201512-1 \u6570\u4f4d\u4e4b\u548c \u94fe\u63a5 201512-2 \u6d88\u9664\u7c7b\u6e38\u620f \u94fe\u63a5 201512-3 \u753b\u56fe \u94fe\u63a5 201512-4 \u9001\u8d27 \u94fe\u63a5 201512-5 \u77e9\u9635 \u94fe\u63a5","title":"\u7b2c 6 \u6b21\uff082015 \u5e74 12 \u6708\uff09"},{"location":"problem/6/1/","text":"201512-1 \u6570\u4f4d\u4e4b\u548c \u9898\u76ee\u94fe\u63a5 201512-1 \u6570\u4f4d\u4e4b\u548c \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201512-1 \u6570\u4f4d\u4e4b\u548c"},{"location":"problem/6/1/#201512-1","text":"","title":"201512-1 \u6570\u4f4d\u4e4b\u548c"},{"location":"problem/6/1/#_1","text":"201512-1 \u6570\u4f4d\u4e4b\u548c","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/6/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/6/2/","text":"201512-2 \u6d88\u9664\u7c7b\u6e38\u620f \u9898\u76ee\u94fe\u63a5 201512-2 \u6d88\u9664\u7c7b\u6e38\u620f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201512-2 \u6d88\u9664\u7c7b\u6e38\u620f"},{"location":"problem/6/2/#201512-2","text":"","title":"201512-2 \u6d88\u9664\u7c7b\u6e38\u620f"},{"location":"problem/6/2/#_1","text":"201512-2 \u6d88\u9664\u7c7b\u6e38\u620f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/6/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/6/3/","text":"201512-3 \u753b\u56fe \u9898\u76ee\u94fe\u63a5 201512-3 \u753b\u56fe \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201512-3 \u753b\u56fe"},{"location":"problem/6/3/#201512-3","text":"","title":"201512-3 \u753b\u56fe"},{"location":"problem/6/3/#_1","text":"201512-3 \u753b\u56fe","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/6/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/6/4/","text":"201512-4 \u9001\u8d27 \u9898\u76ee\u94fe\u63a5 201512-4 \u9001\u8d27 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201512-4 \u9001\u8d27"},{"location":"problem/6/4/#201512-4","text":"","title":"201512-4 \u9001\u8d27"},{"location":"problem/6/4/#_1","text":"201512-4 \u9001\u8d27","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/6/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/6/5/","text":"201512-5 \u77e9\u9635 \u9898\u76ee\u94fe\u63a5 201512-5 \u77e9\u9635 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201512-5 \u77e9\u9635"},{"location":"problem/6/5/#201512-5","text":"","title":"201512-5 \u77e9\u9635"},{"location":"problem/6/5/#_1","text":"201512-5 \u77e9\u9635","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/6/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/7/","text":"\u7b2c 7 \u6b21\uff082016 \u5e74 4 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201604-1 \u6298\u70b9\u8ba1\u6570 \u94fe\u63a5 201604-2 \u4fc4\u7f57\u65af\u65b9\u5757 \u94fe\u63a5 201604-3 \u8def\u5f84\u89e3\u6790 \u94fe\u63a5 201604-4 \u6e38\u620f \u94fe\u63a5 201604-5 \u7f51\u7edc\u8fde\u63a5 \u94fe\u63a5","title":"\u7b2c 7 \u6b21\uff082016 \u5e74 4 \u6708\uff09"},{"location":"problem/7/#7-2016-4","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201604-1 \u6298\u70b9\u8ba1\u6570 \u94fe\u63a5 201604-2 \u4fc4\u7f57\u65af\u65b9\u5757 \u94fe\u63a5 201604-3 \u8def\u5f84\u89e3\u6790 \u94fe\u63a5 201604-4 \u6e38\u620f \u94fe\u63a5 201604-5 \u7f51\u7edc\u8fde\u63a5 \u94fe\u63a5","title":"\u7b2c 7 \u6b21\uff082016 \u5e74 4 \u6708\uff09"},{"location":"problem/7/1/","text":"201604-1 \u6298\u70b9\u8ba1\u6570 \u9898\u76ee\u94fe\u63a5 201604-1 \u6298\u70b9\u8ba1\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201604-1 \u6298\u70b9\u8ba1\u6570"},{"location":"problem/7/1/#201604-1","text":"","title":"201604-1 \u6298\u70b9\u8ba1\u6570"},{"location":"problem/7/1/#_1","text":"201604-1 \u6298\u70b9\u8ba1\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/7/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/7/2/","text":"201604-2 \u4fc4\u7f57\u65af\u65b9\u5757 \u9898\u76ee\u94fe\u63a5 201604-2 \u4fc4\u7f57\u65af\u65b9\u5757 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201604-2 \u4fc4\u7f57\u65af\u65b9\u5757"},{"location":"problem/7/2/#201604-2","text":"","title":"201604-2 \u4fc4\u7f57\u65af\u65b9\u5757"},{"location":"problem/7/2/#_1","text":"201604-2 \u4fc4\u7f57\u65af\u65b9\u5757","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/7/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/7/3/","text":"201604-3 \u8def\u5f84\u89e3\u6790 \u9898\u76ee\u94fe\u63a5 201604-3 \u8def\u5f84\u89e3\u6790 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201604-3 \u8def\u5f84\u89e3\u6790"},{"location":"problem/7/3/#201604-3","text":"","title":"201604-3 \u8def\u5f84\u89e3\u6790"},{"location":"problem/7/3/#_1","text":"201604-3 \u8def\u5f84\u89e3\u6790","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/7/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/7/4/","text":"201604-4 \u6e38\u620f \u9898\u76ee\u94fe\u63a5 201604-4 \u6e38\u620f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201604-4 \u6e38\u620f"},{"location":"problem/7/4/#201604-4","text":"","title":"201604-4 \u6e38\u620f"},{"location":"problem/7/4/#_1","text":"201604-4 \u6e38\u620f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/7/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/7/5/","text":"201604-5 \u7f51\u7edc\u8fde\u63a5 \u9898\u76ee\u94fe\u63a5 201604-5 \u7f51\u7edc\u8fde\u63a5 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201604-5 \u7f51\u7edc\u8fde\u63a5"},{"location":"problem/7/5/#201604-5","text":"","title":"201604-5 \u7f51\u7edc\u8fde\u63a5"},{"location":"problem/7/5/#_1","text":"201604-5 \u7f51\u7edc\u8fde\u63a5","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/7/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/8/","text":"\u7b2c 8 \u6b21\uff082016 \u5e74 9 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201609-1 \u6700\u5927\u6ce2\u52a8 \u94fe\u63a5 201609-2 \u706b\u8f66\u8d2d\u7968 \u94fe\u63a5 201609-3 \u7089\u77f3\u4f20\u8bf4 \u94fe\u63a5 201609-4 \u4ea4\u901a\u89c4\u5212 \u94fe\u63a5 201609-5 \u796d\u575b \u94fe\u63a5","title":"\u7b2c 8 \u6b21\uff082016 \u5e74 9 \u6708\uff09"},{"location":"problem/8/#8-2016-9","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201609-1 \u6700\u5927\u6ce2\u52a8 \u94fe\u63a5 201609-2 \u706b\u8f66\u8d2d\u7968 \u94fe\u63a5 201609-3 \u7089\u77f3\u4f20\u8bf4 \u94fe\u63a5 201609-4 \u4ea4\u901a\u89c4\u5212 \u94fe\u63a5 201609-5 \u796d\u575b \u94fe\u63a5","title":"\u7b2c 8 \u6b21\uff082016 \u5e74 9 \u6708\uff09"},{"location":"problem/8/1/","text":"201609-1 \u6700\u5927\u6ce2\u52a8 \u9898\u76ee\u94fe\u63a5 201609-1 \u6700\u5927\u6ce2\u52a8 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201609-1 \u6700\u5927\u6ce2\u52a8"},{"location":"problem/8/1/#201609-1","text":"","title":"201609-1 \u6700\u5927\u6ce2\u52a8"},{"location":"problem/8/1/#_1","text":"201609-1 \u6700\u5927\u6ce2\u52a8","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/8/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/8/2/","text":"201609-2 \u706b\u8f66\u8d2d\u7968 \u9898\u76ee\u94fe\u63a5 201609-2 \u706b\u8f66\u8d2d\u7968 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201609-2 \u706b\u8f66\u8d2d\u7968"},{"location":"problem/8/2/#201609-2","text":"","title":"201609-2 \u706b\u8f66\u8d2d\u7968"},{"location":"problem/8/2/#_1","text":"201609-2 \u706b\u8f66\u8d2d\u7968","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/8/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/8/3/","text":"201609-3 \u7089\u77f3\u4f20\u8bf4 \u9898\u76ee\u94fe\u63a5 201609-3 \u7089\u77f3\u4f20\u8bf4 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201609-3 \u7089\u77f3\u4f20\u8bf4"},{"location":"problem/8/3/#201609-3","text":"","title":"201609-3 \u7089\u77f3\u4f20\u8bf4"},{"location":"problem/8/3/#_1","text":"201609-3 \u7089\u77f3\u4f20\u8bf4","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/8/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/8/4/","text":"201609-4 \u4ea4\u901a\u89c4\u5212 \u9898\u76ee\u94fe\u63a5 201609-4 \u4ea4\u901a\u89c4\u5212 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201609-4 \u4ea4\u901a\u89c4\u5212"},{"location":"problem/8/4/#201609-4","text":"","title":"201609-4 \u4ea4\u901a\u89c4\u5212"},{"location":"problem/8/4/#_1","text":"201609-4 \u4ea4\u901a\u89c4\u5212","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/8/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/8/5/","text":"201609-5 \u796d\u575b \u9898\u76ee\u94fe\u63a5 201609-5 \u796d\u575b \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201609-5 \u796d\u575b"},{"location":"problem/8/5/#201609-5","text":"","title":"201609-5 \u796d\u575b"},{"location":"problem/8/5/#_1","text":"201609-5 \u796d\u575b","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/8/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/9/","text":"\u7b2c 9 \u6b21\uff082016 \u5e74 12 \u6708\uff09 \u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201612-1 \u4e2d\u95f4\u6570 \u94fe\u63a5 201612-2 \u5de5\u8d44\u8ba1\u7b97 \u94fe\u63a5 201612-3 \u6743\u9650\u67e5\u8be2 \u94fe\u63a5 201612-4 \u538b\u7f29\u7f16\u7801 \u94fe\u63a5 201612-5 \u5361\u724c\u6e38\u620f \u94fe\u63a5","title":"\u7b2c 9 \u6b21\uff082016 \u5e74 12 \u6708\uff09"},{"location":"problem/9/#9-2016-12","text":"\u9898\u76ee\u7f16\u53f7 \u9898\u76ee\u540d\u79f0 \u6d89\u53ca\u7b97\u6cd5 \u6700\u9ad8\u5f97\u5206 \u6ee1\u5206\u9898\u89e3\u8bed\u8a00 \u94fe\u63a5 201612-1 \u4e2d\u95f4\u6570 \u94fe\u63a5 201612-2 \u5de5\u8d44\u8ba1\u7b97 \u94fe\u63a5 201612-3 \u6743\u9650\u67e5\u8be2 \u94fe\u63a5 201612-4 \u538b\u7f29\u7f16\u7801 \u94fe\u63a5 201612-5 \u5361\u724c\u6e38\u620f \u94fe\u63a5","title":"\u7b2c 9 \u6b21\uff082016 \u5e74 12 \u6708\uff09"},{"location":"problem/9/1/","text":"201612-1 \u4e2d\u95f4\u6570 \u9898\u76ee\u94fe\u63a5 201612-1 \u4e2d\u95f4\u6570 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201612-1 \u4e2d\u95f4\u6570"},{"location":"problem/9/1/#201612-1","text":"","title":"201612-1 \u4e2d\u95f4\u6570"},{"location":"problem/9/1/#_1","text":"201612-1 \u4e2d\u95f4\u6570","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/9/1/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/9/2/","text":"201612-2 \u5de5\u8d44\u8ba1\u7b97 \u9898\u76ee\u94fe\u63a5 201612-2 \u5de5\u8d44\u8ba1\u7b97 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201612-2 \u5de5\u8d44\u8ba1\u7b97"},{"location":"problem/9/2/#201612-2","text":"","title":"201612-2 \u5de5\u8d44\u8ba1\u7b97"},{"location":"problem/9/2/#_1","text":"201612-2 \u5de5\u8d44\u8ba1\u7b97","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/9/2/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/9/3/","text":"201612-3 \u6743\u9650\u67e5\u8be2 \u9898\u76ee\u94fe\u63a5 201612-3 \u6743\u9650\u67e5\u8be2 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201612-3 \u6743\u9650\u67e5\u8be2"},{"location":"problem/9/3/#201612-3","text":"","title":"201612-3 \u6743\u9650\u67e5\u8be2"},{"location":"problem/9/3/#_1","text":"201612-3 \u6743\u9650\u67e5\u8be2","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/9/3/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/9/4/","text":"201612-4 \u538b\u7f29\u7f16\u7801 \u9898\u76ee\u94fe\u63a5 201612-4 \u538b\u7f29\u7f16\u7801 \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201612-4 \u538b\u7f29\u7f16\u7801"},{"location":"problem/9/4/#201612-4","text":"","title":"201612-4 \u538b\u7f29\u7f16\u7801"},{"location":"problem/9/4/#_1","text":"201612-4 \u538b\u7f29\u7f16\u7801","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/9/4/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"problem/9/5/","text":"201612-5 \u5361\u724c\u6e38\u620f \u9898\u76ee\u94fe\u63a5 201612-5 \u5361\u724c\u6e38\u620f \u601d\u8def\u5217\u8868 \u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"201612-5 \u5361\u724c\u6e38\u620f"},{"location":"problem/9/5/#201612-5","text":"","title":"201612-5 \u5361\u724c\u6e38\u620f"},{"location":"problem/9/5/#_1","text":"201612-5 \u5361\u724c\u6e38\u620f","title":"\u9898\u76ee\u94fe\u63a5"},{"location":"problem/9/5/#_2","text":"\u8d21\u732e\u8005 \u671f\u671b\u5f97\u5206 \u5927\u6982\u601d\u8def \u4f7f\u7528\u8bed\u8a00 \u94fe\u63a5","title":"\u601d\u8def\u5217\u8868"},{"location":"test_pages/test/","text":"\u6d4b\u8bd5\u9875\u9762 \u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u9875\u9762\u3002","title":"\u6d4b\u8bd5\u9875\u9762"},{"location":"test_pages/test/#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u9875\u9762\u3002","title":"\u6d4b\u8bd5\u9875\u9762"},{"location":"test_pages/unfinished/","text":"\u5f53\u524d\u9875\u9762\u6ca1\u6709\u5185\u5bb9 \u5f88\u62b1\u6b49\uff0c\u60a8\u76ee\u524d\u6d4f\u89c8\u7684\u9875\u9762\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u3002\u7531\u4e8e\u4eba\u624b\u4e0d\u8db3\u7b49\u9650\u5236\uff0c\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u5b8c\u6210\u6b64\u9875\u9762\u7684\u7f16\u8f91\u3002 \u6211\u4eec\u5c06\u4f1a\u5728\u4e4b\u540e\u66f4\u65b0\u3002","title":"\u5f53\u524d\u9875\u9762\u6ca1\u6709\u5185\u5bb9"},{"location":"test_pages/unfinished/#_1","text":"\u5f88\u62b1\u6b49\uff0c\u60a8\u76ee\u524d\u6d4f\u89c8\u7684\u9875\u9762\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u3002\u7531\u4e8e\u4eba\u624b\u4e0d\u8db3\u7b49\u9650\u5236\uff0c\u6211\u4eec\u76ee\u524d\u6ca1\u6709\u5b8c\u6210\u6b64\u9875\u9762\u7684\u7f16\u8f91\u3002 \u6211\u4eec\u5c06\u4f1a\u5728\u4e4b\u540e\u66f4\u65b0\u3002","title":"\u5f53\u524d\u9875\u9762\u6ca1\u6709\u5185\u5bb9"}]}